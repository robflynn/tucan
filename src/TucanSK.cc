// This file is generated by omniidl (C++ backend)- omniORB_3_0. Do not edit.

#include "Tucan.hh"
#include <omniORB3/callDescriptor.h>

static const char* _0RL_library_version = omniORB_3_0;

_init_in_def_( const CORBA::Long MESSAGE_READ = 1; )

_init_in_def_( const CORBA::Long MESSAGE_EXPUNGED = 2; )

_init_in_def_( const CORBA::Long MESSAGE_IMPORTANT = 4; )

_init_in_def_( const CORBA::Long MESSAGE_REPLIED = 8; )

size_t
TucanMessageHeader::_NP_alignedSize(size_t _initialoffset) const
{
  CORBA::ULong _msgsize = _initialoffset;
  _msgsize = fromaddr._NP_alignedSize(_msgsize);

  _msgsize = subject._NP_alignedSize(_msgsize);

  _msgsize = omni::align_to(_msgsize, omni::ALIGN_4) + 4;

  _msgsize = omni::align_to(_msgsize, omni::ALIGN_4) + 4;

  _msgsize = omni::align_to(_msgsize, omni::ALIGN_2) + 2;

  _msgsize = omni::align_to(_msgsize, omni::ALIGN_2) + 2;

  return _msgsize;
}

void
TucanMessageHeader::operator>>= (NetBufferedStream &_n) const
{
  fromaddr >>= _n;
  subject >>= _n;
  size >>= _n;
  date >>= _n;
  flags >>= _n;
  attach >>= _n;
  
}

void
TucanMessageHeader::operator<<= (NetBufferedStream &_n)
{
  fromaddr <<= _n;
  subject <<= _n;
  size <<= _n;
  date <<= _n;
  flags <<= _n;
  attach <<= _n;
  
}

void
TucanMessageHeader::operator>>= (MemBufferedStream &_n) const
{
  fromaddr >>= _n;
  subject >>= _n;
  size >>= _n;
  date >>= _n;
  flags >>= _n;
  attach >>= _n;
  
}

void
TucanMessageHeader::operator<<= (MemBufferedStream &_n)
{
  fromaddr <<= _n;
  subject <<= _n;
  size <<= _n;
  date <<= _n;
  flags <<= _n;
  attach <<= _n;
  
}

size_t
TucanAttribute::_NP_alignedSize(size_t _initialoffset) const
{
  CORBA::ULong _msgsize = _initialoffset;
  _msgsize = name._NP_alignedSize(_msgsize);

  _msgsize = value._NP_alignedSize(_msgsize);

  return _msgsize;
}

void
TucanAttribute::operator>>= (NetBufferedStream &_n) const
{
  name >>= _n;
  value >>= _n;
  
}

void
TucanAttribute::operator<<= (NetBufferedStream &_n)
{
  name <<= _n;
  value <<= _n;
  
}

void
TucanAttribute::operator>>= (MemBufferedStream &_n) const
{
  name >>= _n;
  value >>= _n;
  
}

void
TucanAttribute::operator<<= (MemBufferedStream &_n)
{
  name <<= _n;
  value <<= _n;
  
}

CORBA::Exception::insertExceptionToAny TucanMsgException::insertToAnyFn = 0;
CORBA::Exception::insertExceptionToAnyNCP TucanMsgException::insertToAnyFnNCP = 0;

TucanMsgException::TucanMsgException(const TucanMsgException& _s) : CORBA::UserException(_s)
{
  number = _s.number;
  folder = _s.folder;
  exString = _s.exString;
  
}

TucanMsgException::TucanMsgException(const char* _number, const char* _folder, const char* _exString)
{
  pd_insertToAnyFn    = TucanMsgException::insertToAnyFn;
  pd_insertToAnyFnNCP = TucanMsgException::insertToAnyFnNCP;
  number = _number;
  folder = _folder;
  exString = _exString;
  
}

TucanMsgException& TucanMsgException::operator=(const TucanMsgException& _s)
{
  ((CORBA::UserException*) this)->operator=(_s);
  number = _s.number;
  folder = _s.folder;
  exString = _s.exString;
  
  return *this;
}

TucanMsgException::~TucanMsgException() {}

void TucanMsgException::_raise() { throw *this; }

TucanMsgException* TucanMsgException::_downcast(CORBA::Exception* _e) {
  return (TucanMsgException*) _NP_is_a(_e, "Exception/UserException/TucanMsgException");
}

const TucanMsgException* TucanMsgException::_downcast(const CORBA::Exception* _e) {
  return (const TucanMsgException*) _NP_is_a(_e, "Exception/UserException/TucanMsgException");
}

const char* TucanMsgException::_PD_repoId = "IDL:TucanMsgException:1.0";

CORBA::Exception* TucanMsgException::_NP_duplicate() const {
  return new TucanMsgException(*this);
}

const char* TucanMsgException::_NP_typeId() const {
  return "Exception/UserException/TucanMsgException";
}

const char* TucanMsgException::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:TucanMsgException:1.0");
  return "IDL:TucanMsgException:1.0";
}

void TucanMsgException::_NP_marshal(NetBufferedStream& _s) const {
  *this >>= _s;
}

void TucanMsgException::_NP_marshal(MemBufferedStream& _s) const {
  *this >>= _s;
}

size_t
TucanMsgException::_NP_alignedSize(size_t _msgsize) const
{
  _msgsize = omni::align_to(_msgsize, omni::ALIGN_4) + 4;
  _msgsize += ((const char*) number) ? strlen((const char*) number) + 1 : 1;
  
  _msgsize = omni::align_to(_msgsize, omni::ALIGN_4) + 4;
  _msgsize += ((const char*) folder) ? strlen((const char*) folder) + 1 : 1;
  
  _msgsize = omni::align_to(_msgsize, omni::ALIGN_4) + 4;
  _msgsize += ((const char*) exString) ? strlen((const char*) exString) + 1 : 1;
  
  return _msgsize;
}

void
TucanMsgException::operator>>= (NetBufferedStream& _n) const
{
  {
    CORBA::ULong _len = (((const char*) number)? strlen((const char*) number) + 1 : 1);
    
    _len >>= _n;
    if (_len > 1)
      _n.put_char_array((const CORBA::Char *)((const char*)number),_len);
    else {
      if ((const char*) number == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= _n;
    }
  }
  {
    CORBA::ULong _len = (((const char*) folder)? strlen((const char*) folder) + 1 : 1);
    
    _len >>= _n;
    if (_len > 1)
      _n.put_char_array((const CORBA::Char *)((const char*)folder),_len);
    else {
      if ((const char*) folder == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= _n;
    }
  }
  {
    CORBA::ULong _len = (((const char*) exString)? strlen((const char*) exString) + 1 : 1);
    
    _len >>= _n;
    if (_len > 1)
      _n.put_char_array((const CORBA::Char *)((const char*)exString),_len);
    else {
      if ((const char*) exString == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= _n;
    }
  }
  
}

void
TucanMsgException::operator<<= (NetBufferedStream& _n)
{
  {
    CORBA::String_member _0RL_str_tmp;
    _0RL_str_tmp <<= _n;
    number = _0RL_str_tmp._ptr;
    _0RL_str_tmp._ptr = 0;
  }
  
  {
    CORBA::String_member _0RL_str_tmp;
    _0RL_str_tmp <<= _n;
    folder = _0RL_str_tmp._ptr;
    _0RL_str_tmp._ptr = 0;
  }
  
  {
    CORBA::String_member _0RL_str_tmp;
    _0RL_str_tmp <<= _n;
    exString = _0RL_str_tmp._ptr;
    _0RL_str_tmp._ptr = 0;
  }
  
}

void
TucanMsgException::operator>>= (MemBufferedStream& _n) const
{
  {
    CORBA::ULong _len = (((const char*) number)? strlen((const char*) number) + 1 : 1);
    
    _len >>= _n;
    if (_len > 1)
      _n.put_char_array((const CORBA::Char *)((const char*)number),_len);
    else {
      if ((const char*) number == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= _n;
    }
  }
  {
    CORBA::ULong _len = (((const char*) folder)? strlen((const char*) folder) + 1 : 1);
    
    _len >>= _n;
    if (_len > 1)
      _n.put_char_array((const CORBA::Char *)((const char*)folder),_len);
    else {
      if ((const char*) folder == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= _n;
    }
  }
  {
    CORBA::ULong _len = (((const char*) exString)? strlen((const char*) exString) + 1 : 1);
    
    _len >>= _n;
    if (_len > 1)
      _n.put_char_array((const CORBA::Char *)((const char*)exString),_len);
    else {
      if ((const char*) exString == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= _n;
    }
  }
  
}

void
TucanMsgException::operator<<= (MemBufferedStream& _n)
{
  {
    CORBA::String_member _0RL_str_tmp;
    _0RL_str_tmp <<= _n;
    number = _0RL_str_tmp._ptr;
    _0RL_str_tmp._ptr = 0;
  }
  
  {
    CORBA::String_member _0RL_str_tmp;
    _0RL_str_tmp <<= _n;
    folder = _0RL_str_tmp._ptr;
    _0RL_str_tmp._ptr = 0;
  }
  
  {
    CORBA::String_member _0RL_str_tmp;
    _0RL_str_tmp <<= _n;
    exString = _0RL_str_tmp._ptr;
    _0RL_str_tmp._ptr = 0;
  }
  
}

CORBA::Exception::insertExceptionToAny TucanAuthException::insertToAnyFn = 0;
CORBA::Exception::insertExceptionToAnyNCP TucanAuthException::insertToAnyFnNCP = 0;

TucanAuthException::TucanAuthException(const TucanAuthException& _s) : CORBA::UserException(_s)
{
  username = _s.username;
  password = _s.password;
  pinnumber = _s.pinnumber;
  exString = _s.exString;
  
}

TucanAuthException::TucanAuthException(const char* _username, const char* _password, CORBA::Long _pinnumber, const char* _exString)
{
  pd_insertToAnyFn    = TucanAuthException::insertToAnyFn;
  pd_insertToAnyFnNCP = TucanAuthException::insertToAnyFnNCP;
  username = _username;
  password = _password;
  pinnumber = _pinnumber;
  exString = _exString;
  
}

TucanAuthException& TucanAuthException::operator=(const TucanAuthException& _s)
{
  ((CORBA::UserException*) this)->operator=(_s);
  username = _s.username;
  password = _s.password;
  pinnumber = _s.pinnumber;
  exString = _s.exString;
  
  return *this;
}

TucanAuthException::~TucanAuthException() {}

void TucanAuthException::_raise() { throw *this; }

TucanAuthException* TucanAuthException::_downcast(CORBA::Exception* _e) {
  return (TucanAuthException*) _NP_is_a(_e, "Exception/UserException/TucanAuthException");
}

const TucanAuthException* TucanAuthException::_downcast(const CORBA::Exception* _e) {
  return (const TucanAuthException*) _NP_is_a(_e, "Exception/UserException/TucanAuthException");
}

const char* TucanAuthException::_PD_repoId = "IDL:TucanAuthException:1.0";

CORBA::Exception* TucanAuthException::_NP_duplicate() const {
  return new TucanAuthException(*this);
}

const char* TucanAuthException::_NP_typeId() const {
  return "Exception/UserException/TucanAuthException";
}

const char* TucanAuthException::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:TucanAuthException:1.0");
  return "IDL:TucanAuthException:1.0";
}

void TucanAuthException::_NP_marshal(NetBufferedStream& _s) const {
  *this >>= _s;
}

void TucanAuthException::_NP_marshal(MemBufferedStream& _s) const {
  *this >>= _s;
}

size_t
TucanAuthException::_NP_alignedSize(size_t _msgsize) const
{
  _msgsize = omni::align_to(_msgsize, omni::ALIGN_4) + 4;
  _msgsize += ((const char*) username) ? strlen((const char*) username) + 1 : 1;
  
  _msgsize = omni::align_to(_msgsize, omni::ALIGN_4) + 4;
  _msgsize += ((const char*) password) ? strlen((const char*) password) + 1 : 1;
  
  _msgsize = omni::align_to(_msgsize, omni::ALIGN_4) + 4;
  
  _msgsize = omni::align_to(_msgsize, omni::ALIGN_4) + 4;
  _msgsize += ((const char*) exString) ? strlen((const char*) exString) + 1 : 1;
  
  return _msgsize;
}

void
TucanAuthException::operator>>= (NetBufferedStream& _n) const
{
  {
    CORBA::ULong _len = (((const char*) username)? strlen((const char*) username) + 1 : 1);
    
    _len >>= _n;
    if (_len > 1)
      _n.put_char_array((const CORBA::Char *)((const char*)username),_len);
    else {
      if ((const char*) username == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= _n;
    }
  }
  {
    CORBA::ULong _len = (((const char*) password)? strlen((const char*) password) + 1 : 1);
    
    _len >>= _n;
    if (_len > 1)
      _n.put_char_array((const CORBA::Char *)((const char*)password),_len);
    else {
      if ((const char*) password == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= _n;
    }
  }
  pinnumber >>= _n;
  {
    CORBA::ULong _len = (((const char*) exString)? strlen((const char*) exString) + 1 : 1);
    
    _len >>= _n;
    if (_len > 1)
      _n.put_char_array((const CORBA::Char *)((const char*)exString),_len);
    else {
      if ((const char*) exString == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= _n;
    }
  }
  
}

void
TucanAuthException::operator<<= (NetBufferedStream& _n)
{
  {
    CORBA::String_member _0RL_str_tmp;
    _0RL_str_tmp <<= _n;
    username = _0RL_str_tmp._ptr;
    _0RL_str_tmp._ptr = 0;
  }
  
  {
    CORBA::String_member _0RL_str_tmp;
    _0RL_str_tmp <<= _n;
    password = _0RL_str_tmp._ptr;
    _0RL_str_tmp._ptr = 0;
  }
  
  pinnumber <<= _n;
  {
    CORBA::String_member _0RL_str_tmp;
    _0RL_str_tmp <<= _n;
    exString = _0RL_str_tmp._ptr;
    _0RL_str_tmp._ptr = 0;
  }
  
}

void
TucanAuthException::operator>>= (MemBufferedStream& _n) const
{
  {
    CORBA::ULong _len = (((const char*) username)? strlen((const char*) username) + 1 : 1);
    
    _len >>= _n;
    if (_len > 1)
      _n.put_char_array((const CORBA::Char *)((const char*)username),_len);
    else {
      if ((const char*) username == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= _n;
    }
  }
  {
    CORBA::ULong _len = (((const char*) password)? strlen((const char*) password) + 1 : 1);
    
    _len >>= _n;
    if (_len > 1)
      _n.put_char_array((const CORBA::Char *)((const char*)password),_len);
    else {
      if ((const char*) password == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= _n;
    }
  }
  pinnumber >>= _n;
  {
    CORBA::ULong _len = (((const char*) exString)? strlen((const char*) exString) + 1 : 1);
    
    _len >>= _n;
    if (_len > 1)
      _n.put_char_array((const CORBA::Char *)((const char*)exString),_len);
    else {
      if ((const char*) exString == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= _n;
    }
  }
  
}

void
TucanAuthException::operator<<= (MemBufferedStream& _n)
{
  {
    CORBA::String_member _0RL_str_tmp;
    _0RL_str_tmp <<= _n;
    username = _0RL_str_tmp._ptr;
    _0RL_str_tmp._ptr = 0;
  }
  
  {
    CORBA::String_member _0RL_str_tmp;
    _0RL_str_tmp <<= _n;
    password = _0RL_str_tmp._ptr;
    _0RL_str_tmp._ptr = 0;
  }
  
  pinnumber <<= _n;
  {
    CORBA::String_member _0RL_str_tmp;
    _0RL_str_tmp <<= _n;
    exString = _0RL_str_tmp._ptr;
    _0RL_str_tmp._ptr = 0;
  }
  
}

CORBA::Exception::insertExceptionToAny TucanException::insertToAnyFn = 0;
CORBA::Exception::insertExceptionToAnyNCP TucanException::insertToAnyFnNCP = 0;

TucanException::TucanException(const TucanException& _s) : CORBA::UserException(_s)
{
  exString = _s.exString;
  
}

TucanException::TucanException(const char* _exString)
{
  pd_insertToAnyFn    = TucanException::insertToAnyFn;
  pd_insertToAnyFnNCP = TucanException::insertToAnyFnNCP;
  exString = _exString;
  
}

TucanException& TucanException::operator=(const TucanException& _s)
{
  ((CORBA::UserException*) this)->operator=(_s);
  exString = _s.exString;
  
  return *this;
}

TucanException::~TucanException() {}

void TucanException::_raise() { throw *this; }

TucanException* TucanException::_downcast(CORBA::Exception* _e) {
  return (TucanException*) _NP_is_a(_e, "Exception/UserException/TucanException");
}

const TucanException* TucanException::_downcast(const CORBA::Exception* _e) {
  return (const TucanException*) _NP_is_a(_e, "Exception/UserException/TucanException");
}

const char* TucanException::_PD_repoId = "IDL:TucanException:1.0";

CORBA::Exception* TucanException::_NP_duplicate() const {
  return new TucanException(*this);
}

const char* TucanException::_NP_typeId() const {
  return "Exception/UserException/TucanException";
}

const char* TucanException::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:TucanException:1.0");
  return "IDL:TucanException:1.0";
}

void TucanException::_NP_marshal(NetBufferedStream& _s) const {
  *this >>= _s;
}

void TucanException::_NP_marshal(MemBufferedStream& _s) const {
  *this >>= _s;
}

size_t
TucanException::_NP_alignedSize(size_t _msgsize) const
{
  _msgsize = omni::align_to(_msgsize, omni::ALIGN_4) + 4;
  _msgsize += ((const char*) exString) ? strlen((const char*) exString) + 1 : 1;
  
  return _msgsize;
}

void
TucanException::operator>>= (NetBufferedStream& _n) const
{
  {
    CORBA::ULong _len = (((const char*) exString)? strlen((const char*) exString) + 1 : 1);
    
    _len >>= _n;
    if (_len > 1)
      _n.put_char_array((const CORBA::Char *)((const char*)exString),_len);
    else {
      if ((const char*) exString == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= _n;
    }
  }
  
}

void
TucanException::operator<<= (NetBufferedStream& _n)
{
  {
    CORBA::String_member _0RL_str_tmp;
    _0RL_str_tmp <<= _n;
    exString = _0RL_str_tmp._ptr;
    _0RL_str_tmp._ptr = 0;
  }
  
}

void
TucanException::operator>>= (MemBufferedStream& _n) const
{
  {
    CORBA::ULong _len = (((const char*) exString)? strlen((const char*) exString) + 1 : 1);
    
    _len >>= _n;
    if (_len > 1)
      _n.put_char_array((const CORBA::Char *)((const char*)exString),_len);
    else {
      if ((const char*) exString == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= _n;
    }
  }
  
}

void
TucanException::operator<<= (MemBufferedStream& _n)
{
  {
    CORBA::String_member _0RL_str_tmp;
    _0RL_str_tmp <<= _n;
    exString = _0RL_str_tmp._ptr;
    _0RL_str_tmp._ptr = 0;
  }
  
}

TucanAddress_ptr TucanAddress_Helper::_nil() {
  return TucanAddress::_nil();
}

CORBA::Boolean TucanAddress_Helper::is_nil(TucanAddress_ptr p) {
  return CORBA::is_nil(p);

}

void TucanAddress_Helper::release(TucanAddress_ptr p) {
  CORBA::release(p);
}

void TucanAddress_Helper::duplicate(TucanAddress_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanAddress_Helper::NP_alignedSize(TucanAddress_ptr obj, size_t offset) {
  return TucanAddress::_alignedSize(obj, offset);
}

void TucanAddress_Helper::marshalObjRef(TucanAddress_ptr obj, NetBufferedStream& s) {
  TucanAddress::_marshalObjRef(obj, s);
}

TucanAddress_ptr TucanAddress_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanAddress::_unmarshalObjRef(s);
}

void TucanAddress_Helper::marshalObjRef(TucanAddress_ptr obj, MemBufferedStream& s) {
  TucanAddress::_marshalObjRef(obj, s);
}

TucanAddress_ptr TucanAddress_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanAddress::_unmarshalObjRef(s);
}

TucanAddress_ptr
TucanAddress::_duplicate(TucanAddress_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanAddress_ptr
TucanAddress::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanAddress_ptr
TucanAddress::_nil()
{
  static _objref_TucanAddress* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanAddress;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanAddress::_PD_repoId = "IDL:TucanAddress:1.0";

_objref_TucanAddress::~_objref_TucanAddress() {}

_objref_TucanAddress::_objref_TucanAddress(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   
   omniObjRef(TucanAddress::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanAddress::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanAddress::_PD_repoId) )
    return (TucanAddress_ptr) this;
  
  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cstring_e_cTucanException
class _0RL_cd_812ed87905f9c760_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_00000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  virtual void userException(GIOP_C&, const char*);
  
  inline char * result() { return pd_result; }
  
  char * pd_result;
};

void _0RL_cd_812ed87905f9c760_00000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  {
    CORBA::String_member _0RL_str_tmp;
    _0RL_str_tmp <<=  giop_client;
    pd_result = _0RL_str_tmp._ptr;
    _0RL_str_tmp._ptr = 0;
  }
  
}

void _0RL_cd_812ed87905f9c760_00000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_00000000* tcd = (_0RL_cd_812ed87905f9c760_00000000*) cd;
  _impl_TucanAddress* impl = (_impl_TucanAddress*) svnt->_ptrToInterface(TucanAddress::_PD_repoId);
  tcd->pd_result = impl->getAddress();
}

char* _objref_TucanAddress::getAddress()
{
  _0RL_cd_812ed87905f9c760_00000000 _call_desc(_0RL_lcfn_812ed87905f9c760_10000000, "getAddress", 11, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_e_cTucanException
class _0RL_cd_812ed87905f9c760_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_20000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const char* a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void userException(GIOP_C&, const char*);
  
  const char* arg_0;
  
};

CORBA::ULong _0RL_cd_812ed87905f9c760_20000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_0) ? strlen((const char*) arg_0) + 1 : 1;
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_20000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_0)? strlen((const char*) arg_0) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_0),_len);
    else {
      if ((const char*) arg_0 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  
}

void _0RL_cd_812ed87905f9c760_20000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_20000000* tcd = (_0RL_cd_812ed87905f9c760_20000000*) cd;
  _impl_TucanAddress* impl = (_impl_TucanAddress*) svnt->_ptrToInterface(TucanAddress::_PD_repoId);
  impl->setAddress(tcd->arg_0);
}

void _objref_TucanAddress::setAddress(const char* address)
{
  _0RL_cd_812ed87905f9c760_20000000 _call_desc(_0RL_lcfn_812ed87905f9c760_30000000, "setAddress", 11, 0, address);
  
  _invoke(_call_desc);
  
}

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cTucanAddress_e_cTucanException
class _0RL_cd_812ed87905f9c760_40000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_40000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, TucanAddress_ptr a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  virtual void userException(GIOP_C&, const char*);
  
  inline CORBA::Boolean result() { return pd_result; }
  TucanAddress_ptr arg_0;
  CORBA::Boolean pd_result;
};

CORBA::ULong _0RL_cd_812ed87905f9c760_40000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = TucanAddress_Helper::NP_alignedSize(arg_0, msgsize);
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_40000000::marshalArguments(GIOP_C& giop_client)
{
  TucanAddress_Helper::marshalObjRef(arg_0,giop_client);
  
}

void _0RL_cd_812ed87905f9c760_40000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result <<= giop_client;
  
}

void _0RL_cd_812ed87905f9c760_40000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_50000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_40000000* tcd = (_0RL_cd_812ed87905f9c760_40000000*) cd;
  _impl_TucanAddress* impl = (_impl_TucanAddress*) svnt->_ptrToInterface(TucanAddress::_PD_repoId);
  tcd->pd_result = impl->equals(tcd->arg_0);
}

CORBA::Boolean _objref_TucanAddress::equals(TucanAddress_ptr address)
{
  _0RL_cd_812ed87905f9c760_40000000 _call_desc(_0RL_lcfn_812ed87905f9c760_50000000, "equals", 7, 0, address);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  void_e_cTucanException
class _0RL_cd_812ed87905f9c760_60000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_60000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void userException(GIOP_C&, const char*);
  
};

void _0RL_cd_812ed87905f9c760_60000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_70000000(omniCallDescriptor* cd, omniServant* svnt)
{
  
  _impl_TucanAddress* impl = (_impl_TucanAddress*) svnt->_ptrToInterface(TucanAddress::_PD_repoId);
  impl->destroy();
}

void _objref_TucanAddress::destroy()
{
  _0RL_cd_812ed87905f9c760_60000000 _call_desc(_0RL_lcfn_812ed87905f9c760_70000000, "destroy", 8, 0);
  
  _invoke(_call_desc);
  
}

_pof_TucanAddress::~_pof_TucanAddress() {}

omniObjRef*
_pof_TucanAddress::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanAddress(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanAddress::is_a(const char* id) const
{
  if( !strcmp(id, TucanAddress::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanAddress _the_pof_TucanAddress;

_impl_TucanAddress::~_impl_TucanAddress() {}

CORBA::Boolean
_impl_TucanAddress::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "getAddress") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    CORBA::String_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getAddress();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      msgsize += ((const char*) result) ? strlen((const char*) result) + 1 : 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      {
        CORBA::ULong _len = (((const char*) result)? strlen((const char*) result) + 1 : 1);
        
        _len >>= giop_s;
        if (_len > 1)
          giop_s.put_char_array((const CORBA::Char *)((const char*)result),_len);
        else {
          if ((const char*) result == 0 && omniORB::traceLevel > 1)
            _CORBA_null_string_ptr(0);
          CORBA::Char('\0') >>= giop_s;
        }
      }
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setAddress") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::String_var arg_address;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_address = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->setAddress(arg_address.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "equals") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    TucanAddress_var arg_address;
    
    arg_address = TucanAddress_Helper::unmarshalObjRef(giop_s);
    
    giop_s.RequestReceived();
    CORBA::Boolean result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->equals(arg_address.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize += 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "destroy") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->destroy();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  return 0;
}

void*
_impl_TucanAddress::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanAddress::_PD_repoId) )
    return (_impl_TucanAddress*) this;
  
  return 0;
}

const char*
_impl_TucanAddress::_mostDerivedRepoId()
{
  return TucanAddress::_PD_repoId;
}

TucanAddressFactory_ptr TucanAddressFactory_Helper::_nil() {
  return TucanAddressFactory::_nil();
}

CORBA::Boolean TucanAddressFactory_Helper::is_nil(TucanAddressFactory_ptr p) {
  return CORBA::is_nil(p);

}

void TucanAddressFactory_Helper::release(TucanAddressFactory_ptr p) {
  CORBA::release(p);
}

void TucanAddressFactory_Helper::duplicate(TucanAddressFactory_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanAddressFactory_Helper::NP_alignedSize(TucanAddressFactory_ptr obj, size_t offset) {
  return TucanAddressFactory::_alignedSize(obj, offset);
}

void TucanAddressFactory_Helper::marshalObjRef(TucanAddressFactory_ptr obj, NetBufferedStream& s) {
  TucanAddressFactory::_marshalObjRef(obj, s);
}

TucanAddressFactory_ptr TucanAddressFactory_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanAddressFactory::_unmarshalObjRef(s);
}

void TucanAddressFactory_Helper::marshalObjRef(TucanAddressFactory_ptr obj, MemBufferedStream& s) {
  TucanAddressFactory::_marshalObjRef(obj, s);
}

TucanAddressFactory_ptr TucanAddressFactory_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanAddressFactory::_unmarshalObjRef(s);
}

TucanAddressFactory_ptr
TucanAddressFactory::_duplicate(TucanAddressFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanAddressFactory_ptr
TucanAddressFactory::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanAddressFactory_ptr
TucanAddressFactory::_nil()
{
  static _objref_TucanAddressFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanAddressFactory;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanAddressFactory::_PD_repoId = "IDL:TucanAddressFactory:1.0";

_objref_TucanAddressFactory::~_objref_TucanAddressFactory() {}

_objref_TucanAddressFactory::_objref_TucanAddressFactory(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   
   omniObjRef(TucanAddressFactory::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanAddressFactory::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanAddressFactory::_PD_repoId) )
    return (TucanAddressFactory_ptr) this;
  
  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cTucanAddress_e_cTucanException
class _0RL_cd_812ed87905f9c760_80000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_80000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  virtual void userException(GIOP_C&, const char*);
  
  inline TucanAddress_ptr result() { return pd_result; }
  
  TucanAddress_ptr pd_result;
};

void _0RL_cd_812ed87905f9c760_80000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = TucanAddress_Helper::unmarshalObjRef(giop_client);
  
}

void _0RL_cd_812ed87905f9c760_80000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_90000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_80000000* tcd = (_0RL_cd_812ed87905f9c760_80000000*) cd;
  _impl_TucanAddressFactory* impl = (_impl_TucanAddressFactory*) svnt->_ptrToInterface(TucanAddressFactory::_PD_repoId);
  tcd->pd_result = impl->create();
}

TucanAddress_ptr _objref_TucanAddressFactory::create()
{
  _0RL_cd_812ed87905f9c760_80000000 _call_desc(_0RL_lcfn_812ed87905f9c760_90000000, "create", 7, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

_pof_TucanAddressFactory::~_pof_TucanAddressFactory() {}

omniObjRef*
_pof_TucanAddressFactory::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanAddressFactory(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanAddressFactory::is_a(const char* id) const
{
  if( !strcmp(id, TucanAddressFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanAddressFactory _the_pof_TucanAddressFactory;

_impl_TucanAddressFactory::~_impl_TucanAddressFactory() {}

CORBA::Boolean
_impl_TucanAddressFactory::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "create") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    TucanAddress_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->create();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = TucanAddress_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      TucanAddress_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  return 0;
}

void*
_impl_TucanAddressFactory::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanAddressFactory::_PD_repoId) )
    return (_impl_TucanAddressFactory*) this;
  
  return 0;
}

const char*
_impl_TucanAddressFactory::_mostDerivedRepoId()
{
  return TucanAddressFactory::_PD_repoId;
}

TucanAuth_ptr TucanAuth_Helper::_nil() {
  return TucanAuth::_nil();
}

CORBA::Boolean TucanAuth_Helper::is_nil(TucanAuth_ptr p) {
  return CORBA::is_nil(p);

}

void TucanAuth_Helper::release(TucanAuth_ptr p) {
  CORBA::release(p);
}

void TucanAuth_Helper::duplicate(TucanAuth_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanAuth_Helper::NP_alignedSize(TucanAuth_ptr obj, size_t offset) {
  return TucanAuth::_alignedSize(obj, offset);
}

void TucanAuth_Helper::marshalObjRef(TucanAuth_ptr obj, NetBufferedStream& s) {
  TucanAuth::_marshalObjRef(obj, s);
}

TucanAuth_ptr TucanAuth_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanAuth::_unmarshalObjRef(s);
}

void TucanAuth_Helper::marshalObjRef(TucanAuth_ptr obj, MemBufferedStream& s) {
  TucanAuth::_marshalObjRef(obj, s);
}

TucanAuth_ptr TucanAuth_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanAuth::_unmarshalObjRef(s);
}

TucanAuth_ptr
TucanAuth::_duplicate(TucanAuth_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanAuth_ptr
TucanAuth::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanAuth_ptr
TucanAuth::_nil()
{
  static _objref_TucanAuth* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanAuth;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanAuth::_PD_repoId = "IDL:TucanAuth:1.0";

_objref_TucanAuth::~_objref_TucanAuth() {}

_objref_TucanAuth::_objref_TucanAuth(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   
   omniObjRef(TucanAuth::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanAuth::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanAuth::_PD_repoId) )
    return (TucanAuth_ptr) this;
  
  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cstring_e_cTucanAuthException_e_cTucanException
class _0RL_cd_812ed87905f9c760_a0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_a0000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  virtual void userException(GIOP_C&, const char*);
  
  inline char * result() { return pd_result; }
  
  char * pd_result;
};

void _0RL_cd_812ed87905f9c760_a0000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  {
    CORBA::String_member _0RL_str_tmp;
    _0RL_str_tmp <<=  giop_client;
    pd_result = _0RL_str_tmp._ptr;
    _0RL_str_tmp._ptr = 0;
  }
  
}

void _0RL_cd_812ed87905f9c760_a0000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else if( strcmp(repoId, TucanAuthException::_PD_repoId) == 0 ) {
    TucanAuthException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_b0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_a0000000* tcd = (_0RL_cd_812ed87905f9c760_a0000000*) cd;
  _impl_TucanAuth* impl = (_impl_TucanAuth*) svnt->_ptrToInterface(TucanAuth::_PD_repoId);
  tcd->pd_result = impl->getUid();
}

char* _objref_TucanAuth::getUid()
{
  _0RL_cd_812ed87905f9c760_a0000000 _call_desc(_0RL_lcfn_812ed87905f9c760_b0000000, "getUid", 7, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_e_cTucanAuthException_e_cTucanException
class _0RL_cd_812ed87905f9c760_c0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_c0000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const char* a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void userException(GIOP_C&, const char*);
  
  const char* arg_0;
  
};

CORBA::ULong _0RL_cd_812ed87905f9c760_c0000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_0) ? strlen((const char*) arg_0) + 1 : 1;
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_c0000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_0)? strlen((const char*) arg_0) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_0),_len);
    else {
      if ((const char*) arg_0 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  
}

void _0RL_cd_812ed87905f9c760_c0000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else if( strcmp(repoId, TucanAuthException::_PD_repoId) == 0 ) {
    TucanAuthException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_d0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_c0000000* tcd = (_0RL_cd_812ed87905f9c760_c0000000*) cd;
  _impl_TucanAuth* impl = (_impl_TucanAuth*) svnt->_ptrToInterface(TucanAuth::_PD_repoId);
  impl->setUid(tcd->arg_0);
}

void _objref_TucanAuth::setUid(const char* uid)
{
  _0RL_cd_812ed87905f9c760_c0000000 _call_desc(_0RL_lcfn_812ed87905f9c760_d0000000, "setUid", 7, 0, uid);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_e0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_a0000000* tcd = (_0RL_cd_812ed87905f9c760_a0000000*) cd;
  _impl_TucanAuth* impl = (_impl_TucanAuth*) svnt->_ptrToInterface(TucanAuth::_PD_repoId);
  tcd->pd_result = impl->getUserName();
}

char* _objref_TucanAuth::getUserName()
{
  _0RL_cd_812ed87905f9c760_a0000000 _call_desc(_0RL_lcfn_812ed87905f9c760_e0000000, "getUserName", 12, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_f0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_c0000000* tcd = (_0RL_cd_812ed87905f9c760_c0000000*) cd;
  _impl_TucanAuth* impl = (_impl_TucanAuth*) svnt->_ptrToInterface(TucanAuth::_PD_repoId);
  impl->setUserName(tcd->arg_0);
}

void _objref_TucanAuth::setUserName(const char* name)
{
  _0RL_cd_812ed87905f9c760_c0000000 _call_desc(_0RL_lcfn_812ed87905f9c760_f0000000, "setUserName", 12, 0, name);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_01000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_a0000000* tcd = (_0RL_cd_812ed87905f9c760_a0000000*) cd;
  _impl_TucanAuth* impl = (_impl_TucanAuth*) svnt->_ptrToInterface(TucanAuth::_PD_repoId);
  tcd->pd_result = impl->getPassword();
}

char* _objref_TucanAuth::getPassword()
{
  _0RL_cd_812ed87905f9c760_a0000000 _call_desc(_0RL_lcfn_812ed87905f9c760_01000000, "getPassword", 12, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_11000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_c0000000* tcd = (_0RL_cd_812ed87905f9c760_c0000000*) cd;
  _impl_TucanAuth* impl = (_impl_TucanAuth*) svnt->_ptrToInterface(TucanAuth::_PD_repoId);
  impl->setPassword(tcd->arg_0);
}

void _objref_TucanAuth::setPassword(const char* password)
{
  _0RL_cd_812ed87905f9c760_c0000000 _call_desc(_0RL_lcfn_812ed87905f9c760_11000000, "setPassword", 12, 0, password);
  
  _invoke(_call_desc);
  
}

// Proxy call descriptor class. Mangled signature:
//  _clong_e_cTucanAuthException_e_cTucanException
class _0RL_cd_812ed87905f9c760_21000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_21000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  virtual void userException(GIOP_C&, const char*);
  
  inline CORBA::Long result() { return pd_result; }
  
  CORBA::Long pd_result;
};

void _0RL_cd_812ed87905f9c760_21000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result <<= giop_client;
  
}

void _0RL_cd_812ed87905f9c760_21000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else if( strcmp(repoId, TucanAuthException::_PD_repoId) == 0 ) {
    TucanAuthException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_31000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_21000000* tcd = (_0RL_cd_812ed87905f9c760_21000000*) cd;
  _impl_TucanAuth* impl = (_impl_TucanAuth*) svnt->_ptrToInterface(TucanAuth::_PD_repoId);
  tcd->pd_result = impl->getPinNumber();
}

CORBA::Long _objref_TucanAuth::getPinNumber()
{
  _0RL_cd_812ed87905f9c760_21000000 _call_desc(_0RL_lcfn_812ed87905f9c760_31000000, "getPinNumber", 13, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  void_i_clong_e_cTucanAuthException_e_cTucanException
class _0RL_cd_812ed87905f9c760_41000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_41000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, CORBA::Long a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void userException(GIOP_C&, const char*);
  
  CORBA::Long arg_0;
  
};

CORBA::ULong _0RL_cd_812ed87905f9c760_41000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_41000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  
}

void _0RL_cd_812ed87905f9c760_41000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else if( strcmp(repoId, TucanAuthException::_PD_repoId) == 0 ) {
    TucanAuthException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_51000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_41000000* tcd = (_0RL_cd_812ed87905f9c760_41000000*) cd;
  _impl_TucanAuth* impl = (_impl_TucanAuth*) svnt->_ptrToInterface(TucanAuth::_PD_repoId);
  impl->setPinNumber(tcd->arg_0);
}

void _objref_TucanAuth::setPinNumber(CORBA::Long pin)
{
  _0RL_cd_812ed87905f9c760_41000000 _call_desc(_0RL_lcfn_812ed87905f9c760_51000000, "setPinNumber", 13, 0, pin);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_61000000(omniCallDescriptor* cd, omniServant* svnt)
{
  
  _impl_TucanAuth* impl = (_impl_TucanAuth*) svnt->_ptrToInterface(TucanAuth::_PD_repoId);
  impl->destroy();
}

void _objref_TucanAuth::destroy()
{
  _0RL_cd_812ed87905f9c760_60000000 _call_desc(_0RL_lcfn_812ed87905f9c760_61000000, "destroy", 8, 0);
  
  _invoke(_call_desc);
  
}

_pof_TucanAuth::~_pof_TucanAuth() {}

omniObjRef*
_pof_TucanAuth::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanAuth(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanAuth::is_a(const char* id) const
{
  if( !strcmp(id, TucanAuth::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanAuth _the_pof_TucanAuth;

_impl_TucanAuth::~_impl_TucanAuth() {}

CORBA::Boolean
_impl_TucanAuth::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "getUid") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanAuthException:1.0",
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 2);
    
    giop_s.RequestReceived();
    CORBA::String_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getUid();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
    catch(TucanAuthException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      msgsize += ((const char*) result) ? strlen((const char*) result) + 1 : 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      {
        CORBA::ULong _len = (((const char*) result)? strlen((const char*) result) + 1 : 1);
        
        _len >>= giop_s;
        if (_len > 1)
          giop_s.put_char_array((const CORBA::Char *)((const char*)result),_len);
        else {
          if ((const char*) result == 0 && omniORB::traceLevel > 1)
            _CORBA_null_string_ptr(0);
          CORBA::Char('\0') >>= giop_s;
        }
      }
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setUid") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanAuthException:1.0",
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 2);
    
    CORBA::String_var arg_uid;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_uid = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->setUid(arg_uid.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
    catch(TucanAuthException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getUserName") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanAuthException:1.0",
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 2);
    
    giop_s.RequestReceived();
    CORBA::String_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getUserName();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
    catch(TucanAuthException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      msgsize += ((const char*) result) ? strlen((const char*) result) + 1 : 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      {
        CORBA::ULong _len = (((const char*) result)? strlen((const char*) result) + 1 : 1);
        
        _len >>= giop_s;
        if (_len > 1)
          giop_s.put_char_array((const CORBA::Char *)((const char*)result),_len);
        else {
          if ((const char*) result == 0 && omniORB::traceLevel > 1)
            _CORBA_null_string_ptr(0);
          CORBA::Char('\0') >>= giop_s;
        }
      }
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setUserName") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanAuthException:1.0",
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 2);
    
    CORBA::String_var arg_name;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_name = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->setUserName(arg_name.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
    catch(TucanAuthException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getPassword") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanAuthException:1.0",
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 2);
    
    giop_s.RequestReceived();
    CORBA::String_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getPassword();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
    catch(TucanAuthException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      msgsize += ((const char*) result) ? strlen((const char*) result) + 1 : 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      {
        CORBA::ULong _len = (((const char*) result)? strlen((const char*) result) + 1 : 1);
        
        _len >>= giop_s;
        if (_len > 1)
          giop_s.put_char_array((const CORBA::Char *)((const char*)result),_len);
        else {
          if ((const char*) result == 0 && omniORB::traceLevel > 1)
            _CORBA_null_string_ptr(0);
          CORBA::Char('\0') >>= giop_s;
        }
      }
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setPassword") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanAuthException:1.0",
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 2);
    
    CORBA::String_var arg_password;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_password = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->setPassword(arg_password.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
    catch(TucanAuthException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getPinNumber") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanAuthException:1.0",
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 2);
    
    giop_s.RequestReceived();
    CORBA::Long result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getPinNumber();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
    catch(TucanAuthException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setPinNumber") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanAuthException:1.0",
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 2);
    
    CORBA::Long arg_pin;
    
    arg_pin <<= giop_s;
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->setPinNumber(arg_pin);
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
    catch(TucanAuthException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "destroy") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->destroy();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  return 0;
}

void*
_impl_TucanAuth::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanAuth::_PD_repoId) )
    return (_impl_TucanAuth*) this;
  
  return 0;
}

const char*
_impl_TucanAuth::_mostDerivedRepoId()
{
  return TucanAuth::_PD_repoId;
}

TucanAuthFactory_ptr TucanAuthFactory_Helper::_nil() {
  return TucanAuthFactory::_nil();
}

CORBA::Boolean TucanAuthFactory_Helper::is_nil(TucanAuthFactory_ptr p) {
  return CORBA::is_nil(p);

}

void TucanAuthFactory_Helper::release(TucanAuthFactory_ptr p) {
  CORBA::release(p);
}

void TucanAuthFactory_Helper::duplicate(TucanAuthFactory_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanAuthFactory_Helper::NP_alignedSize(TucanAuthFactory_ptr obj, size_t offset) {
  return TucanAuthFactory::_alignedSize(obj, offset);
}

void TucanAuthFactory_Helper::marshalObjRef(TucanAuthFactory_ptr obj, NetBufferedStream& s) {
  TucanAuthFactory::_marshalObjRef(obj, s);
}

TucanAuthFactory_ptr TucanAuthFactory_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanAuthFactory::_unmarshalObjRef(s);
}

void TucanAuthFactory_Helper::marshalObjRef(TucanAuthFactory_ptr obj, MemBufferedStream& s) {
  TucanAuthFactory::_marshalObjRef(obj, s);
}

TucanAuthFactory_ptr TucanAuthFactory_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanAuthFactory::_unmarshalObjRef(s);
}

TucanAuthFactory_ptr
TucanAuthFactory::_duplicate(TucanAuthFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanAuthFactory_ptr
TucanAuthFactory::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanAuthFactory_ptr
TucanAuthFactory::_nil()
{
  static _objref_TucanAuthFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanAuthFactory;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanAuthFactory::_PD_repoId = "IDL:TucanAuthFactory:1.0";

_objref_TucanAuthFactory::~_objref_TucanAuthFactory() {}

_objref_TucanAuthFactory::_objref_TucanAuthFactory(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   
   omniObjRef(TucanAuthFactory::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanAuthFactory::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanAuthFactory::_PD_repoId) )
    return (TucanAuthFactory_ptr) this;
  
  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cTucanAuth_e_cTucanException
class _0RL_cd_812ed87905f9c760_71000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_71000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  virtual void userException(GIOP_C&, const char*);
  
  inline TucanAuth_ptr result() { return pd_result; }
  
  TucanAuth_ptr pd_result;
};

void _0RL_cd_812ed87905f9c760_71000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = TucanAuth_Helper::unmarshalObjRef(giop_client);
  
}

void _0RL_cd_812ed87905f9c760_71000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_81000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_71000000* tcd = (_0RL_cd_812ed87905f9c760_71000000*) cd;
  _impl_TucanAuthFactory* impl = (_impl_TucanAuthFactory*) svnt->_ptrToInterface(TucanAuthFactory::_PD_repoId);
  tcd->pd_result = impl->create();
}

TucanAuth_ptr _objref_TucanAuthFactory::create()
{
  _0RL_cd_812ed87905f9c760_71000000 _call_desc(_0RL_lcfn_812ed87905f9c760_81000000, "create", 7, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

_pof_TucanAuthFactory::~_pof_TucanAuthFactory() {}

omniObjRef*
_pof_TucanAuthFactory::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanAuthFactory(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanAuthFactory::is_a(const char* id) const
{
  if( !strcmp(id, TucanAuthFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanAuthFactory _the_pof_TucanAuthFactory;

_impl_TucanAuthFactory::~_impl_TucanAuthFactory() {}

CORBA::Boolean
_impl_TucanAuthFactory::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "create") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    TucanAuth_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->create();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = TucanAuth_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      TucanAuth_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  return 0;
}

void*
_impl_TucanAuthFactory::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanAuthFactory::_PD_repoId) )
    return (_impl_TucanAuthFactory*) this;
  
  return 0;
}

const char*
_impl_TucanAuthFactory::_mostDerivedRepoId()
{
  return TucanAuthFactory::_PD_repoId;
}

size_t
TucanData::TucanPart::_NP_alignedSize(size_t _initialoffset) const
{
  CORBA::ULong _msgsize = _initialoffset;
  _msgsize = type._NP_alignedSize(_msgsize);

  _msgsize = data._NP_alignedSize(_msgsize);

  _msgsize = encoding._NP_alignedSize(_msgsize);

  _msgsize = header._NP_alignedSize(_msgsize);

  return _msgsize;
}

void
TucanData::TucanPart::operator>>= (NetBufferedStream &_n) const
{
  type >>= _n;
  data >>= _n;
  encoding >>= _n;
  header >>= _n;
  
}

void
TucanData::TucanPart::operator<<= (NetBufferedStream &_n)
{
  type <<= _n;
  data <<= _n;
  encoding <<= _n;
  header <<= _n;
  
}

void
TucanData::TucanPart::operator>>= (MemBufferedStream &_n) const
{
  type >>= _n;
  data >>= _n;
  encoding >>= _n;
  header >>= _n;
  
}

void
TucanData::TucanPart::operator<<= (MemBufferedStream &_n)
{
  type <<= _n;
  data <<= _n;
  encoding <<= _n;
  header <<= _n;
  
}

TucanData_ptr TucanData_Helper::_nil() {
  return TucanData::_nil();
}

CORBA::Boolean TucanData_Helper::is_nil(TucanData_ptr p) {
  return CORBA::is_nil(p);

}

void TucanData_Helper::release(TucanData_ptr p) {
  CORBA::release(p);
}

void TucanData_Helper::duplicate(TucanData_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanData_Helper::NP_alignedSize(TucanData_ptr obj, size_t offset) {
  return TucanData::_alignedSize(obj, offset);
}

void TucanData_Helper::marshalObjRef(TucanData_ptr obj, NetBufferedStream& s) {
  TucanData::_marshalObjRef(obj, s);
}

TucanData_ptr TucanData_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanData::_unmarshalObjRef(s);
}

void TucanData_Helper::marshalObjRef(TucanData_ptr obj, MemBufferedStream& s) {
  TucanData::_marshalObjRef(obj, s);
}

TucanData_ptr TucanData_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanData::_unmarshalObjRef(s);
}

TucanData_ptr
TucanData::_duplicate(TucanData_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanData_ptr
TucanData::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanData_ptr
TucanData::_nil()
{
  static _objref_TucanData* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanData;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanData::_PD_repoId = "IDL:TucanData:1.0";

_objref_TucanData::~_objref_TucanData() {}

_objref_TucanData::_objref_TucanData(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   
   omniObjRef(TucanData::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanData::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanData::_PD_repoId) )
    return (TucanData_ptr) this;
  
  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_91000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_00000000* tcd = (_0RL_cd_812ed87905f9c760_00000000*) cd;
  _impl_TucanData* impl = (_impl_TucanData*) svnt->_ptrToInterface(TucanData::_PD_repoId);
  tcd->pd_result = impl->getText();
}

char* _objref_TucanData::getText()
{
  _0RL_cd_812ed87905f9c760_00000000 _call_desc(_0RL_lcfn_812ed87905f9c760_91000000, "getText", 8, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_a1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_20000000* tcd = (_0RL_cd_812ed87905f9c760_20000000*) cd;
  _impl_TucanData* impl = (_impl_TucanData*) svnt->_ptrToInterface(TucanData::_PD_repoId);
  impl->setText(tcd->arg_0);
}

void _objref_TucanData::setText(const char* text)
{
  _0RL_cd_812ed87905f9c760_20000000 _call_desc(_0RL_lcfn_812ed87905f9c760_a1000000, "setText", 8, 0, text);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_b1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_00000000* tcd = (_0RL_cd_812ed87905f9c760_00000000*) cd;
  _impl_TucanData* impl = (_impl_TucanData*) svnt->_ptrToInterface(TucanData::_PD_repoId);
  tcd->pd_result = impl->getXML();
}

char* _objref_TucanData::getXML()
{
  _0RL_cd_812ed87905f9c760_00000000 _call_desc(_0RL_lcfn_812ed87905f9c760_b1000000, "getXML", 7, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_c1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_20000000* tcd = (_0RL_cd_812ed87905f9c760_20000000*) cd;
  _impl_TucanData* impl = (_impl_TucanData*) svnt->_ptrToInterface(TucanData::_PD_repoId);
  impl->setXML(tcd->arg_0);
}

void _objref_TucanData::setXML(const char* xml)
{
  _0RL_cd_812ed87905f9c760_20000000 _call_desc(_0RL_lcfn_812ed87905f9c760_c1000000, "setXML", 7, 0, xml);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_d1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_00000000* tcd = (_0RL_cd_812ed87905f9c760_00000000*) cd;
  _impl_TucanData* impl = (_impl_TucanData*) svnt->_ptrToInterface(TucanData::_PD_repoId);
  tcd->pd_result = impl->getMime();
}

char* _objref_TucanData::getMime()
{
  _0RL_cd_812ed87905f9c760_00000000 _call_desc(_0RL_lcfn_812ed87905f9c760_d1000000, "getMime", 8, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_e1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_20000000* tcd = (_0RL_cd_812ed87905f9c760_20000000*) cd;
  _impl_TucanData* impl = (_impl_TucanData*) svnt->_ptrToInterface(TucanData::_PD_repoId);
  impl->setMime(tcd->arg_0);
}

void _objref_TucanData::setMime(const char* mime)
{
  _0RL_cd_812ed87905f9c760_20000000 _call_desc(_0RL_lcfn_812ed87905f9c760_e1000000, "setMime", 8, 0, mime);
  
  _invoke(_call_desc);
  
}

// Proxy call descriptor class. Mangled signature:
//  _cTucanRawData_e_cTucanException
class _0RL_cd_812ed87905f9c760_f1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_f1000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  virtual void userException(GIOP_C&, const char*);
  
  inline TucanRawData* result() { return pd_result; }
  
  TucanRawData* pd_result;
};

void _0RL_cd_812ed87905f9c760_f1000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = new TucanRawData;
  
  *pd_result <<= giop_client;
  
}

void _0RL_cd_812ed87905f9c760_f1000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_02000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_f1000000* tcd = (_0RL_cd_812ed87905f9c760_f1000000*) cd;
  _impl_TucanData* impl = (_impl_TucanData*) svnt->_ptrToInterface(TucanData::_PD_repoId);
  tcd->pd_result = impl->getData();
}

TucanRawData* _objref_TucanData::getData()
{
  _0RL_cd_812ed87905f9c760_f1000000 _call_desc(_0RL_lcfn_812ed87905f9c760_02000000, "getData", 8, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cTucanRawData_e_cTucanException
class _0RL_cd_812ed87905f9c760_12000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_12000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const TucanRawData& a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void userException(GIOP_C&, const char*);
  
  const TucanRawData& arg_0;
  
};

CORBA::ULong _0RL_cd_812ed87905f9c760_12000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = arg_0._NP_alignedSize(msgsize);
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_12000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  
}

void _0RL_cd_812ed87905f9c760_12000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_22000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_12000000* tcd = (_0RL_cd_812ed87905f9c760_12000000*) cd;
  _impl_TucanData* impl = (_impl_TucanData*) svnt->_ptrToInterface(TucanData::_PD_repoId);
  impl->setData(tcd->arg_0);
}

void _objref_TucanData::setData(const TucanRawData& data)
{
  _0RL_cd_812ed87905f9c760_12000000 _call_desc(_0RL_lcfn_812ed87905f9c760_22000000, "setData", 8, 0, data);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_32000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_00000000* tcd = (_0RL_cd_812ed87905f9c760_00000000*) cd;
  _impl_TucanData* impl = (_impl_TucanData*) svnt->_ptrToInterface(TucanData::_PD_repoId);
  tcd->pd_result = impl->getPath();
}

char* _objref_TucanData::getPath()
{
  _0RL_cd_812ed87905f9c760_00000000 _call_desc(_0RL_lcfn_812ed87905f9c760_32000000, "getPath", 8, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_42000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_20000000* tcd = (_0RL_cd_812ed87905f9c760_20000000*) cd;
  _impl_TucanData* impl = (_impl_TucanData*) svnt->_ptrToInterface(TucanData::_PD_repoId);
  impl->setPath(tcd->arg_0);
}

void _objref_TucanData::setPath(const char* path)
{
  _0RL_cd_812ed87905f9c760_20000000 _call_desc(_0RL_lcfn_812ed87905f9c760_42000000, "setPath", 8, 0, path);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_52000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_00000000* tcd = (_0RL_cd_812ed87905f9c760_00000000*) cd;
  _impl_TucanData* impl = (_impl_TucanData*) svnt->_ptrToInterface(TucanData::_PD_repoId);
  tcd->pd_result = impl->getSize();
}

char* _objref_TucanData::getSize()
{
  _0RL_cd_812ed87905f9c760_00000000 _call_desc(_0RL_lcfn_812ed87905f9c760_52000000, "getSize", 8, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_62000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_20000000* tcd = (_0RL_cd_812ed87905f9c760_20000000*) cd;
  _impl_TucanData* impl = (_impl_TucanData*) svnt->_ptrToInterface(TucanData::_PD_repoId);
  impl->setSize(tcd->arg_0);
}

void _objref_TucanData::setSize(const char* size)
{
  _0RL_cd_812ed87905f9c760_20000000 _call_desc(_0RL_lcfn_812ed87905f9c760_62000000, "setSize", 8, 0, size);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_72000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_00000000* tcd = (_0RL_cd_812ed87905f9c760_00000000*) cd;
  _impl_TucanData* impl = (_impl_TucanData*) svnt->_ptrToInterface(TucanData::_PD_repoId);
  tcd->pd_result = impl->getContentType();
}

char* _objref_TucanData::getContentType()
{
  _0RL_cd_812ed87905f9c760_00000000 _call_desc(_0RL_lcfn_812ed87905f9c760_72000000, "getContentType", 15, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_82000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_20000000* tcd = (_0RL_cd_812ed87905f9c760_20000000*) cd;
  _impl_TucanData* impl = (_impl_TucanData*) svnt->_ptrToInterface(TucanData::_PD_repoId);
  impl->setContentType(tcd->arg_0);
}

void _objref_TucanData::setContentType(const char* type)
{
  _0RL_cd_812ed87905f9c760_20000000 _call_desc(_0RL_lcfn_812ed87905f9c760_82000000, "setContentType", 15, 0, type);
  
  _invoke(_call_desc);
  
}

// Proxy call descriptor class. Mangled signature:
//  _clong_e_cTucanException
class _0RL_cd_812ed87905f9c760_92000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_92000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  virtual void userException(GIOP_C&, const char*);
  
  inline CORBA::Long result() { return pd_result; }
  
  CORBA::Long pd_result;
};

void _0RL_cd_812ed87905f9c760_92000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result <<= giop_client;
  
}

void _0RL_cd_812ed87905f9c760_92000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_a2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_92000000* tcd = (_0RL_cd_812ed87905f9c760_92000000*) cd;
  _impl_TucanData* impl = (_impl_TucanData*) svnt->_ptrToInterface(TucanData::_PD_repoId);
  tcd->pd_result = impl->getPartCount();
}

CORBA::Long _objref_TucanData::getPartCount()
{
  _0RL_cd_812ed87905f9c760_92000000 _call_desc(_0RL_lcfn_812ed87905f9c760_a2000000, "getPartCount", 13, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cTucanStringList_i_cTucanRawData_e_cTucanException
class _0RL_cd_812ed87905f9c760_b2000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_b2000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const char* a_0, const TucanStringList& a_1, const TucanRawData& a_2):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0),
     arg_1(a_1),
     arg_2(a_2) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void userException(GIOP_C&, const char*);
  
  const char* arg_0;
  const TucanStringList& arg_1;
  const TucanRawData& arg_2;
  
};

CORBA::ULong _0RL_cd_812ed87905f9c760_b2000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_0) ? strlen((const char*) arg_0) + 1 : 1;
  
  msgsize = arg_1._NP_alignedSize(msgsize);
  
  msgsize = arg_2._NP_alignedSize(msgsize);
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_b2000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_0)? strlen((const char*) arg_0) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_0),_len);
    else {
      if ((const char*) arg_0 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  arg_1 >>= giop_client;
  arg_2 >>= giop_client;
  
}

void _0RL_cd_812ed87905f9c760_b2000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_c2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_b2000000* tcd = (_0RL_cd_812ed87905f9c760_b2000000*) cd;
  _impl_TucanData* impl = (_impl_TucanData*) svnt->_ptrToInterface(TucanData::_PD_repoId);
  impl->addPart(tcd->arg_0, tcd->arg_1, tcd->arg_2);
}

void _objref_TucanData::addPart(const char* type, const TucanStringList& header, const TucanRawData& data)
{
  _0RL_cd_812ed87905f9c760_b2000000 _call_desc(_0RL_lcfn_812ed87905f9c760_c2000000, "addPart", 8, 0, type, header, data);
  
  _invoke(_call_desc);
  
}

// Proxy call descriptor class. Mangled signature:
//  _cTucanStringList_e_cTucanException
class _0RL_cd_812ed87905f9c760_d2000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_d2000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  virtual void userException(GIOP_C&, const char*);
  
  inline TucanStringList* result() { return pd_result; }
  
  TucanStringList* pd_result;
};

void _0RL_cd_812ed87905f9c760_d2000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = new TucanStringList;
  
  *pd_result <<= giop_client;
  
}

void _0RL_cd_812ed87905f9c760_d2000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_e2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_d2000000* tcd = (_0RL_cd_812ed87905f9c760_d2000000*) cd;
  _impl_TucanData* impl = (_impl_TucanData*) svnt->_ptrToInterface(TucanData::_PD_repoId);
  tcd->pd_result = impl->listParts();
}

TucanStringList* _objref_TucanData::listParts()
{
  _0RL_cd_812ed87905f9c760_d2000000 _call_desc(_0RL_lcfn_812ed87905f9c760_e2000000, "listParts", 10, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cTucanData_mTucanPart_i_clong_e_cTucanException
class _0RL_cd_812ed87905f9c760_f2000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_f2000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, CORBA::Long a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  virtual void userException(GIOP_C&, const char*);
  
  inline TucanData::TucanPart* result() { return pd_result; }
  CORBA::Long arg_0;
  TucanData::TucanPart* pd_result;
};

CORBA::ULong _0RL_cd_812ed87905f9c760_f2000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_f2000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  
}

void _0RL_cd_812ed87905f9c760_f2000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = new TucanData::TucanPart;
  
  *pd_result <<= giop_client;
  
}

void _0RL_cd_812ed87905f9c760_f2000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_03000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_f2000000* tcd = (_0RL_cd_812ed87905f9c760_f2000000*) cd;
  _impl_TucanData* impl = (_impl_TucanData*) svnt->_ptrToInterface(TucanData::_PD_repoId);
  tcd->pd_result = impl->getPart(tcd->arg_0);
}

TucanData::TucanPart* _objref_TucanData::getPart(CORBA::Long num)
{
  _0RL_cd_812ed87905f9c760_f2000000 _call_desc(_0RL_lcfn_812ed87905f9c760_03000000, "getPart", 8, 0, num);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_13000000(omniCallDescriptor* cd, omniServant* svnt)
{
  
  _impl_TucanData* impl = (_impl_TucanData*) svnt->_ptrToInterface(TucanData::_PD_repoId);
  impl->destroy();
}

void _objref_TucanData::destroy()
{
  _0RL_cd_812ed87905f9c760_60000000 _call_desc(_0RL_lcfn_812ed87905f9c760_13000000, "destroy", 8, 0);
  
  _invoke(_call_desc);
  
}

_pof_TucanData::~_pof_TucanData() {}

omniObjRef*
_pof_TucanData::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanData(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanData::is_a(const char* id) const
{
  if( !strcmp(id, TucanData::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanData _the_pof_TucanData;

_impl_TucanData::~_impl_TucanData() {}

CORBA::Boolean
_impl_TucanData::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "getText") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    CORBA::String_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getText();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      msgsize += ((const char*) result) ? strlen((const char*) result) + 1 : 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      {
        CORBA::ULong _len = (((const char*) result)? strlen((const char*) result) + 1 : 1);
        
        _len >>= giop_s;
        if (_len > 1)
          giop_s.put_char_array((const CORBA::Char *)((const char*)result),_len);
        else {
          if ((const char*) result == 0 && omniORB::traceLevel > 1)
            _CORBA_null_string_ptr(0);
          CORBA::Char('\0') >>= giop_s;
        }
      }
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setText") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::String_var arg_text;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_text = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->setText(arg_text.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getXML") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    CORBA::String_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getXML();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      msgsize += ((const char*) result) ? strlen((const char*) result) + 1 : 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      {
        CORBA::ULong _len = (((const char*) result)? strlen((const char*) result) + 1 : 1);
        
        _len >>= giop_s;
        if (_len > 1)
          giop_s.put_char_array((const CORBA::Char *)((const char*)result),_len);
        else {
          if ((const char*) result == 0 && omniORB::traceLevel > 1)
            _CORBA_null_string_ptr(0);
          CORBA::Char('\0') >>= giop_s;
        }
      }
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setXML") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::String_var arg_xml;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_xml = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->setXML(arg_xml.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getMime") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    CORBA::String_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getMime();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      msgsize += ((const char*) result) ? strlen((const char*) result) + 1 : 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      {
        CORBA::ULong _len = (((const char*) result)? strlen((const char*) result) + 1 : 1);
        
        _len >>= giop_s;
        if (_len > 1)
          giop_s.put_char_array((const CORBA::Char *)((const char*)result),_len);
        else {
          if ((const char*) result == 0 && omniORB::traceLevel > 1)
            _CORBA_null_string_ptr(0);
          CORBA::Char('\0') >>= giop_s;
        }
      }
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setMime") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::String_var arg_mime;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_mime = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->setMime(arg_mime.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getData") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    TucanRawData_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getData();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      *(result.operator->()) >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setData") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    TucanRawData arg_data;
    
    arg_data <<= giop_s;
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->setData(arg_data);
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getPath") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    CORBA::String_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getPath();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      msgsize += ((const char*) result) ? strlen((const char*) result) + 1 : 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      {
        CORBA::ULong _len = (((const char*) result)? strlen((const char*) result) + 1 : 1);
        
        _len >>= giop_s;
        if (_len > 1)
          giop_s.put_char_array((const CORBA::Char *)((const char*)result),_len);
        else {
          if ((const char*) result == 0 && omniORB::traceLevel > 1)
            _CORBA_null_string_ptr(0);
          CORBA::Char('\0') >>= giop_s;
        }
      }
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setPath") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::String_var arg_path;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_path = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->setPath(arg_path.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getSize") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    CORBA::String_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getSize();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      msgsize += ((const char*) result) ? strlen((const char*) result) + 1 : 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      {
        CORBA::ULong _len = (((const char*) result)? strlen((const char*) result) + 1 : 1);
        
        _len >>= giop_s;
        if (_len > 1)
          giop_s.put_char_array((const CORBA::Char *)((const char*)result),_len);
        else {
          if ((const char*) result == 0 && omniORB::traceLevel > 1)
            _CORBA_null_string_ptr(0);
          CORBA::Char('\0') >>= giop_s;
        }
      }
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setSize") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::String_var arg_size;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_size = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->setSize(arg_size.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getContentType") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    CORBA::String_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getContentType();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      msgsize += ((const char*) result) ? strlen((const char*) result) + 1 : 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      {
        CORBA::ULong _len = (((const char*) result)? strlen((const char*) result) + 1 : 1);
        
        _len >>= giop_s;
        if (_len > 1)
          giop_s.put_char_array((const CORBA::Char *)((const char*)result),_len);
        else {
          if ((const char*) result == 0 && omniORB::traceLevel > 1)
            _CORBA_null_string_ptr(0);
          CORBA::Char('\0') >>= giop_s;
        }
      }
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setContentType") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::String_var arg_type;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_type = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->setContentType(arg_type.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getPartCount") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    CORBA::Long result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getPartCount();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "addPart") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::String_var arg_type;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_type = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    TucanStringList arg_header;
    
    arg_header <<= giop_s;
    TucanRawData arg_data;
    
    arg_data <<= giop_s;
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->addPart(arg_type.in(), arg_header, arg_data);
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "listParts") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    TucanStringList_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->listParts();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      *(result.operator->()) >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getPart") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::Long arg_num;
    
    arg_num <<= giop_s;
    
    giop_s.RequestReceived();
    TucanData::TucanPart_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getPart(arg_num);
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      *(result.operator->()) >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "destroy") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->destroy();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  return 0;
}

void*
_impl_TucanData::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanData::_PD_repoId) )
    return (_impl_TucanData*) this;
  
  return 0;
}

const char*
_impl_TucanData::_mostDerivedRepoId()
{
  return TucanData::_PD_repoId;
}

TucanDataFactory_ptr TucanDataFactory_Helper::_nil() {
  return TucanDataFactory::_nil();
}

CORBA::Boolean TucanDataFactory_Helper::is_nil(TucanDataFactory_ptr p) {
  return CORBA::is_nil(p);

}

void TucanDataFactory_Helper::release(TucanDataFactory_ptr p) {
  CORBA::release(p);
}

void TucanDataFactory_Helper::duplicate(TucanDataFactory_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanDataFactory_Helper::NP_alignedSize(TucanDataFactory_ptr obj, size_t offset) {
  return TucanDataFactory::_alignedSize(obj, offset);
}

void TucanDataFactory_Helper::marshalObjRef(TucanDataFactory_ptr obj, NetBufferedStream& s) {
  TucanDataFactory::_marshalObjRef(obj, s);
}

TucanDataFactory_ptr TucanDataFactory_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanDataFactory::_unmarshalObjRef(s);
}

void TucanDataFactory_Helper::marshalObjRef(TucanDataFactory_ptr obj, MemBufferedStream& s) {
  TucanDataFactory::_marshalObjRef(obj, s);
}

TucanDataFactory_ptr TucanDataFactory_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanDataFactory::_unmarshalObjRef(s);
}

TucanDataFactory_ptr
TucanDataFactory::_duplicate(TucanDataFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanDataFactory_ptr
TucanDataFactory::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanDataFactory_ptr
TucanDataFactory::_nil()
{
  static _objref_TucanDataFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanDataFactory;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanDataFactory::_PD_repoId = "IDL:TucanDataFactory:1.0";

_objref_TucanDataFactory::~_objref_TucanDataFactory() {}

_objref_TucanDataFactory::_objref_TucanDataFactory(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   
   omniObjRef(TucanDataFactory::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanDataFactory::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanDataFactory::_PD_repoId) )
    return (TucanDataFactory_ptr) this;
  
  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cTucanData_e_cTucanException
class _0RL_cd_812ed87905f9c760_23000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_23000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  virtual void userException(GIOP_C&, const char*);
  
  inline TucanData_ptr result() { return pd_result; }
  
  TucanData_ptr pd_result;
};

void _0RL_cd_812ed87905f9c760_23000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = TucanData_Helper::unmarshalObjRef(giop_client);
  
}

void _0RL_cd_812ed87905f9c760_23000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_33000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_23000000* tcd = (_0RL_cd_812ed87905f9c760_23000000*) cd;
  _impl_TucanDataFactory* impl = (_impl_TucanDataFactory*) svnt->_ptrToInterface(TucanDataFactory::_PD_repoId);
  tcd->pd_result = impl->create();
}

TucanData_ptr _objref_TucanDataFactory::create()
{
  _0RL_cd_812ed87905f9c760_23000000 _call_desc(_0RL_lcfn_812ed87905f9c760_33000000, "create", 7, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

_pof_TucanDataFactory::~_pof_TucanDataFactory() {}

omniObjRef*
_pof_TucanDataFactory::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanDataFactory(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanDataFactory::is_a(const char* id) const
{
  if( !strcmp(id, TucanDataFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanDataFactory _the_pof_TucanDataFactory;

_impl_TucanDataFactory::~_impl_TucanDataFactory() {}

CORBA::Boolean
_impl_TucanDataFactory::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "create") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    TucanData_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->create();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = TucanData_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      TucanData_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  return 0;
}

void*
_impl_TucanDataFactory::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanDataFactory::_PD_repoId) )
    return (_impl_TucanDataFactory*) this;
  
  return 0;
}

const char*
_impl_TucanDataFactory::_mostDerivedRepoId()
{
  return TucanDataFactory::_PD_repoId;
}

TucanFolder_ptr TucanFolder_Helper::_nil() {
  return TucanFolder::_nil();
}

CORBA::Boolean TucanFolder_Helper::is_nil(TucanFolder_ptr p) {
  return CORBA::is_nil(p);

}

void TucanFolder_Helper::release(TucanFolder_ptr p) {
  CORBA::release(p);
}

void TucanFolder_Helper::duplicate(TucanFolder_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanFolder_Helper::NP_alignedSize(TucanFolder_ptr obj, size_t offset) {
  return TucanFolder::_alignedSize(obj, offset);
}

void TucanFolder_Helper::marshalObjRef(TucanFolder_ptr obj, NetBufferedStream& s) {
  TucanFolder::_marshalObjRef(obj, s);
}

TucanFolder_ptr TucanFolder_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanFolder::_unmarshalObjRef(s);
}

void TucanFolder_Helper::marshalObjRef(TucanFolder_ptr obj, MemBufferedStream& s) {
  TucanFolder::_marshalObjRef(obj, s);
}

TucanFolder_ptr TucanFolder_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanFolder::_unmarshalObjRef(s);
}

TucanFolder_ptr
TucanFolder::_duplicate(TucanFolder_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanFolder_ptr
TucanFolder::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanFolder_ptr
TucanFolder::_nil()
{
  static _objref_TucanFolder* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanFolder;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanFolder::_PD_repoId = "IDL:TucanFolder:1.0";

_objref_TucanFolder::~_objref_TucanFolder() {}

_objref_TucanFolder::_objref_TucanFolder(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   
   omniObjRef(TucanFolder::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanFolder::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanFolder::_PD_repoId) )
    return (TucanFolder_ptr) this;
  
  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cboolean_e_cTucanException
class _0RL_cd_812ed87905f9c760_43000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_43000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  virtual void userException(GIOP_C&, const char*);
  
  inline CORBA::Boolean result() { return pd_result; }
  
  CORBA::Boolean pd_result;
};

void _0RL_cd_812ed87905f9c760_43000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result <<= giop_client;
  
}

void _0RL_cd_812ed87905f9c760_43000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_53000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_43000000* tcd = (_0RL_cd_812ed87905f9c760_43000000*) cd;
  _impl_TucanFolder* impl = (_impl_TucanFolder*) svnt->_ptrToInterface(TucanFolder::_PD_repoId);
  tcd->pd_result = impl->exists();
}

CORBA::Boolean _objref_TucanFolder::exists()
{
  _0RL_cd_812ed87905f9c760_43000000 _call_desc(_0RL_lcfn_812ed87905f9c760_53000000, "exists", 7, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_63000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_43000000* tcd = (_0RL_cd_812ed87905f9c760_43000000*) cd;
  _impl_TucanFolder* impl = (_impl_TucanFolder*) svnt->_ptrToInterface(TucanFolder::_PD_repoId);
  tcd->pd_result = impl->create();
}

CORBA::Boolean _objref_TucanFolder::create()
{
  _0RL_cd_812ed87905f9c760_43000000 _call_desc(_0RL_lcfn_812ed87905f9c760_63000000, "create", 7, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_73000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_43000000* tcd = (_0RL_cd_812ed87905f9c760_43000000*) cd;
  _impl_TucanFolder* impl = (_impl_TucanFolder*) svnt->_ptrToInterface(TucanFolder::_PD_repoId);
  tcd->pd_result = impl->deleteFolder();
}

CORBA::Boolean _objref_TucanFolder::deleteFolder()
{
  _0RL_cd_812ed87905f9c760_43000000 _call_desc(_0RL_lcfn_812ed87905f9c760_73000000, "deleteFolder", 13, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cTucanMessageSeq_e_cTucanException
class _0RL_cd_812ed87905f9c760_83000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_83000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  virtual void userException(GIOP_C&, const char*);
  
  inline TucanMessageSeq* result() { return pd_result; }
  
  TucanMessageSeq* pd_result;
};

void _0RL_cd_812ed87905f9c760_83000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = new TucanMessageSeq;
  
  *pd_result <<= giop_client;
  
}

void _0RL_cd_812ed87905f9c760_83000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_93000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_83000000* tcd = (_0RL_cd_812ed87905f9c760_83000000*) cd;
  _impl_TucanFolder* impl = (_impl_TucanFolder*) svnt->_ptrToInterface(TucanFolder::_PD_repoId);
  tcd->pd_result = impl->expunge();
}

TucanMessageSeq* _objref_TucanFolder::expunge()
{
  _0RL_cd_812ed87905f9c760_83000000 _call_desc(_0RL_lcfn_812ed87905f9c760_93000000, "expunge", 8, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cTucanFolder_i_cstring_e_cTucanException
class _0RL_cd_812ed87905f9c760_a3000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_a3000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const char* a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  virtual void userException(GIOP_C&, const char*);
  
  inline TucanFolder_ptr result() { return pd_result; }
  const char* arg_0;
  TucanFolder_ptr pd_result;
};

CORBA::ULong _0RL_cd_812ed87905f9c760_a3000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_0) ? strlen((const char*) arg_0) + 1 : 1;
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_a3000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_0)? strlen((const char*) arg_0) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_0),_len);
    else {
      if ((const char*) arg_0 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  
}

void _0RL_cd_812ed87905f9c760_a3000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = TucanFolder_Helper::unmarshalObjRef(giop_client);
  
}

void _0RL_cd_812ed87905f9c760_a3000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_b3000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_a3000000* tcd = (_0RL_cd_812ed87905f9c760_a3000000*) cd;
  _impl_TucanFolder* impl = (_impl_TucanFolder*) svnt->_ptrToInterface(TucanFolder::_PD_repoId);
  tcd->pd_result = impl->getFolder(tcd->arg_0);
}

TucanFolder_ptr _objref_TucanFolder::getFolder(const char* name)
{
  _0RL_cd_812ed87905f9c760_a3000000 _call_desc(_0RL_lcfn_812ed87905f9c760_b3000000, "getFolder", 10, 0, name);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cTucanFolder_e_cTucanException
class _0RL_cd_812ed87905f9c760_c3000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_c3000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, TucanFolder_ptr a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void userException(GIOP_C&, const char*);
  
  TucanFolder_ptr arg_0;
  
};

CORBA::ULong _0RL_cd_812ed87905f9c760_c3000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = TucanFolder_Helper::NP_alignedSize(arg_0, msgsize);
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_c3000000::marshalArguments(GIOP_C& giop_client)
{
  TucanFolder_Helper::marshalObjRef(arg_0,giop_client);
  
}

void _0RL_cd_812ed87905f9c760_c3000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_d3000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_c3000000* tcd = (_0RL_cd_812ed87905f9c760_c3000000*) cd;
  _impl_TucanFolder* impl = (_impl_TucanFolder*) svnt->_ptrToInterface(TucanFolder::_PD_repoId);
  impl->setParent(tcd->arg_0);
}

void _objref_TucanFolder::setParent(TucanFolder_ptr folder)
{
  _0RL_cd_812ed87905f9c760_c3000000 _call_desc(_0RL_lcfn_812ed87905f9c760_d3000000, "setParent", 10, 0, folder);
  
  _invoke(_call_desc);
  
}

// Proxy call descriptor class. Mangled signature:
//  _cTucanFolder_e_cTucanException
class _0RL_cd_812ed87905f9c760_e3000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_e3000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  virtual void userException(GIOP_C&, const char*);
  
  inline TucanFolder_ptr result() { return pd_result; }
  
  TucanFolder_ptr pd_result;
};

void _0RL_cd_812ed87905f9c760_e3000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = TucanFolder_Helper::unmarshalObjRef(giop_client);
  
}

void _0RL_cd_812ed87905f9c760_e3000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_f3000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_e3000000* tcd = (_0RL_cd_812ed87905f9c760_e3000000*) cd;
  _impl_TucanFolder* impl = (_impl_TucanFolder*) svnt->_ptrToInterface(TucanFolder::_PD_repoId);
  tcd->pd_result = impl->getParent();
}

TucanFolder_ptr _objref_TucanFolder::getParent()
{
  _0RL_cd_812ed87905f9c760_e3000000 _call_desc(_0RL_lcfn_812ed87905f9c760_f3000000, "getParent", 10, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_04000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_e3000000* tcd = (_0RL_cd_812ed87905f9c760_e3000000*) cd;
  _impl_TucanFolder* impl = (_impl_TucanFolder*) svnt->_ptrToInterface(TucanFolder::_PD_repoId);
  tcd->pd_result = impl->getNewFolderObject();
}

TucanFolder_ptr _objref_TucanFolder::getNewFolderObject()
{
  _0RL_cd_812ed87905f9c760_e3000000 _call_desc(_0RL_lcfn_812ed87905f9c760_04000000, "getNewFolderObject", 19, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_14000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_d2000000* tcd = (_0RL_cd_812ed87905f9c760_d2000000*) cd;
  _impl_TucanFolder* impl = (_impl_TucanFolder*) svnt->_ptrToInterface(TucanFolder::_PD_repoId);
  tcd->pd_result = impl->listFolders();
}

TucanStringList* _objref_TucanFolder::listFolders()
{
  _0RL_cd_812ed87905f9c760_d2000000 _call_desc(_0RL_lcfn_812ed87905f9c760_14000000, "listFolders", 12, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cTucanFolderSeq_e_cTucanException
class _0RL_cd_812ed87905f9c760_24000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_24000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  virtual void userException(GIOP_C&, const char*);
  
  inline TucanFolderSeq* result() { return pd_result; }
  
  TucanFolderSeq* pd_result;
};

void _0RL_cd_812ed87905f9c760_24000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = new TucanFolderSeq;
  
  *pd_result <<= giop_client;
  
}

void _0RL_cd_812ed87905f9c760_24000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_34000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_24000000* tcd = (_0RL_cd_812ed87905f9c760_24000000*) cd;
  _impl_TucanFolder* impl = (_impl_TucanFolder*) svnt->_ptrToInterface(TucanFolder::_PD_repoId);
  tcd->pd_result = impl->list();
}

TucanFolderSeq* _objref_TucanFolder::list()
{
  _0RL_cd_812ed87905f9c760_24000000 _call_desc(_0RL_lcfn_812ed87905f9c760_34000000, "list", 5, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring_e_cTucanException
class _0RL_cd_812ed87905f9c760_44000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_44000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const char* a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  virtual void userException(GIOP_C&, const char*);
  
  inline CORBA::Boolean result() { return pd_result; }
  const char* arg_0;
  CORBA::Boolean pd_result;
};

CORBA::ULong _0RL_cd_812ed87905f9c760_44000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_0) ? strlen((const char*) arg_0) + 1 : 1;
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_44000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_0)? strlen((const char*) arg_0) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_0),_len);
    else {
      if ((const char*) arg_0 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  
}

void _0RL_cd_812ed87905f9c760_44000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result <<= giop_client;
  
}

void _0RL_cd_812ed87905f9c760_44000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_54000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_44000000* tcd = (_0RL_cd_812ed87905f9c760_44000000*) cd;
  _impl_TucanFolder* impl = (_impl_TucanFolder*) svnt->_ptrToInterface(TucanFolder::_PD_repoId);
  tcd->pd_result = impl->renameTo(tcd->arg_0);
}

CORBA::Boolean _objref_TucanFolder::renameTo(const char* name)
{
  _0RL_cd_812ed87905f9c760_44000000 _call_desc(_0RL_lcfn_812ed87905f9c760_54000000, "renameTo", 9, 0, name);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_64000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_00000000* tcd = (_0RL_cd_812ed87905f9c760_00000000*) cd;
  _impl_TucanFolder* impl = (_impl_TucanFolder*) svnt->_ptrToInterface(TucanFolder::_PD_repoId);
  tcd->pd_result = impl->getName();
}

char* _objref_TucanFolder::getName()
{
  _0RL_cd_812ed87905f9c760_00000000 _call_desc(_0RL_lcfn_812ed87905f9c760_64000000, "getName", 8, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_74000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_20000000* tcd = (_0RL_cd_812ed87905f9c760_20000000*) cd;
  _impl_TucanFolder* impl = (_impl_TucanFolder*) svnt->_ptrToInterface(TucanFolder::_PD_repoId);
  impl->setName(tcd->arg_0);
}

void _objref_TucanFolder::setName(const char* name)
{
  _0RL_cd_812ed87905f9c760_20000000 _call_desc(_0RL_lcfn_812ed87905f9c760_74000000, "setName", 8, 0, name);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_84000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_00000000* tcd = (_0RL_cd_812ed87905f9c760_00000000*) cd;
  _impl_TucanFolder* impl = (_impl_TucanFolder*) svnt->_ptrToInterface(TucanFolder::_PD_repoId);
  tcd->pd_result = impl->getFullName();
}

char* _objref_TucanFolder::getFullName()
{
  _0RL_cd_812ed87905f9c760_00000000 _call_desc(_0RL_lcfn_812ed87905f9c760_84000000, "getFullName", 12, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_94000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_20000000* tcd = (_0RL_cd_812ed87905f9c760_20000000*) cd;
  _impl_TucanFolder* impl = (_impl_TucanFolder*) svnt->_ptrToInterface(TucanFolder::_PD_repoId);
  impl->setFullName(tcd->arg_0);
}

void _objref_TucanFolder::setFullName(const char* name)
{
  _0RL_cd_812ed87905f9c760_20000000 _call_desc(_0RL_lcfn_812ed87905f9c760_94000000, "setFullName", 12, 0, name);
  
  _invoke(_call_desc);
  
}

// Proxy call descriptor class. Mangled signature:
//  _cTucanMessage_i_clong_e_cTucanException
class _0RL_cd_812ed87905f9c760_a4000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_a4000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, CORBA::Long a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  virtual void userException(GIOP_C&, const char*);
  
  inline TucanMessage_ptr result() { return pd_result; }
  CORBA::Long arg_0;
  TucanMessage_ptr pd_result;
};

CORBA::ULong _0RL_cd_812ed87905f9c760_a4000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_a4000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  
}

void _0RL_cd_812ed87905f9c760_a4000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = TucanMessage_Helper::unmarshalObjRef(giop_client);
  
}

void _0RL_cd_812ed87905f9c760_a4000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_b4000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_a4000000* tcd = (_0RL_cd_812ed87905f9c760_a4000000*) cd;
  _impl_TucanFolder* impl = (_impl_TucanFolder*) svnt->_ptrToInterface(TucanFolder::_PD_repoId);
  tcd->pd_result = impl->getMessage(tcd->arg_0);
}

TucanMessage_ptr _objref_TucanFolder::getMessage(CORBA::Long msgnum)
{
  _0RL_cd_812ed87905f9c760_a4000000 _call_desc(_0RL_lcfn_812ed87905f9c760_b4000000, "getMessage", 11, 0, msgnum);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_c4000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_83000000* tcd = (_0RL_cd_812ed87905f9c760_83000000*) cd;
  _impl_TucanFolder* impl = (_impl_TucanFolder*) svnt->_ptrToInterface(TucanFolder::_PD_repoId);
  tcd->pd_result = impl->getMessages();
}

TucanMessageSeq* _objref_TucanFolder::getMessages()
{
  _0RL_cd_812ed87905f9c760_83000000 _call_desc(_0RL_lcfn_812ed87905f9c760_c4000000, "getMessages", 12, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_d4000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_83000000* tcd = (_0RL_cd_812ed87905f9c760_83000000*) cd;
  _impl_TucanFolder* impl = (_impl_TucanFolder*) svnt->_ptrToInterface(TucanFolder::_PD_repoId);
  tcd->pd_result = impl->getNewMessages();
}

TucanMessageSeq* _objref_TucanFolder::getNewMessages()
{
  _0RL_cd_812ed87905f9c760_83000000 _call_desc(_0RL_lcfn_812ed87905f9c760_d4000000, "getNewMessages", 15, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cTucanMessageSeq_i_clong_i_clong_e_cTucanException
class _0RL_cd_812ed87905f9c760_e4000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_e4000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, CORBA::Long a_0, CORBA::Long a_1):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0),
     arg_1(a_1) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  virtual void userException(GIOP_C&, const char*);
  
  inline TucanMessageSeq* result() { return pd_result; }
  CORBA::Long arg_0;
  CORBA::Long arg_1;
  TucanMessageSeq* pd_result;
};

CORBA::ULong _0RL_cd_812ed87905f9c760_e4000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_e4000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  arg_1 >>= giop_client;
  
}

void _0RL_cd_812ed87905f9c760_e4000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = new TucanMessageSeq;
  
  *pd_result <<= giop_client;
  
}

void _0RL_cd_812ed87905f9c760_e4000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_f4000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_e4000000* tcd = (_0RL_cd_812ed87905f9c760_e4000000*) cd;
  _impl_TucanFolder* impl = (_impl_TucanFolder*) svnt->_ptrToInterface(TucanFolder::_PD_repoId);
  tcd->pd_result = impl->getMessagesInRange(tcd->arg_0, tcd->arg_1);
}

TucanMessageSeq* _objref_TucanFolder::getMessagesInRange(CORBA::Long start, CORBA::Long stop)
{
  _0RL_cd_812ed87905f9c760_e4000000 _call_desc(_0RL_lcfn_812ed87905f9c760_f4000000, "getMessagesInRange", 19, 0, start, stop);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cTucanMessage_e_cTucanException
class _0RL_cd_812ed87905f9c760_05000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_05000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  virtual void userException(GIOP_C&, const char*);
  
  inline TucanMessage_ptr result() { return pd_result; }
  
  TucanMessage_ptr pd_result;
};

void _0RL_cd_812ed87905f9c760_05000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = TucanMessage_Helper::unmarshalObjRef(giop_client);
  
}

void _0RL_cd_812ed87905f9c760_05000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_15000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_05000000* tcd = (_0RL_cd_812ed87905f9c760_05000000*) cd;
  _impl_TucanFolder* impl = (_impl_TucanFolder*) svnt->_ptrToInterface(TucanFolder::_PD_repoId);
  tcd->pd_result = impl->getNewMessageObject();
}

TucanMessage_ptr _objref_TucanFolder::getNewMessageObject()
{
  _0RL_cd_812ed87905f9c760_05000000 _call_desc(_0RL_lcfn_812ed87905f9c760_15000000, "getNewMessageObject", 20, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_25000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_92000000* tcd = (_0RL_cd_812ed87905f9c760_92000000*) cd;
  _impl_TucanFolder* impl = (_impl_TucanFolder*) svnt->_ptrToInterface(TucanFolder::_PD_repoId);
  tcd->pd_result = impl->getMessageCount();
}

CORBA::Long _objref_TucanFolder::getMessageCount()
{
  _0RL_cd_812ed87905f9c760_92000000 _call_desc(_0RL_lcfn_812ed87905f9c760_25000000, "getMessageCount", 16, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_35000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_92000000* tcd = (_0RL_cd_812ed87905f9c760_92000000*) cd;
  _impl_TucanFolder* impl = (_impl_TucanFolder*) svnt->_ptrToInterface(TucanFolder::_PD_repoId);
  tcd->pd_result = impl->getNewMessageCount();
}

CORBA::Long _objref_TucanFolder::getNewMessageCount()
{
  _0RL_cd_812ed87905f9c760_92000000 _call_desc(_0RL_lcfn_812ed87905f9c760_35000000, "getNewMessageCount", 19, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_45000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_43000000* tcd = (_0RL_cd_812ed87905f9c760_43000000*) cd;
  _impl_TucanFolder* impl = (_impl_TucanFolder*) svnt->_ptrToInterface(TucanFolder::_PD_repoId);
  tcd->pd_result = impl->hasNewMessages();
}

CORBA::Boolean _objref_TucanFolder::hasNewMessages()
{
  _0RL_cd_812ed87905f9c760_43000000 _call_desc(_0RL_lcfn_812ed87905f9c760_45000000, "hasNewMessages", 15, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  void_i_clong_i_cTucanFolder_e_cTucanException
class _0RL_cd_812ed87905f9c760_55000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_55000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, CORBA::Long a_0, TucanFolder_ptr a_1):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0),
     arg_1(a_1) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void userException(GIOP_C&, const char*);
  
  CORBA::Long arg_0;
  TucanFolder_ptr arg_1;
  
};

CORBA::ULong _0RL_cd_812ed87905f9c760_55000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  
  msgsize = TucanFolder_Helper::NP_alignedSize(arg_1, msgsize);
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_55000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  TucanFolder_Helper::marshalObjRef(arg_1,giop_client);
  
}

void _0RL_cd_812ed87905f9c760_55000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_65000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_55000000* tcd = (_0RL_cd_812ed87905f9c760_55000000*) cd;
  _impl_TucanFolder* impl = (_impl_TucanFolder*) svnt->_ptrToInterface(TucanFolder::_PD_repoId);
  impl->moveMessage(tcd->arg_0, tcd->arg_1);
}

void _objref_TucanFolder::moveMessage(CORBA::Long msgnum, TucanFolder_ptr folder)
{
  _0RL_cd_812ed87905f9c760_55000000 _call_desc(_0RL_lcfn_812ed87905f9c760_65000000, "moveMessage", 12, 0, msgnum, folder);
  
  _invoke(_call_desc);
  
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cTucanLongList_i_cTucanFolder_e_cTucanException
class _0RL_cd_812ed87905f9c760_75000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_75000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const TucanLongList& a_0, TucanFolder_ptr a_1):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0),
     arg_1(a_1) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void userException(GIOP_C&, const char*);
  
  const TucanLongList& arg_0;
  TucanFolder_ptr arg_1;
  
};

CORBA::ULong _0RL_cd_812ed87905f9c760_75000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = arg_0._NP_alignedSize(msgsize);
  
  msgsize = TucanFolder_Helper::NP_alignedSize(arg_1, msgsize);
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_75000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  TucanFolder_Helper::marshalObjRef(arg_1,giop_client);
  
}

void _0RL_cd_812ed87905f9c760_75000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_85000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_75000000* tcd = (_0RL_cd_812ed87905f9c760_75000000*) cd;
  _impl_TucanFolder* impl = (_impl_TucanFolder*) svnt->_ptrToInterface(TucanFolder::_PD_repoId);
  impl->moveMessages(tcd->arg_0, tcd->arg_1);
}

void _objref_TucanFolder::moveMessages(const TucanLongList& msgnums, TucanFolder_ptr folder)
{
  _0RL_cd_812ed87905f9c760_75000000 _call_desc(_0RL_lcfn_812ed87905f9c760_85000000, "moveMessages", 13, 0, msgnums, folder);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_95000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_55000000* tcd = (_0RL_cd_812ed87905f9c760_55000000*) cd;
  _impl_TucanFolder* impl = (_impl_TucanFolder*) svnt->_ptrToInterface(TucanFolder::_PD_repoId);
  impl->copyMessage(tcd->arg_0, tcd->arg_1);
}

void _objref_TucanFolder::copyMessage(CORBA::Long msgnum, TucanFolder_ptr folder)
{
  _0RL_cd_812ed87905f9c760_55000000 _call_desc(_0RL_lcfn_812ed87905f9c760_95000000, "copyMessage", 12, 0, msgnum, folder);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_a5000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_75000000* tcd = (_0RL_cd_812ed87905f9c760_75000000*) cd;
  _impl_TucanFolder* impl = (_impl_TucanFolder*) svnt->_ptrToInterface(TucanFolder::_PD_repoId);
  impl->copyMessages(tcd->arg_0, tcd->arg_1);
}

void _objref_TucanFolder::copyMessages(const TucanLongList& msgnums, TucanFolder_ptr folder)
{
  _0RL_cd_812ed87905f9c760_75000000 _call_desc(_0RL_lcfn_812ed87905f9c760_a5000000, "copyMessages", 13, 0, msgnums, folder);
  
  _invoke(_call_desc);
  
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cTucanMessage_e_cTucanException
class _0RL_cd_812ed87905f9c760_b5000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_b5000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, TucanMessage_ptr a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void userException(GIOP_C&, const char*);
  
  TucanMessage_ptr arg_0;
  
};

CORBA::ULong _0RL_cd_812ed87905f9c760_b5000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = TucanMessage_Helper::NP_alignedSize(arg_0, msgsize);
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_b5000000::marshalArguments(GIOP_C& giop_client)
{
  TucanMessage_Helper::marshalObjRef(arg_0,giop_client);
  
}

void _0RL_cd_812ed87905f9c760_b5000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_c5000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_b5000000* tcd = (_0RL_cd_812ed87905f9c760_b5000000*) cd;
  _impl_TucanFolder* impl = (_impl_TucanFolder*) svnt->_ptrToInterface(TucanFolder::_PD_repoId);
  impl->appendMessage(tcd->arg_0);
}

void _objref_TucanFolder::appendMessage(TucanMessage_ptr msg)
{
  _0RL_cd_812ed87905f9c760_b5000000 _call_desc(_0RL_lcfn_812ed87905f9c760_c5000000, "appendMessage", 14, 0, msg);
  
  _invoke(_call_desc);
  
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cTucanMessageSeq_e_cTucanException
class _0RL_cd_812ed87905f9c760_d5000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_d5000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const TucanMessageSeq& a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void userException(GIOP_C&, const char*);
  
  const TucanMessageSeq& arg_0;
  
};

CORBA::ULong _0RL_cd_812ed87905f9c760_d5000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = arg_0._NP_alignedSize(msgsize);
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_d5000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  
}

void _0RL_cd_812ed87905f9c760_d5000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_e5000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_d5000000* tcd = (_0RL_cd_812ed87905f9c760_d5000000*) cd;
  _impl_TucanFolder* impl = (_impl_TucanFolder*) svnt->_ptrToInterface(TucanFolder::_PD_repoId);
  impl->appendMessages(tcd->arg_0);
}

void _objref_TucanFolder::appendMessages(const TucanMessageSeq& msgs)
{
  _0RL_cd_812ed87905f9c760_d5000000 _call_desc(_0RL_lcfn_812ed87905f9c760_e5000000, "appendMessages", 15, 0, msgs);
  
  _invoke(_call_desc);
  
}

// Proxy call descriptor class. Mangled signature:
//  void_i_clong_e_cTucanException
class _0RL_cd_812ed87905f9c760_f5000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_f5000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, CORBA::Long a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void userException(GIOP_C&, const char*);
  
  CORBA::Long arg_0;
  
};

CORBA::ULong _0RL_cd_812ed87905f9c760_f5000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_f5000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  
}

void _0RL_cd_812ed87905f9c760_f5000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_06000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_f5000000* tcd = (_0RL_cd_812ed87905f9c760_f5000000*) cd;
  _impl_TucanFolder* impl = (_impl_TucanFolder*) svnt->_ptrToInterface(TucanFolder::_PD_repoId);
  impl->deleteMessage(tcd->arg_0);
}

void _objref_TucanFolder::deleteMessage(CORBA::Long msgnum)
{
  _0RL_cd_812ed87905f9c760_f5000000 _call_desc(_0RL_lcfn_812ed87905f9c760_06000000, "deleteMessage", 14, 0, msgnum);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_16000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_71000000* tcd = (_0RL_cd_812ed87905f9c760_71000000*) cd;
  _impl_TucanFolder* impl = (_impl_TucanFolder*) svnt->_ptrToInterface(TucanFolder::_PD_repoId);
  tcd->pd_result = impl->getAuth();
}

TucanAuth_ptr _objref_TucanFolder::getAuth()
{
  _0RL_cd_812ed87905f9c760_71000000 _call_desc(_0RL_lcfn_812ed87905f9c760_16000000, "getAuth", 8, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cTucanAuth_e_cTucanException
class _0RL_cd_812ed87905f9c760_26000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_26000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, TucanAuth_ptr a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void userException(GIOP_C&, const char*);
  
  TucanAuth_ptr arg_0;
  
};

CORBA::ULong _0RL_cd_812ed87905f9c760_26000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = TucanAuth_Helper::NP_alignedSize(arg_0, msgsize);
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_26000000::marshalArguments(GIOP_C& giop_client)
{
  TucanAuth_Helper::marshalObjRef(arg_0,giop_client);
  
}

void _0RL_cd_812ed87905f9c760_26000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_36000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_26000000* tcd = (_0RL_cd_812ed87905f9c760_26000000*) cd;
  _impl_TucanFolder* impl = (_impl_TucanFolder*) svnt->_ptrToInterface(TucanFolder::_PD_repoId);
  impl->setAuth(tcd->arg_0);
}

void _objref_TucanFolder::setAuth(TucanAuth_ptr auth)
{
  _0RL_cd_812ed87905f9c760_26000000 _call_desc(_0RL_lcfn_812ed87905f9c760_36000000, "setAuth", 8, 0, auth);
  
  _invoke(_call_desc);
  
}

// Proxy call descriptor class. Mangled signature:
//  _clong_i_clong_e_cTucanException
class _0RL_cd_812ed87905f9c760_46000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_46000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, CORBA::Long a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  virtual void userException(GIOP_C&, const char*);
  
  inline CORBA::Long result() { return pd_result; }
  CORBA::Long arg_0;
  CORBA::Long pd_result;
};

CORBA::ULong _0RL_cd_812ed87905f9c760_46000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_46000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  
}

void _0RL_cd_812ed87905f9c760_46000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result <<= giop_client;
  
}

void _0RL_cd_812ed87905f9c760_46000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_56000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_46000000* tcd = (_0RL_cd_812ed87905f9c760_46000000*) cd;
  _impl_TucanFolder* impl = (_impl_TucanFolder*) svnt->_ptrToInterface(TucanFolder::_PD_repoId);
  tcd->pd_result = impl->getMessageFlags(tcd->arg_0);
}

CORBA::Long _objref_TucanFolder::getMessageFlags(CORBA::Long msgnum)
{
  _0RL_cd_812ed87905f9c760_46000000 _call_desc(_0RL_lcfn_812ed87905f9c760_56000000, "getMessageFlags", 16, 0, msgnum);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  void_i_clong_i_clong_e_cTucanException
class _0RL_cd_812ed87905f9c760_66000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_66000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, CORBA::Long a_0, CORBA::Long a_1):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0),
     arg_1(a_1) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void userException(GIOP_C&, const char*);
  
  CORBA::Long arg_0;
  CORBA::Long arg_1;
  
};

CORBA::ULong _0RL_cd_812ed87905f9c760_66000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_66000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  arg_1 >>= giop_client;
  
}

void _0RL_cd_812ed87905f9c760_66000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_76000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_66000000* tcd = (_0RL_cd_812ed87905f9c760_66000000*) cd;
  _impl_TucanFolder* impl = (_impl_TucanFolder*) svnt->_ptrToInterface(TucanFolder::_PD_repoId);
  impl->setMessageFlags(tcd->arg_0, tcd->arg_1);
}

void _objref_TucanFolder::setMessageFlags(CORBA::Long msgnum, CORBA::Long flags)
{
  _0RL_cd_812ed87905f9c760_66000000 _call_desc(_0RL_lcfn_812ed87905f9c760_76000000, "setMessageFlags", 16, 0, msgnum, flags);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_86000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_66000000* tcd = (_0RL_cd_812ed87905f9c760_66000000*) cd;
  _impl_TucanFolder* impl = (_impl_TucanFolder*) svnt->_ptrToInterface(TucanFolder::_PD_repoId);
  impl->setMessageFlag(tcd->arg_0, tcd->arg_1);
}

void _objref_TucanFolder::setMessageFlag(CORBA::Long msgnum, CORBA::Long flag)
{
  _0RL_cd_812ed87905f9c760_66000000 _call_desc(_0RL_lcfn_812ed87905f9c760_86000000, "setMessageFlag", 15, 0, msgnum, flag);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_96000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_66000000* tcd = (_0RL_cd_812ed87905f9c760_66000000*) cd;
  _impl_TucanFolder* impl = (_impl_TucanFolder*) svnt->_ptrToInterface(TucanFolder::_PD_repoId);
  impl->unsetMessageFlag(tcd->arg_0, tcd->arg_1);
}

void _objref_TucanFolder::unsetMessageFlag(CORBA::Long msgnum, CORBA::Long flag)
{
  _0RL_cd_812ed87905f9c760_66000000 _call_desc(_0RL_lcfn_812ed87905f9c760_96000000, "unsetMessageFlag", 17, 0, msgnum, flag);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_a6000000(omniCallDescriptor* cd, omniServant* svnt)
{
  
  _impl_TucanFolder* impl = (_impl_TucanFolder*) svnt->_ptrToInterface(TucanFolder::_PD_repoId);
  impl->destroy();
}

void _objref_TucanFolder::destroy()
{
  _0RL_cd_812ed87905f9c760_60000000 _call_desc(_0RL_lcfn_812ed87905f9c760_a6000000, "destroy", 8, 0);
  
  _invoke(_call_desc);
  
}

_pof_TucanFolder::~_pof_TucanFolder() {}

omniObjRef*
_pof_TucanFolder::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanFolder(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanFolder::is_a(const char* id) const
{
  if( !strcmp(id, TucanFolder::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanFolder _the_pof_TucanFolder;

_impl_TucanFolder::~_impl_TucanFolder() {}

CORBA::Boolean
_impl_TucanFolder::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "exists") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    CORBA::Boolean result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->exists();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize += 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "create") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    CORBA::Boolean result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->create();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize += 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "deleteFolder") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    CORBA::Boolean result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->deleteFolder();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize += 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "expunge") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    TucanMessageSeq_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->expunge();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      *(result.operator->()) >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getFolder") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::String_var arg_name;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_name = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    TucanFolder_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getFolder(arg_name.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = TucanFolder_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      TucanFolder_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setParent") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    TucanFolder_var arg_folder;
    
    arg_folder = TucanFolder_Helper::unmarshalObjRef(giop_s);
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->setParent(arg_folder.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getParent") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    TucanFolder_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getParent();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = TucanFolder_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      TucanFolder_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getNewFolderObject") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    TucanFolder_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getNewFolderObject();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = TucanFolder_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      TucanFolder_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "listFolders") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    TucanStringList_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->listFolders();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      *(result.operator->()) >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "list") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    TucanFolderSeq_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->list();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      *(result.operator->()) >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "renameTo") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::String_var arg_name;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_name = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    CORBA::Boolean result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->renameTo(arg_name.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize += 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getName") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    CORBA::String_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getName();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      msgsize += ((const char*) result) ? strlen((const char*) result) + 1 : 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      {
        CORBA::ULong _len = (((const char*) result)? strlen((const char*) result) + 1 : 1);
        
        _len >>= giop_s;
        if (_len > 1)
          giop_s.put_char_array((const CORBA::Char *)((const char*)result),_len);
        else {
          if ((const char*) result == 0 && omniORB::traceLevel > 1)
            _CORBA_null_string_ptr(0);
          CORBA::Char('\0') >>= giop_s;
        }
      }
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setName") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::String_var arg_name;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_name = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->setName(arg_name.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getFullName") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    CORBA::String_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getFullName();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      msgsize += ((const char*) result) ? strlen((const char*) result) + 1 : 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      {
        CORBA::ULong _len = (((const char*) result)? strlen((const char*) result) + 1 : 1);
        
        _len >>= giop_s;
        if (_len > 1)
          giop_s.put_char_array((const CORBA::Char *)((const char*)result),_len);
        else {
          if ((const char*) result == 0 && omniORB::traceLevel > 1)
            _CORBA_null_string_ptr(0);
          CORBA::Char('\0') >>= giop_s;
        }
      }
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setFullName") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::String_var arg_name;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_name = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->setFullName(arg_name.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getMessage") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::Long arg_msgnum;
    
    arg_msgnum <<= giop_s;
    
    giop_s.RequestReceived();
    TucanMessage_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getMessage(arg_msgnum);
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = TucanMessage_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      TucanMessage_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getMessages") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    TucanMessageSeq_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getMessages();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      *(result.operator->()) >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getNewMessages") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    TucanMessageSeq_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getNewMessages();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      *(result.operator->()) >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getMessagesInRange") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::Long arg_start;
    
    arg_start <<= giop_s;
    CORBA::Long arg_stop;
    
    arg_stop <<= giop_s;
    
    giop_s.RequestReceived();
    TucanMessageSeq_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getMessagesInRange(arg_start, arg_stop);
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      *(result.operator->()) >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getNewMessageObject") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    TucanMessage_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getNewMessageObject();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = TucanMessage_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      TucanMessage_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getMessageCount") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    CORBA::Long result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getMessageCount();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getNewMessageCount") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    CORBA::Long result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getNewMessageCount();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "hasNewMessages") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    CORBA::Boolean result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->hasNewMessages();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize += 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "moveMessage") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::Long arg_msgnum;
    
    arg_msgnum <<= giop_s;
    TucanFolder_var arg_folder;
    
    arg_folder = TucanFolder_Helper::unmarshalObjRef(giop_s);
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->moveMessage(arg_msgnum, arg_folder.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "moveMessages") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    TucanLongList arg_msgnums;
    
    arg_msgnums <<= giop_s;
    TucanFolder_var arg_folder;
    
    arg_folder = TucanFolder_Helper::unmarshalObjRef(giop_s);
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->moveMessages(arg_msgnums, arg_folder.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "copyMessage") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::Long arg_msgnum;
    
    arg_msgnum <<= giop_s;
    TucanFolder_var arg_folder;
    
    arg_folder = TucanFolder_Helper::unmarshalObjRef(giop_s);
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->copyMessage(arg_msgnum, arg_folder.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "copyMessages") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    TucanLongList arg_msgnums;
    
    arg_msgnums <<= giop_s;
    TucanFolder_var arg_folder;
    
    arg_folder = TucanFolder_Helper::unmarshalObjRef(giop_s);
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->copyMessages(arg_msgnums, arg_folder.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "appendMessage") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    TucanMessage_var arg_msg;
    
    arg_msg = TucanMessage_Helper::unmarshalObjRef(giop_s);
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->appendMessage(arg_msg.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "appendMessages") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    TucanMessageSeq arg_msgs;
    
    arg_msgs <<= giop_s;
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->appendMessages(arg_msgs);
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "deleteMessage") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::Long arg_msgnum;
    
    arg_msgnum <<= giop_s;
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->deleteMessage(arg_msgnum);
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getAuth") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    TucanAuth_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getAuth();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = TucanAuth_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      TucanAuth_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setAuth") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    TucanAuth_var arg_auth;
    
    arg_auth = TucanAuth_Helper::unmarshalObjRef(giop_s);
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->setAuth(arg_auth.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getMessageFlags") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::Long arg_msgnum;
    
    arg_msgnum <<= giop_s;
    
    giop_s.RequestReceived();
    CORBA::Long result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getMessageFlags(arg_msgnum);
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setMessageFlags") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::Long arg_msgnum;
    
    arg_msgnum <<= giop_s;
    CORBA::Long arg_flags;
    
    arg_flags <<= giop_s;
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->setMessageFlags(arg_msgnum, arg_flags);
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setMessageFlag") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::Long arg_msgnum;
    
    arg_msgnum <<= giop_s;
    CORBA::Long arg_flag;
    
    arg_flag <<= giop_s;
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->setMessageFlag(arg_msgnum, arg_flag);
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "unsetMessageFlag") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::Long arg_msgnum;
    
    arg_msgnum <<= giop_s;
    CORBA::Long arg_flag;
    
    arg_flag <<= giop_s;
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->unsetMessageFlag(arg_msgnum, arg_flag);
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "destroy") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->destroy();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  return 0;
}

void*
_impl_TucanFolder::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanFolder::_PD_repoId) )
    return (_impl_TucanFolder*) this;
  
  return 0;
}

const char*
_impl_TucanFolder::_mostDerivedRepoId()
{
  return TucanFolder::_PD_repoId;
}

TucanFolderFactory_ptr TucanFolderFactory_Helper::_nil() {
  return TucanFolderFactory::_nil();
}

CORBA::Boolean TucanFolderFactory_Helper::is_nil(TucanFolderFactory_ptr p) {
  return CORBA::is_nil(p);

}

void TucanFolderFactory_Helper::release(TucanFolderFactory_ptr p) {
  CORBA::release(p);
}

void TucanFolderFactory_Helper::duplicate(TucanFolderFactory_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanFolderFactory_Helper::NP_alignedSize(TucanFolderFactory_ptr obj, size_t offset) {
  return TucanFolderFactory::_alignedSize(obj, offset);
}

void TucanFolderFactory_Helper::marshalObjRef(TucanFolderFactory_ptr obj, NetBufferedStream& s) {
  TucanFolderFactory::_marshalObjRef(obj, s);
}

TucanFolderFactory_ptr TucanFolderFactory_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanFolderFactory::_unmarshalObjRef(s);
}

void TucanFolderFactory_Helper::marshalObjRef(TucanFolderFactory_ptr obj, MemBufferedStream& s) {
  TucanFolderFactory::_marshalObjRef(obj, s);
}

TucanFolderFactory_ptr TucanFolderFactory_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanFolderFactory::_unmarshalObjRef(s);
}

TucanFolderFactory_ptr
TucanFolderFactory::_duplicate(TucanFolderFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanFolderFactory_ptr
TucanFolderFactory::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanFolderFactory_ptr
TucanFolderFactory::_nil()
{
  static _objref_TucanFolderFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanFolderFactory;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanFolderFactory::_PD_repoId = "IDL:TucanFolderFactory:1.0";

_objref_TucanFolderFactory::~_objref_TucanFolderFactory() {}

_objref_TucanFolderFactory::_objref_TucanFolderFactory(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   
   omniObjRef(TucanFolderFactory::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanFolderFactory::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanFolderFactory::_PD_repoId) )
    return (TucanFolderFactory_ptr) this;
  
  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_b6000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_e3000000* tcd = (_0RL_cd_812ed87905f9c760_e3000000*) cd;
  _impl_TucanFolderFactory* impl = (_impl_TucanFolderFactory*) svnt->_ptrToInterface(TucanFolderFactory::_PD_repoId);
  tcd->pd_result = impl->create();
}

TucanFolder_ptr _objref_TucanFolderFactory::create()
{
  _0RL_cd_812ed87905f9c760_e3000000 _call_desc(_0RL_lcfn_812ed87905f9c760_b6000000, "create", 7, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

_pof_TucanFolderFactory::~_pof_TucanFolderFactory() {}

omniObjRef*
_pof_TucanFolderFactory::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanFolderFactory(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanFolderFactory::is_a(const char* id) const
{
  if( !strcmp(id, TucanFolderFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanFolderFactory _the_pof_TucanFolderFactory;

_impl_TucanFolderFactory::~_impl_TucanFolderFactory() {}

CORBA::Boolean
_impl_TucanFolderFactory::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "create") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    TucanFolder_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->create();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = TucanFolder_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      TucanFolder_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  return 0;
}

void*
_impl_TucanFolderFactory::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanFolderFactory::_PD_repoId) )
    return (_impl_TucanFolderFactory*) this;
  
  return 0;
}

const char*
_impl_TucanFolderFactory::_mostDerivedRepoId()
{
  return TucanFolderFactory::_PD_repoId;
}

TucanMessage_ptr TucanMessage_Helper::_nil() {
  return TucanMessage::_nil();
}

CORBA::Boolean TucanMessage_Helper::is_nil(TucanMessage_ptr p) {
  return CORBA::is_nil(p);

}

void TucanMessage_Helper::release(TucanMessage_ptr p) {
  CORBA::release(p);
}

void TucanMessage_Helper::duplicate(TucanMessage_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanMessage_Helper::NP_alignedSize(TucanMessage_ptr obj, size_t offset) {
  return TucanMessage::_alignedSize(obj, offset);
}

void TucanMessage_Helper::marshalObjRef(TucanMessage_ptr obj, NetBufferedStream& s) {
  TucanMessage::_marshalObjRef(obj, s);
}

TucanMessage_ptr TucanMessage_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanMessage::_unmarshalObjRef(s);
}

void TucanMessage_Helper::marshalObjRef(TucanMessage_ptr obj, MemBufferedStream& s) {
  TucanMessage::_marshalObjRef(obj, s);
}

TucanMessage_ptr TucanMessage_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanMessage::_unmarshalObjRef(s);
}

TucanMessage_ptr
TucanMessage::_duplicate(TucanMessage_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanMessage_ptr
TucanMessage::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanMessage_ptr
TucanMessage::_nil()
{
  static _objref_TucanMessage* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanMessage;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanMessage::_PD_repoId = "IDL:TucanMessage:1.0";

_objref_TucanMessage::~_objref_TucanMessage() {}

_objref_TucanMessage::_objref_TucanMessage(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   
   omniObjRef(TucanMessage::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanMessage::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanMessage::_PD_repoId) )
    return (TucanMessage_ptr) this;
  
  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_c6000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_f1000000* tcd = (_0RL_cd_812ed87905f9c760_f1000000*) cd;
  _impl_TucanMessage* impl = (_impl_TucanMessage*) svnt->_ptrToInterface(TucanMessage::_PD_repoId);
  tcd->pd_result = impl->getData();
}

TucanRawData* _objref_TucanMessage::getData()
{
  _0RL_cd_812ed87905f9c760_f1000000 _call_desc(_0RL_lcfn_812ed87905f9c760_c6000000, "getData", 8, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_d6000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_23000000* tcd = (_0RL_cd_812ed87905f9c760_23000000*) cd;
  _impl_TucanMessage* impl = (_impl_TucanMessage*) svnt->_ptrToInterface(TucanMessage::_PD_repoId);
  tcd->pd_result = impl->getDataObject();
}

TucanData_ptr _objref_TucanMessage::getDataObject()
{
  _0RL_cd_812ed87905f9c760_23000000 _call_desc(_0RL_lcfn_812ed87905f9c760_d6000000, "getDataObject", 14, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cTucanData_e_cTucanException
class _0RL_cd_812ed87905f9c760_e6000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_e6000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, TucanData_ptr a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void userException(GIOP_C&, const char*);
  
  TucanData_ptr arg_0;
  
};

CORBA::ULong _0RL_cd_812ed87905f9c760_e6000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = TucanData_Helper::NP_alignedSize(arg_0, msgsize);
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_e6000000::marshalArguments(GIOP_C& giop_client)
{
  TucanData_Helper::marshalObjRef(arg_0,giop_client);
  
}

void _0RL_cd_812ed87905f9c760_e6000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_f6000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_e6000000* tcd = (_0RL_cd_812ed87905f9c760_e6000000*) cd;
  _impl_TucanMessage* impl = (_impl_TucanMessage*) svnt->_ptrToInterface(TucanMessage::_PD_repoId);
  impl->setDataObject(tcd->arg_0);
}

void _objref_TucanMessage::setDataObject(TucanData_ptr data)
{
  _0RL_cd_812ed87905f9c760_e6000000 _call_desc(_0RL_lcfn_812ed87905f9c760_f6000000, "setDataObject", 14, 0, data);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_07000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_23000000* tcd = (_0RL_cd_812ed87905f9c760_23000000*) cd;
  _impl_TucanMessage* impl = (_impl_TucanMessage*) svnt->_ptrToInterface(TucanMessage::_PD_repoId);
  tcd->pd_result = impl->getNewDataObject();
}

TucanData_ptr _objref_TucanMessage::getNewDataObject()
{
  _0RL_cd_812ed87905f9c760_23000000 _call_desc(_0RL_lcfn_812ed87905f9c760_07000000, "getNewDataObject", 17, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_17000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_80000000* tcd = (_0RL_cd_812ed87905f9c760_80000000*) cd;
  _impl_TucanMessage* impl = (_impl_TucanMessage*) svnt->_ptrToInterface(TucanMessage::_PD_repoId);
  tcd->pd_result = impl->getFrom();
}

TucanAddress_ptr _objref_TucanMessage::getFrom()
{
  _0RL_cd_812ed87905f9c760_80000000 _call_desc(_0RL_lcfn_812ed87905f9c760_17000000, "getFrom", 8, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cTucanAddress_e_cTucanException
class _0RL_cd_812ed87905f9c760_27000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_27000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, TucanAddress_ptr a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void userException(GIOP_C&, const char*);
  
  TucanAddress_ptr arg_0;
  
};

CORBA::ULong _0RL_cd_812ed87905f9c760_27000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = TucanAddress_Helper::NP_alignedSize(arg_0, msgsize);
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_27000000::marshalArguments(GIOP_C& giop_client)
{
  TucanAddress_Helper::marshalObjRef(arg_0,giop_client);
  
}

void _0RL_cd_812ed87905f9c760_27000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_37000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_27000000* tcd = (_0RL_cd_812ed87905f9c760_27000000*) cd;
  _impl_TucanMessage* impl = (_impl_TucanMessage*) svnt->_ptrToInterface(TucanMessage::_PD_repoId);
  impl->setFrom(tcd->arg_0);
}

void _objref_TucanMessage::setFrom(TucanAddress_ptr fromname)
{
  _0RL_cd_812ed87905f9c760_27000000 _call_desc(_0RL_lcfn_812ed87905f9c760_37000000, "setFrom", 8, 0, fromname);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_47000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_80000000* tcd = (_0RL_cd_812ed87905f9c760_80000000*) cd;
  _impl_TucanMessage* impl = (_impl_TucanMessage*) svnt->_ptrToInterface(TucanMessage::_PD_repoId);
  tcd->pd_result = impl->getNewAddressObject();
}

TucanAddress_ptr _objref_TucanMessage::getNewAddressObject()
{
  _0RL_cd_812ed87905f9c760_80000000 _call_desc(_0RL_lcfn_812ed87905f9c760_47000000, "getNewAddressObject", 20, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cTucanAddressSeq_i_cstring_e_cTucanException
class _0RL_cd_812ed87905f9c760_57000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_57000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const char* a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  virtual void userException(GIOP_C&, const char*);
  
  inline TucanAddressSeq* result() { return pd_result; }
  const char* arg_0;
  TucanAddressSeq* pd_result;
};

CORBA::ULong _0RL_cd_812ed87905f9c760_57000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_0) ? strlen((const char*) arg_0) + 1 : 1;
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_57000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_0)? strlen((const char*) arg_0) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_0),_len);
    else {
      if ((const char*) arg_0 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  
}

void _0RL_cd_812ed87905f9c760_57000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = new TucanAddressSeq;
  
  *pd_result <<= giop_client;
  
}

void _0RL_cd_812ed87905f9c760_57000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_67000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_57000000* tcd = (_0RL_cd_812ed87905f9c760_57000000*) cd;
  _impl_TucanMessage* impl = (_impl_TucanMessage*) svnt->_ptrToInterface(TucanMessage::_PD_repoId);
  tcd->pd_result = impl->getRecipients(tcd->arg_0);
}

TucanAddressSeq* _objref_TucanMessage::getRecipients(const char* type)
{
  _0RL_cd_812ed87905f9c760_57000000 _call_desc(_0RL_lcfn_812ed87905f9c760_67000000, "getRecipients", 14, 0, type);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cTucanAddressSeq_e_cTucanException
class _0RL_cd_812ed87905f9c760_77000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_77000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const char* a_0, const TucanAddressSeq& a_1):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0),
     arg_1(a_1) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void userException(GIOP_C&, const char*);
  
  const char* arg_0;
  const TucanAddressSeq& arg_1;
  
};

CORBA::ULong _0RL_cd_812ed87905f9c760_77000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_0) ? strlen((const char*) arg_0) + 1 : 1;
  
  msgsize = arg_1._NP_alignedSize(msgsize);
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_77000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_0)? strlen((const char*) arg_0) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_0),_len);
    else {
      if ((const char*) arg_0 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  arg_1 >>= giop_client;
  
}

void _0RL_cd_812ed87905f9c760_77000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_87000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_77000000* tcd = (_0RL_cd_812ed87905f9c760_77000000*) cd;
  _impl_TucanMessage* impl = (_impl_TucanMessage*) svnt->_ptrToInterface(TucanMessage::_PD_repoId);
  impl->setRecipients(tcd->arg_0, tcd->arg_1);
}

void _objref_TucanMessage::setRecipients(const char* type, const TucanAddressSeq& addresses)
{
  _0RL_cd_812ed87905f9c760_77000000 _call_desc(_0RL_lcfn_812ed87905f9c760_87000000, "setRecipients", 14, 0, type, addresses);
  
  _invoke(_call_desc);
  
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cTucanAddress_e_cTucanException
class _0RL_cd_812ed87905f9c760_97000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_97000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const char* a_0, TucanAddress_ptr a_1):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0),
     arg_1(a_1) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void userException(GIOP_C&, const char*);
  
  const char* arg_0;
  TucanAddress_ptr arg_1;
  
};

CORBA::ULong _0RL_cd_812ed87905f9c760_97000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_0) ? strlen((const char*) arg_0) + 1 : 1;
  
  msgsize = TucanAddress_Helper::NP_alignedSize(arg_1, msgsize);
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_97000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_0)? strlen((const char*) arg_0) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_0),_len);
    else {
      if ((const char*) arg_0 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  TucanAddress_Helper::marshalObjRef(arg_1,giop_client);
  
}

void _0RL_cd_812ed87905f9c760_97000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_a7000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_97000000* tcd = (_0RL_cd_812ed87905f9c760_97000000*) cd;
  _impl_TucanMessage* impl = (_impl_TucanMessage*) svnt->_ptrToInterface(TucanMessage::_PD_repoId);
  impl->setRecipient(tcd->arg_0, tcd->arg_1);
}

void _objref_TucanMessage::setRecipient(const char* type, TucanAddress_ptr address)
{
  _0RL_cd_812ed87905f9c760_97000000 _call_desc(_0RL_lcfn_812ed87905f9c760_a7000000, "setRecipient", 13, 0, type, address);
  
  _invoke(_call_desc);
  
}

// Proxy call descriptor class. Mangled signature:
//  _cTucanAddressSeq_e_cTucanException
class _0RL_cd_812ed87905f9c760_b7000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_b7000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  virtual void userException(GIOP_C&, const char*);
  
  inline TucanAddressSeq* result() { return pd_result; }
  
  TucanAddressSeq* pd_result;
};

void _0RL_cd_812ed87905f9c760_b7000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = new TucanAddressSeq;
  
  *pd_result <<= giop_client;
  
}

void _0RL_cd_812ed87905f9c760_b7000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_c7000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_b7000000* tcd = (_0RL_cd_812ed87905f9c760_b7000000*) cd;
  _impl_TucanMessage* impl = (_impl_TucanMessage*) svnt->_ptrToInterface(TucanMessage::_PD_repoId);
  tcd->pd_result = impl->getAllRecipients();
}

TucanAddressSeq* _objref_TucanMessage::getAllRecipients()
{
  _0RL_cd_812ed87905f9c760_b7000000 _call_desc(_0RL_lcfn_812ed87905f9c760_c7000000, "getAllRecipients", 17, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_d7000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_97000000* tcd = (_0RL_cd_812ed87905f9c760_97000000*) cd;
  _impl_TucanMessage* impl = (_impl_TucanMessage*) svnt->_ptrToInterface(TucanMessage::_PD_repoId);
  impl->addRecipient(tcd->arg_0, tcd->arg_1);
}

void _objref_TucanMessage::addRecipient(const char* type, TucanAddress_ptr address)
{
  _0RL_cd_812ed87905f9c760_97000000 _call_desc(_0RL_lcfn_812ed87905f9c760_d7000000, "addRecipient", 13, 0, type, address);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_e7000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_77000000* tcd = (_0RL_cd_812ed87905f9c760_77000000*) cd;
  _impl_TucanMessage* impl = (_impl_TucanMessage*) svnt->_ptrToInterface(TucanMessage::_PD_repoId);
  impl->addRecipients(tcd->arg_0, tcd->arg_1);
}

void _objref_TucanMessage::addRecipients(const char* type, const TucanAddressSeq& addresses)
{
  _0RL_cd_812ed87905f9c760_77000000 _call_desc(_0RL_lcfn_812ed87905f9c760_e7000000, "addRecipients", 14, 0, type, addresses);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_f7000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_80000000* tcd = (_0RL_cd_812ed87905f9c760_80000000*) cd;
  _impl_TucanMessage* impl = (_impl_TucanMessage*) svnt->_ptrToInterface(TucanMessage::_PD_repoId);
  tcd->pd_result = impl->getReplyTo();
}

TucanAddress_ptr _objref_TucanMessage::getReplyTo()
{
  _0RL_cd_812ed87905f9c760_80000000 _call_desc(_0RL_lcfn_812ed87905f9c760_f7000000, "getReplyTo", 11, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_08000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_27000000* tcd = (_0RL_cd_812ed87905f9c760_27000000*) cd;
  _impl_TucanMessage* impl = (_impl_TucanMessage*) svnt->_ptrToInterface(TucanMessage::_PD_repoId);
  impl->setReplyTo(tcd->arg_0);
}

void _objref_TucanMessage::setReplyTo(TucanAddress_ptr address)
{
  _0RL_cd_812ed87905f9c760_27000000 _call_desc(_0RL_lcfn_812ed87905f9c760_08000000, "setReplyTo", 11, 0, address);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_18000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_00000000* tcd = (_0RL_cd_812ed87905f9c760_00000000*) cd;
  _impl_TucanMessage* impl = (_impl_TucanMessage*) svnt->_ptrToInterface(TucanMessage::_PD_repoId);
  tcd->pd_result = impl->getSubject();
}

char* _objref_TucanMessage::getSubject()
{
  _0RL_cd_812ed87905f9c760_00000000 _call_desc(_0RL_lcfn_812ed87905f9c760_18000000, "getSubject", 11, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_28000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_20000000* tcd = (_0RL_cd_812ed87905f9c760_20000000*) cd;
  _impl_TucanMessage* impl = (_impl_TucanMessage*) svnt->_ptrToInterface(TucanMessage::_PD_repoId);
  impl->setSubject(tcd->arg_0);
}

void _objref_TucanMessage::setSubject(const char* subject)
{
  _0RL_cd_812ed87905f9c760_20000000 _call_desc(_0RL_lcfn_812ed87905f9c760_28000000, "setSubject", 11, 0, subject);
  
  _invoke(_call_desc);
  
}

// Proxy call descriptor class. Mangled signature:
//  _cstring_i_cstring_e_cTucanException
class _0RL_cd_812ed87905f9c760_38000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_38000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const char* a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  virtual void userException(GIOP_C&, const char*);
  
  inline char * result() { return pd_result; }
  const char* arg_0;
  char * pd_result;
};

CORBA::ULong _0RL_cd_812ed87905f9c760_38000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_0) ? strlen((const char*) arg_0) + 1 : 1;
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_38000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_0)? strlen((const char*) arg_0) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_0),_len);
    else {
      if ((const char*) arg_0 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  
}

void _0RL_cd_812ed87905f9c760_38000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  {
    CORBA::String_member _0RL_str_tmp;
    _0RL_str_tmp <<=  giop_client;
    pd_result = _0RL_str_tmp._ptr;
    _0RL_str_tmp._ptr = 0;
  }
  
}

void _0RL_cd_812ed87905f9c760_38000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_48000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_38000000* tcd = (_0RL_cd_812ed87905f9c760_38000000*) cd;
  _impl_TucanMessage* impl = (_impl_TucanMessage*) svnt->_ptrToInterface(TucanMessage::_PD_repoId);
  tcd->pd_result = impl->getSentDate(tcd->arg_0);
}

char* _objref_TucanMessage::getSentDate(const char* format)
{
  _0RL_cd_812ed87905f9c760_38000000 _call_desc(_0RL_lcfn_812ed87905f9c760_48000000, "getSentDate", 12, 0, format);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_58000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_20000000* tcd = (_0RL_cd_812ed87905f9c760_20000000*) cd;
  _impl_TucanMessage* impl = (_impl_TucanMessage*) svnt->_ptrToInterface(TucanMessage::_PD_repoId);
  impl->setSentDate(tcd->arg_0);
}

void _objref_TucanMessage::setSentDate(const char* date)
{
  _0RL_cd_812ed87905f9c760_20000000 _call_desc(_0RL_lcfn_812ed87905f9c760_58000000, "setSentDate", 12, 0, date);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_68000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_38000000* tcd = (_0RL_cd_812ed87905f9c760_38000000*) cd;
  _impl_TucanMessage* impl = (_impl_TucanMessage*) svnt->_ptrToInterface(TucanMessage::_PD_repoId);
  tcd->pd_result = impl->getReceivedDate(tcd->arg_0);
}

char* _objref_TucanMessage::getReceivedDate(const char* format)
{
  _0RL_cd_812ed87905f9c760_38000000 _call_desc(_0RL_lcfn_812ed87905f9c760_68000000, "getReceivedDate", 16, 0, format);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_78000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_20000000* tcd = (_0RL_cd_812ed87905f9c760_20000000*) cd;
  _impl_TucanMessage* impl = (_impl_TucanMessage*) svnt->_ptrToInterface(TucanMessage::_PD_repoId);
  impl->setReceivedDate(tcd->arg_0);
}

void _objref_TucanMessage::setReceivedDate(const char* date)
{
  _0RL_cd_812ed87905f9c760_20000000 _call_desc(_0RL_lcfn_812ed87905f9c760_78000000, "setReceivedDate", 16, 0, date);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_88000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_92000000* tcd = (_0RL_cd_812ed87905f9c760_92000000*) cd;
  _impl_TucanMessage* impl = (_impl_TucanMessage*) svnt->_ptrToInterface(TucanMessage::_PD_repoId);
  tcd->pd_result = impl->getMessageNumber();
}

CORBA::Long _objref_TucanMessage::getMessageNumber()
{
  _0RL_cd_812ed87905f9c760_92000000 _call_desc(_0RL_lcfn_812ed87905f9c760_88000000, "getMessageNumber", 17, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_98000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_f5000000* tcd = (_0RL_cd_812ed87905f9c760_f5000000*) cd;
  _impl_TucanMessage* impl = (_impl_TucanMessage*) svnt->_ptrToInterface(TucanMessage::_PD_repoId);
  impl->setMessageNumber(tcd->arg_0);
}

void _objref_TucanMessage::setMessageNumber(CORBA::Long msgnum)
{
  _0RL_cd_812ed87905f9c760_f5000000 _call_desc(_0RL_lcfn_812ed87905f9c760_98000000, "setMessageNumber", 17, 0, msgnum);
  
  _invoke(_call_desc);
  
}

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_clong_e_cTucanException
class _0RL_cd_812ed87905f9c760_a8000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_a8000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, CORBA::Long a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  virtual void userException(GIOP_C&, const char*);
  
  inline CORBA::Boolean result() { return pd_result; }
  CORBA::Long arg_0;
  CORBA::Boolean pd_result;
};

CORBA::ULong _0RL_cd_812ed87905f9c760_a8000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_a8000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  
}

void _0RL_cd_812ed87905f9c760_a8000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result <<= giop_client;
  
}

void _0RL_cd_812ed87905f9c760_a8000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_b8000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_a8000000* tcd = (_0RL_cd_812ed87905f9c760_a8000000*) cd;
  _impl_TucanMessage* impl = (_impl_TucanMessage*) svnt->_ptrToInterface(TucanMessage::_PD_repoId);
  tcd->pd_result = impl->isFlagSet(tcd->arg_0);
}

CORBA::Boolean _objref_TucanMessage::isFlagSet(CORBA::Long flag)
{
  _0RL_cd_812ed87905f9c760_a8000000 _call_desc(_0RL_lcfn_812ed87905f9c760_b8000000, "isFlagSet", 10, 0, flag);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_c8000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_f5000000* tcd = (_0RL_cd_812ed87905f9c760_f5000000*) cd;
  _impl_TucanMessage* impl = (_impl_TucanMessage*) svnt->_ptrToInterface(TucanMessage::_PD_repoId);
  impl->setFlags(tcd->arg_0);
}

void _objref_TucanMessage::setFlags(CORBA::Long flags)
{
  _0RL_cd_812ed87905f9c760_f5000000 _call_desc(_0RL_lcfn_812ed87905f9c760_c8000000, "setFlags", 9, 0, flags);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_d8000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_f5000000* tcd = (_0RL_cd_812ed87905f9c760_f5000000*) cd;
  _impl_TucanMessage* impl = (_impl_TucanMessage*) svnt->_ptrToInterface(TucanMessage::_PD_repoId);
  impl->setFlagOn(tcd->arg_0);
}

void _objref_TucanMessage::setFlagOn(CORBA::Long flag)
{
  _0RL_cd_812ed87905f9c760_f5000000 _call_desc(_0RL_lcfn_812ed87905f9c760_d8000000, "setFlagOn", 10, 0, flag);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_e8000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_f5000000* tcd = (_0RL_cd_812ed87905f9c760_f5000000*) cd;
  _impl_TucanMessage* impl = (_impl_TucanMessage*) svnt->_ptrToInterface(TucanMessage::_PD_repoId);
  impl->setFlagOff(tcd->arg_0);
}

void _objref_TucanMessage::setFlagOff(CORBA::Long flag)
{
  _0RL_cd_812ed87905f9c760_f5000000 _call_desc(_0RL_lcfn_812ed87905f9c760_e8000000, "setFlagOff", 11, 0, flag);
  
  _invoke(_call_desc);
  
}

// Proxy call descriptor class. Mangled signature:
//  _cTucanMessage_i_cboolean_e_cTucanException
class _0RL_cd_812ed87905f9c760_f8000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_f8000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, CORBA::Boolean a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  virtual void userException(GIOP_C&, const char*);
  
  inline TucanMessage_ptr result() { return pd_result; }
  CORBA::Boolean arg_0;
  TucanMessage_ptr pd_result;
};

CORBA::ULong _0RL_cd_812ed87905f9c760_f8000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize += 1;
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_f8000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  
}

void _0RL_cd_812ed87905f9c760_f8000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = TucanMessage_Helper::unmarshalObjRef(giop_client);
  
}

void _0RL_cd_812ed87905f9c760_f8000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_09000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_f8000000* tcd = (_0RL_cd_812ed87905f9c760_f8000000*) cd;
  _impl_TucanMessage* impl = (_impl_TucanMessage*) svnt->_ptrToInterface(TucanMessage::_PD_repoId);
  tcd->pd_result = impl->reply(tcd->arg_0);
}

TucanMessage_ptr _objref_TucanMessage::reply(CORBA::Boolean replytoall)
{
  _0RL_cd_812ed87905f9c760_f8000000 _call_desc(_0RL_lcfn_812ed87905f9c760_09000000, "reply", 6, 0, replytoall);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_19000000(omniCallDescriptor* cd, omniServant* svnt)
{
  
  _impl_TucanMessage* impl = (_impl_TucanMessage*) svnt->_ptrToInterface(TucanMessage::_PD_repoId);
  impl->destroy();
}

void _objref_TucanMessage::destroy()
{
  _0RL_cd_812ed87905f9c760_60000000 _call_desc(_0RL_lcfn_812ed87905f9c760_19000000, "destroy", 8, 0);
  
  _invoke(_call_desc);
  
}

_pof_TucanMessage::~_pof_TucanMessage() {}

omniObjRef*
_pof_TucanMessage::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanMessage(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanMessage::is_a(const char* id) const
{
  if( !strcmp(id, TucanMessage::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanMessage _the_pof_TucanMessage;

_impl_TucanMessage::~_impl_TucanMessage() {}

CORBA::Boolean
_impl_TucanMessage::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "getData") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    TucanRawData_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getData();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      *(result.operator->()) >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getDataObject") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    TucanData_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getDataObject();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = TucanData_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      TucanData_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setDataObject") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    TucanData_var arg_data;
    
    arg_data = TucanData_Helper::unmarshalObjRef(giop_s);
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->setDataObject(arg_data.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getNewDataObject") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    TucanData_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getNewDataObject();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = TucanData_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      TucanData_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getFrom") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    TucanAddress_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getFrom();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = TucanAddress_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      TucanAddress_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setFrom") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    TucanAddress_var arg_fromname;
    
    arg_fromname = TucanAddress_Helper::unmarshalObjRef(giop_s);
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->setFrom(arg_fromname.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getNewAddressObject") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    TucanAddress_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getNewAddressObject();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = TucanAddress_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      TucanAddress_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getRecipients") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::String_var arg_type;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_type = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    TucanAddressSeq_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getRecipients(arg_type.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      *(result.operator->()) >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setRecipients") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::String_var arg_type;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_type = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    TucanAddressSeq arg_addresses;
    
    arg_addresses <<= giop_s;
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->setRecipients(arg_type.in(), arg_addresses);
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setRecipient") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::String_var arg_type;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_type = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    TucanAddress_var arg_address;
    
    arg_address = TucanAddress_Helper::unmarshalObjRef(giop_s);
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->setRecipient(arg_type.in(), arg_address.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getAllRecipients") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    TucanAddressSeq_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getAllRecipients();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      *(result.operator->()) >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "addRecipient") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::String_var arg_type;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_type = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    TucanAddress_var arg_address;
    
    arg_address = TucanAddress_Helper::unmarshalObjRef(giop_s);
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->addRecipient(arg_type.in(), arg_address.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "addRecipients") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::String_var arg_type;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_type = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    TucanAddressSeq arg_addresses;
    
    arg_addresses <<= giop_s;
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->addRecipients(arg_type.in(), arg_addresses);
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getReplyTo") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    TucanAddress_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getReplyTo();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = TucanAddress_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      TucanAddress_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setReplyTo") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    TucanAddress_var arg_address;
    
    arg_address = TucanAddress_Helper::unmarshalObjRef(giop_s);
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->setReplyTo(arg_address.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getSubject") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    CORBA::String_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getSubject();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      msgsize += ((const char*) result) ? strlen((const char*) result) + 1 : 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      {
        CORBA::ULong _len = (((const char*) result)? strlen((const char*) result) + 1 : 1);
        
        _len >>= giop_s;
        if (_len > 1)
          giop_s.put_char_array((const CORBA::Char *)((const char*)result),_len);
        else {
          if ((const char*) result == 0 && omniORB::traceLevel > 1)
            _CORBA_null_string_ptr(0);
          CORBA::Char('\0') >>= giop_s;
        }
      }
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setSubject") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::String_var arg_subject;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_subject = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->setSubject(arg_subject.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getSentDate") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::String_var arg_format;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_format = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    CORBA::String_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getSentDate(arg_format.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      msgsize += ((const char*) result) ? strlen((const char*) result) + 1 : 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      {
        CORBA::ULong _len = (((const char*) result)? strlen((const char*) result) + 1 : 1);
        
        _len >>= giop_s;
        if (_len > 1)
          giop_s.put_char_array((const CORBA::Char *)((const char*)result),_len);
        else {
          if ((const char*) result == 0 && omniORB::traceLevel > 1)
            _CORBA_null_string_ptr(0);
          CORBA::Char('\0') >>= giop_s;
        }
      }
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setSentDate") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::String_var arg_date;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_date = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->setSentDate(arg_date.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getReceivedDate") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::String_var arg_format;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_format = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    CORBA::String_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getReceivedDate(arg_format.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      msgsize += ((const char*) result) ? strlen((const char*) result) + 1 : 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      {
        CORBA::ULong _len = (((const char*) result)? strlen((const char*) result) + 1 : 1);
        
        _len >>= giop_s;
        if (_len > 1)
          giop_s.put_char_array((const CORBA::Char *)((const char*)result),_len);
        else {
          if ((const char*) result == 0 && omniORB::traceLevel > 1)
            _CORBA_null_string_ptr(0);
          CORBA::Char('\0') >>= giop_s;
        }
      }
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setReceivedDate") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::String_var arg_date;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_date = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->setReceivedDate(arg_date.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getMessageNumber") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    CORBA::Long result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getMessageNumber();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setMessageNumber") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::Long arg_msgnum;
    
    arg_msgnum <<= giop_s;
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->setMessageNumber(arg_msgnum);
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "isFlagSet") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::Long arg_flag;
    
    arg_flag <<= giop_s;
    
    giop_s.RequestReceived();
    CORBA::Boolean result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->isFlagSet(arg_flag);
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize += 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setFlags") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::Long arg_flags;
    
    arg_flags <<= giop_s;
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->setFlags(arg_flags);
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setFlagOn") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::Long arg_flag;
    
    arg_flag <<= giop_s;
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->setFlagOn(arg_flag);
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setFlagOff") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::Long arg_flag;
    
    arg_flag <<= giop_s;
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->setFlagOff(arg_flag);
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "reply") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::Boolean arg_replytoall;
    
    arg_replytoall <<= giop_s;
    
    giop_s.RequestReceived();
    TucanMessage_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->reply(arg_replytoall);
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = TucanMessage_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      TucanMessage_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "destroy") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->destroy();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  return 0;
}

void*
_impl_TucanMessage::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanMessage::_PD_repoId) )
    return (_impl_TucanMessage*) this;
  
  return 0;
}

const char*
_impl_TucanMessage::_mostDerivedRepoId()
{
  return TucanMessage::_PD_repoId;
}

TucanMessageFactory_ptr TucanMessageFactory_Helper::_nil() {
  return TucanMessageFactory::_nil();
}

CORBA::Boolean TucanMessageFactory_Helper::is_nil(TucanMessageFactory_ptr p) {
  return CORBA::is_nil(p);

}

void TucanMessageFactory_Helper::release(TucanMessageFactory_ptr p) {
  CORBA::release(p);
}

void TucanMessageFactory_Helper::duplicate(TucanMessageFactory_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanMessageFactory_Helper::NP_alignedSize(TucanMessageFactory_ptr obj, size_t offset) {
  return TucanMessageFactory::_alignedSize(obj, offset);
}

void TucanMessageFactory_Helper::marshalObjRef(TucanMessageFactory_ptr obj, NetBufferedStream& s) {
  TucanMessageFactory::_marshalObjRef(obj, s);
}

TucanMessageFactory_ptr TucanMessageFactory_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanMessageFactory::_unmarshalObjRef(s);
}

void TucanMessageFactory_Helper::marshalObjRef(TucanMessageFactory_ptr obj, MemBufferedStream& s) {
  TucanMessageFactory::_marshalObjRef(obj, s);
}

TucanMessageFactory_ptr TucanMessageFactory_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanMessageFactory::_unmarshalObjRef(s);
}

TucanMessageFactory_ptr
TucanMessageFactory::_duplicate(TucanMessageFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanMessageFactory_ptr
TucanMessageFactory::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanMessageFactory_ptr
TucanMessageFactory::_nil()
{
  static _objref_TucanMessageFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanMessageFactory;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanMessageFactory::_PD_repoId = "IDL:TucanMessageFactory:1.0";

_objref_TucanMessageFactory::~_objref_TucanMessageFactory() {}

_objref_TucanMessageFactory::_objref_TucanMessageFactory(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   
   omniObjRef(TucanMessageFactory::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanMessageFactory::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanMessageFactory::_PD_repoId) )
    return (TucanMessageFactory_ptr) this;
  
  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_29000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_05000000* tcd = (_0RL_cd_812ed87905f9c760_05000000*) cd;
  _impl_TucanMessageFactory* impl = (_impl_TucanMessageFactory*) svnt->_ptrToInterface(TucanMessageFactory::_PD_repoId);
  tcd->pd_result = impl->create();
}

TucanMessage_ptr _objref_TucanMessageFactory::create()
{
  _0RL_cd_812ed87905f9c760_05000000 _call_desc(_0RL_lcfn_812ed87905f9c760_29000000, "create", 7, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

_pof_TucanMessageFactory::~_pof_TucanMessageFactory() {}

omniObjRef*
_pof_TucanMessageFactory::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanMessageFactory(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanMessageFactory::is_a(const char* id) const
{
  if( !strcmp(id, TucanMessageFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanMessageFactory _the_pof_TucanMessageFactory;

_impl_TucanMessageFactory::~_impl_TucanMessageFactory() {}

CORBA::Boolean
_impl_TucanMessageFactory::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "create") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    TucanMessage_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->create();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = TucanMessage_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      TucanMessage_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  return 0;
}

void*
_impl_TucanMessageFactory::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanMessageFactory::_PD_repoId) )
    return (_impl_TucanMessageFactory*) this;
  
  return 0;
}

const char*
_impl_TucanMessageFactory::_mostDerivedRepoId()
{
  return TucanMessageFactory::_PD_repoId;
}

TucanStore_ptr TucanStore_Helper::_nil() {
  return TucanStore::_nil();
}

CORBA::Boolean TucanStore_Helper::is_nil(TucanStore_ptr p) {
  return CORBA::is_nil(p);

}

void TucanStore_Helper::release(TucanStore_ptr p) {
  CORBA::release(p);
}

void TucanStore_Helper::duplicate(TucanStore_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanStore_Helper::NP_alignedSize(TucanStore_ptr obj, size_t offset) {
  return TucanStore::_alignedSize(obj, offset);
}

void TucanStore_Helper::marshalObjRef(TucanStore_ptr obj, NetBufferedStream& s) {
  TucanStore::_marshalObjRef(obj, s);
}

TucanStore_ptr TucanStore_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanStore::_unmarshalObjRef(s);
}

void TucanStore_Helper::marshalObjRef(TucanStore_ptr obj, MemBufferedStream& s) {
  TucanStore::_marshalObjRef(obj, s);
}

TucanStore_ptr TucanStore_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanStore::_unmarshalObjRef(s);
}

TucanStore_ptr
TucanStore::_duplicate(TucanStore_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanStore_ptr
TucanStore::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanStore_ptr
TucanStore::_nil()
{
  static _objref_TucanStore* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanStore;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanStore::_PD_repoId = "IDL:TucanStore:1.0";

_objref_TucanStore::~_objref_TucanStore() {}

_objref_TucanStore::_objref_TucanStore(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   
   omniObjRef(TucanStore::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanStore::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanStore::_PD_repoId) )
    return (TucanStore_ptr) this;
  
  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_39000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_00000000* tcd = (_0RL_cd_812ed87905f9c760_00000000*) cd;
  _impl_TucanStore* impl = (_impl_TucanStore*) svnt->_ptrToInterface(TucanStore::_PD_repoId);
  tcd->pd_result = impl->getName();
}

char* _objref_TucanStore::getName()
{
  _0RL_cd_812ed87905f9c760_00000000 _call_desc(_0RL_lcfn_812ed87905f9c760_39000000, "getName", 8, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_49000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_20000000* tcd = (_0RL_cd_812ed87905f9c760_20000000*) cd;
  _impl_TucanStore* impl = (_impl_TucanStore*) svnt->_ptrToInterface(TucanStore::_PD_repoId);
  impl->setName(tcd->arg_0);
}

void _objref_TucanStore::setName(const char* name)
{
  _0RL_cd_812ed87905f9c760_20000000 _call_desc(_0RL_lcfn_812ed87905f9c760_49000000, "setName", 8, 0, name);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_59000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_e3000000* tcd = (_0RL_cd_812ed87905f9c760_e3000000*) cd;
  _impl_TucanStore* impl = (_impl_TucanStore*) svnt->_ptrToInterface(TucanStore::_PD_repoId);
  tcd->pd_result = impl->getDefaultFolder();
}

TucanFolder_ptr _objref_TucanStore::getDefaultFolder()
{
  _0RL_cd_812ed87905f9c760_e3000000 _call_desc(_0RL_lcfn_812ed87905f9c760_59000000, "getDefaultFolder", 17, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_69000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_a3000000* tcd = (_0RL_cd_812ed87905f9c760_a3000000*) cd;
  _impl_TucanStore* impl = (_impl_TucanStore*) svnt->_ptrToInterface(TucanStore::_PD_repoId);
  tcd->pd_result = impl->getFolder(tcd->arg_0);
}

TucanFolder_ptr _objref_TucanStore::getFolder(const char* name)
{
  _0RL_cd_812ed87905f9c760_a3000000 _call_desc(_0RL_lcfn_812ed87905f9c760_69000000, "getFolder", 10, 0, name);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_79000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_e3000000* tcd = (_0RL_cd_812ed87905f9c760_e3000000*) cd;
  _impl_TucanStore* impl = (_impl_TucanStore*) svnt->_ptrToInterface(TucanStore::_PD_repoId);
  tcd->pd_result = impl->getNewFolderObject();
}

TucanFolder_ptr _objref_TucanStore::getNewFolderObject()
{
  _0RL_cd_812ed87905f9c760_e3000000 _call_desc(_0RL_lcfn_812ed87905f9c760_79000000, "getNewFolderObject", 19, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_89000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_d2000000* tcd = (_0RL_cd_812ed87905f9c760_d2000000*) cd;
  _impl_TucanStore* impl = (_impl_TucanStore*) svnt->_ptrToInterface(TucanStore::_PD_repoId);
  tcd->pd_result = impl->listFolders();
}

TucanStringList* _objref_TucanStore::listFolders()
{
  _0RL_cd_812ed87905f9c760_d2000000 _call_desc(_0RL_lcfn_812ed87905f9c760_89000000, "listFolders", 12, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_99000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_71000000* tcd = (_0RL_cd_812ed87905f9c760_71000000*) cd;
  _impl_TucanStore* impl = (_impl_TucanStore*) svnt->_ptrToInterface(TucanStore::_PD_repoId);
  tcd->pd_result = impl->getAuth();
}

TucanAuth_ptr _objref_TucanStore::getAuth()
{
  _0RL_cd_812ed87905f9c760_71000000 _call_desc(_0RL_lcfn_812ed87905f9c760_99000000, "getAuth", 8, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_a9000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_26000000* tcd = (_0RL_cd_812ed87905f9c760_26000000*) cd;
  _impl_TucanStore* impl = (_impl_TucanStore*) svnt->_ptrToInterface(TucanStore::_PD_repoId);
  impl->setAuth(tcd->arg_0);
}

void _objref_TucanStore::setAuth(TucanAuth_ptr auth)
{
  _0RL_cd_812ed87905f9c760_26000000 _call_desc(_0RL_lcfn_812ed87905f9c760_a9000000, "setAuth", 8, 0, auth);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_b9000000(omniCallDescriptor* cd, omniServant* svnt)
{
  
  _impl_TucanStore* impl = (_impl_TucanStore*) svnt->_ptrToInterface(TucanStore::_PD_repoId);
  impl->destroy();
}

void _objref_TucanStore::destroy()
{
  _0RL_cd_812ed87905f9c760_60000000 _call_desc(_0RL_lcfn_812ed87905f9c760_b9000000, "destroy", 8, 0);
  
  _invoke(_call_desc);
  
}

_pof_TucanStore::~_pof_TucanStore() {}

omniObjRef*
_pof_TucanStore::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanStore(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanStore::is_a(const char* id) const
{
  if( !strcmp(id, TucanStore::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanStore _the_pof_TucanStore;

_impl_TucanStore::~_impl_TucanStore() {}

CORBA::Boolean
_impl_TucanStore::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "getName") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    CORBA::String_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getName();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      msgsize += ((const char*) result) ? strlen((const char*) result) + 1 : 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      {
        CORBA::ULong _len = (((const char*) result)? strlen((const char*) result) + 1 : 1);
        
        _len >>= giop_s;
        if (_len > 1)
          giop_s.put_char_array((const CORBA::Char *)((const char*)result),_len);
        else {
          if ((const char*) result == 0 && omniORB::traceLevel > 1)
            _CORBA_null_string_ptr(0);
          CORBA::Char('\0') >>= giop_s;
        }
      }
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setName") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::String_var arg_name;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_name = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->setName(arg_name.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getDefaultFolder") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    TucanFolder_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getDefaultFolder();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = TucanFolder_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      TucanFolder_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getFolder") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::String_var arg_name;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_name = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    TucanFolder_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getFolder(arg_name.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = TucanFolder_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      TucanFolder_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getNewFolderObject") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    TucanFolder_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getNewFolderObject();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = TucanFolder_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      TucanFolder_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "listFolders") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    TucanStringList_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->listFolders();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      *(result.operator->()) >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getAuth") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    TucanAuth_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getAuth();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = TucanAuth_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      TucanAuth_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setAuth") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    TucanAuth_var arg_auth;
    
    arg_auth = TucanAuth_Helper::unmarshalObjRef(giop_s);
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->setAuth(arg_auth.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "destroy") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->destroy();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  return 0;
}

void*
_impl_TucanStore::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanStore::_PD_repoId) )
    return (_impl_TucanStore*) this;
  
  return 0;
}

const char*
_impl_TucanStore::_mostDerivedRepoId()
{
  return TucanStore::_PD_repoId;
}

TucanStoreFactory_ptr TucanStoreFactory_Helper::_nil() {
  return TucanStoreFactory::_nil();
}

CORBA::Boolean TucanStoreFactory_Helper::is_nil(TucanStoreFactory_ptr p) {
  return CORBA::is_nil(p);

}

void TucanStoreFactory_Helper::release(TucanStoreFactory_ptr p) {
  CORBA::release(p);
}

void TucanStoreFactory_Helper::duplicate(TucanStoreFactory_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanStoreFactory_Helper::NP_alignedSize(TucanStoreFactory_ptr obj, size_t offset) {
  return TucanStoreFactory::_alignedSize(obj, offset);
}

void TucanStoreFactory_Helper::marshalObjRef(TucanStoreFactory_ptr obj, NetBufferedStream& s) {
  TucanStoreFactory::_marshalObjRef(obj, s);
}

TucanStoreFactory_ptr TucanStoreFactory_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanStoreFactory::_unmarshalObjRef(s);
}

void TucanStoreFactory_Helper::marshalObjRef(TucanStoreFactory_ptr obj, MemBufferedStream& s) {
  TucanStoreFactory::_marshalObjRef(obj, s);
}

TucanStoreFactory_ptr TucanStoreFactory_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanStoreFactory::_unmarshalObjRef(s);
}

TucanStoreFactory_ptr
TucanStoreFactory::_duplicate(TucanStoreFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanStoreFactory_ptr
TucanStoreFactory::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanStoreFactory_ptr
TucanStoreFactory::_nil()
{
  static _objref_TucanStoreFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanStoreFactory;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanStoreFactory::_PD_repoId = "IDL:TucanStoreFactory:1.0";

_objref_TucanStoreFactory::~_objref_TucanStoreFactory() {}

_objref_TucanStoreFactory::_objref_TucanStoreFactory(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   
   omniObjRef(TucanStoreFactory::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanStoreFactory::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanStoreFactory::_PD_repoId) )
    return (TucanStoreFactory_ptr) this;
  
  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cTucanStore_e_cTucanException
class _0RL_cd_812ed87905f9c760_c9000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_c9000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  virtual void userException(GIOP_C&, const char*);
  
  inline TucanStore_ptr result() { return pd_result; }
  
  TucanStore_ptr pd_result;
};

void _0RL_cd_812ed87905f9c760_c9000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = TucanStore_Helper::unmarshalObjRef(giop_client);
  
}

void _0RL_cd_812ed87905f9c760_c9000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_d9000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_c9000000* tcd = (_0RL_cd_812ed87905f9c760_c9000000*) cd;
  _impl_TucanStoreFactory* impl = (_impl_TucanStoreFactory*) svnt->_ptrToInterface(TucanStoreFactory::_PD_repoId);
  tcd->pd_result = impl->create();
}

TucanStore_ptr _objref_TucanStoreFactory::create()
{
  _0RL_cd_812ed87905f9c760_c9000000 _call_desc(_0RL_lcfn_812ed87905f9c760_d9000000, "create", 7, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

_pof_TucanStoreFactory::~_pof_TucanStoreFactory() {}

omniObjRef*
_pof_TucanStoreFactory::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanStoreFactory(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanStoreFactory::is_a(const char* id) const
{
  if( !strcmp(id, TucanStoreFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanStoreFactory _the_pof_TucanStoreFactory;

_impl_TucanStoreFactory::~_impl_TucanStoreFactory() {}

CORBA::Boolean
_impl_TucanStoreFactory::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "create") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    TucanStore_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->create();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = TucanStore_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      TucanStore_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  return 0;
}

void*
_impl_TucanStoreFactory::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanStoreFactory::_PD_repoId) )
    return (_impl_TucanStoreFactory*) this;
  
  return 0;
}

const char*
_impl_TucanStoreFactory::_mostDerivedRepoId()
{
  return TucanStoreFactory::_PD_repoId;
}

TucanTransport_ptr TucanTransport_Helper::_nil() {
  return TucanTransport::_nil();
}

CORBA::Boolean TucanTransport_Helper::is_nil(TucanTransport_ptr p) {
  return CORBA::is_nil(p);

}

void TucanTransport_Helper::release(TucanTransport_ptr p) {
  CORBA::release(p);
}

void TucanTransport_Helper::duplicate(TucanTransport_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanTransport_Helper::NP_alignedSize(TucanTransport_ptr obj, size_t offset) {
  return TucanTransport::_alignedSize(obj, offset);
}

void TucanTransport_Helper::marshalObjRef(TucanTransport_ptr obj, NetBufferedStream& s) {
  TucanTransport::_marshalObjRef(obj, s);
}

TucanTransport_ptr TucanTransport_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanTransport::_unmarshalObjRef(s);
}

void TucanTransport_Helper::marshalObjRef(TucanTransport_ptr obj, MemBufferedStream& s) {
  TucanTransport::_marshalObjRef(obj, s);
}

TucanTransport_ptr TucanTransport_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanTransport::_unmarshalObjRef(s);
}

TucanTransport_ptr
TucanTransport::_duplicate(TucanTransport_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanTransport_ptr
TucanTransport::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanTransport_ptr
TucanTransport::_nil()
{
  static _objref_TucanTransport* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanTransport;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanTransport::_PD_repoId = "IDL:TucanTransport:1.0";

_objref_TucanTransport::~_objref_TucanTransport() {}

_objref_TucanTransport::_objref_TucanTransport(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   
   omniObjRef(TucanTransport::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanTransport::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanTransport::_PD_repoId) )
    return (TucanTransport_ptr) this;
  
  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_e9000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_b5000000* tcd = (_0RL_cd_812ed87905f9c760_b5000000*) cd;
  _impl_TucanTransport* impl = (_impl_TucanTransport*) svnt->_ptrToInterface(TucanTransport::_PD_repoId);
  impl->send(tcd->arg_0);
}

void _objref_TucanTransport::send(TucanMessage_ptr msg)
{
  _0RL_cd_812ed87905f9c760_b5000000 _call_desc(_0RL_lcfn_812ed87905f9c760_e9000000, "send", 5, 0, msg);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_f9000000(omniCallDescriptor* cd, omniServant* svnt)
{
  
  _impl_TucanTransport* impl = (_impl_TucanTransport*) svnt->_ptrToInterface(TucanTransport::_PD_repoId);
  impl->destroy();
}

void _objref_TucanTransport::destroy()
{
  _0RL_cd_812ed87905f9c760_60000000 _call_desc(_0RL_lcfn_812ed87905f9c760_f9000000, "destroy", 8, 0);
  
  _invoke(_call_desc);
  
}

_pof_TucanTransport::~_pof_TucanTransport() {}

omniObjRef*
_pof_TucanTransport::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanTransport(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanTransport::is_a(const char* id) const
{
  if( !strcmp(id, TucanTransport::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanTransport _the_pof_TucanTransport;

_impl_TucanTransport::~_impl_TucanTransport() {}

CORBA::Boolean
_impl_TucanTransport::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "send") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    TucanMessage_var arg_msg;
    
    arg_msg = TucanMessage_Helper::unmarshalObjRef(giop_s);
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->send(arg_msg.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "destroy") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->destroy();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  return 0;
}

void*
_impl_TucanTransport::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanTransport::_PD_repoId) )
    return (_impl_TucanTransport*) this;
  
  return 0;
}

const char*
_impl_TucanTransport::_mostDerivedRepoId()
{
  return TucanTransport::_PD_repoId;
}

TucanTransportFactory_ptr TucanTransportFactory_Helper::_nil() {
  return TucanTransportFactory::_nil();
}

CORBA::Boolean TucanTransportFactory_Helper::is_nil(TucanTransportFactory_ptr p) {
  return CORBA::is_nil(p);

}

void TucanTransportFactory_Helper::release(TucanTransportFactory_ptr p) {
  CORBA::release(p);
}

void TucanTransportFactory_Helper::duplicate(TucanTransportFactory_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanTransportFactory_Helper::NP_alignedSize(TucanTransportFactory_ptr obj, size_t offset) {
  return TucanTransportFactory::_alignedSize(obj, offset);
}

void TucanTransportFactory_Helper::marshalObjRef(TucanTransportFactory_ptr obj, NetBufferedStream& s) {
  TucanTransportFactory::_marshalObjRef(obj, s);
}

TucanTransportFactory_ptr TucanTransportFactory_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanTransportFactory::_unmarshalObjRef(s);
}

void TucanTransportFactory_Helper::marshalObjRef(TucanTransportFactory_ptr obj, MemBufferedStream& s) {
  TucanTransportFactory::_marshalObjRef(obj, s);
}

TucanTransportFactory_ptr TucanTransportFactory_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanTransportFactory::_unmarshalObjRef(s);
}

TucanTransportFactory_ptr
TucanTransportFactory::_duplicate(TucanTransportFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanTransportFactory_ptr
TucanTransportFactory::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanTransportFactory_ptr
TucanTransportFactory::_nil()
{
  static _objref_TucanTransportFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanTransportFactory;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanTransportFactory::_PD_repoId = "IDL:TucanTransportFactory:1.0";

_objref_TucanTransportFactory::~_objref_TucanTransportFactory() {}

_objref_TucanTransportFactory::_objref_TucanTransportFactory(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   
   omniObjRef(TucanTransportFactory::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanTransportFactory::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanTransportFactory::_PD_repoId) )
    return (TucanTransportFactory_ptr) this;
  
  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cTucanTransport
class _0RL_cd_812ed87905f9c760_0a000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_0a000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline TucanTransport_ptr result() { return pd_result; }
  
  TucanTransport_ptr pd_result;
};

void _0RL_cd_812ed87905f9c760_0a000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = TucanTransport_Helper::unmarshalObjRef(giop_client);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_1a000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_0a000000* tcd = (_0RL_cd_812ed87905f9c760_0a000000*) cd;
  _impl_TucanTransportFactory* impl = (_impl_TucanTransportFactory*) svnt->_ptrToInterface(TucanTransportFactory::_PD_repoId);
  tcd->pd_result = impl->create();
}

TucanTransport_ptr _objref_TucanTransportFactory::create()
{
  _0RL_cd_812ed87905f9c760_0a000000 _call_desc(_0RL_lcfn_812ed87905f9c760_1a000000, "create", 7, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

_pof_TucanTransportFactory::~_pof_TucanTransportFactory() {}

omniObjRef*
_pof_TucanTransportFactory::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanTransportFactory(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanTransportFactory::is_a(const char* id) const
{
  if( !strcmp(id, TucanTransportFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanTransportFactory _the_pof_TucanTransportFactory;

_impl_TucanTransportFactory::~_impl_TucanTransportFactory() {}

CORBA::Boolean
_impl_TucanTransportFactory::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "create") ) {
    
    giop_s.RequestReceived();
    TucanTransport_var result;
    
    result = this->create();
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = TucanTransport_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      TucanTransport_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  return 0;
}

void*
_impl_TucanTransportFactory::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanTransportFactory::_PD_repoId) )
    return (_impl_TucanTransportFactory*) this;
  
  return 0;
}

const char*
_impl_TucanTransportFactory::_mostDerivedRepoId()
{
  return TucanTransportFactory::_PD_repoId;
}

TucanSession_ptr TucanSession_Helper::_nil() {
  return TucanSession::_nil();
}

CORBA::Boolean TucanSession_Helper::is_nil(TucanSession_ptr p) {
  return CORBA::is_nil(p);

}

void TucanSession_Helper::release(TucanSession_ptr p) {
  CORBA::release(p);
}

void TucanSession_Helper::duplicate(TucanSession_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanSession_Helper::NP_alignedSize(TucanSession_ptr obj, size_t offset) {
  return TucanSession::_alignedSize(obj, offset);
}

void TucanSession_Helper::marshalObjRef(TucanSession_ptr obj, NetBufferedStream& s) {
  TucanSession::_marshalObjRef(obj, s);
}

TucanSession_ptr TucanSession_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanSession::_unmarshalObjRef(s);
}

void TucanSession_Helper::marshalObjRef(TucanSession_ptr obj, MemBufferedStream& s) {
  TucanSession::_marshalObjRef(obj, s);
}

TucanSession_ptr TucanSession_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanSession::_unmarshalObjRef(s);
}

TucanSession_ptr
TucanSession::_duplicate(TucanSession_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanSession_ptr
TucanSession::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanSession_ptr
TucanSession::_nil()
{
  static _objref_TucanSession* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanSession;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanSession::_PD_repoId = "IDL:TucanSession:1.0";

_objref_TucanSession::~_objref_TucanSession() {}

_objref_TucanSession::_objref_TucanSession(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   
   omniObjRef(TucanSession::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanSession::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanSession::_PD_repoId) )
    return (TucanSession_ptr) this;
  
  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_2a000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_71000000* tcd = (_0RL_cd_812ed87905f9c760_71000000*) cd;
  _impl_TucanSession* impl = (_impl_TucanSession*) svnt->_ptrToInterface(TucanSession::_PD_repoId);
  tcd->pd_result = impl->getAuth();
}

TucanAuth_ptr _objref_TucanSession::getAuth()
{
  _0RL_cd_812ed87905f9c760_71000000 _call_desc(_0RL_lcfn_812ed87905f9c760_2a000000, "getAuth", 8, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cTucanAuth_e_cTucanAuthException_e_cTucanException
class _0RL_cd_812ed87905f9c760_3a000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_3a000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, TucanAuth_ptr a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void userException(GIOP_C&, const char*);
  
  TucanAuth_ptr arg_0;
  
};

CORBA::ULong _0RL_cd_812ed87905f9c760_3a000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = TucanAuth_Helper::NP_alignedSize(arg_0, msgsize);
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_3a000000::marshalArguments(GIOP_C& giop_client)
{
  TucanAuth_Helper::marshalObjRef(arg_0,giop_client);
  
}

void _0RL_cd_812ed87905f9c760_3a000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else if( strcmp(repoId, TucanAuthException::_PD_repoId) == 0 ) {
    TucanAuthException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_4a000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_3a000000* tcd = (_0RL_cd_812ed87905f9c760_3a000000*) cd;
  _impl_TucanSession* impl = (_impl_TucanSession*) svnt->_ptrToInterface(TucanSession::_PD_repoId);
  impl->authorize(tcd->arg_0);
}

void _objref_TucanSession::authorize(TucanAuth_ptr auth)
{
  _0RL_cd_812ed87905f9c760_3a000000 _call_desc(_0RL_lcfn_812ed87905f9c760_4a000000, "authorize", 10, 0, auth);
  
  _invoke(_call_desc);
  
}

// Proxy call descriptor class. Mangled signature:
//  _cTucanStore_e_cTucanAuthException_e_cTucanException
class _0RL_cd_812ed87905f9c760_5a000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_5a000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  virtual void userException(GIOP_C&, const char*);
  
  inline TucanStore_ptr result() { return pd_result; }
  
  TucanStore_ptr pd_result;
};

void _0RL_cd_812ed87905f9c760_5a000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = TucanStore_Helper::unmarshalObjRef(giop_client);
  
}

void _0RL_cd_812ed87905f9c760_5a000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else if( strcmp(repoId, TucanAuthException::_PD_repoId) == 0 ) {
    TucanAuthException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_6a000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_5a000000* tcd = (_0RL_cd_812ed87905f9c760_5a000000*) cd;
  _impl_TucanSession* impl = (_impl_TucanSession*) svnt->_ptrToInterface(TucanSession::_PD_repoId);
  tcd->pd_result = impl->getDefaultStore();
}

TucanStore_ptr _objref_TucanSession::getDefaultStore()
{
  _0RL_cd_812ed87905f9c760_5a000000 _call_desc(_0RL_lcfn_812ed87905f9c760_6a000000, "getDefaultStore", 16, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cTucanStore_i_cstring_e_cTucanAuthException_e_cTucanException
class _0RL_cd_812ed87905f9c760_7a000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_7a000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const char* a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  virtual void userException(GIOP_C&, const char*);
  
  inline TucanStore_ptr result() { return pd_result; }
  const char* arg_0;
  TucanStore_ptr pd_result;
};

CORBA::ULong _0RL_cd_812ed87905f9c760_7a000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_0) ? strlen((const char*) arg_0) + 1 : 1;
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_7a000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_0)? strlen((const char*) arg_0) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_0),_len);
    else {
      if ((const char*) arg_0 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  
}

void _0RL_cd_812ed87905f9c760_7a000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = TucanStore_Helper::unmarshalObjRef(giop_client);
  
}

void _0RL_cd_812ed87905f9c760_7a000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else if( strcmp(repoId, TucanAuthException::_PD_repoId) == 0 ) {
    TucanAuthException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_8a000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_7a000000* tcd = (_0RL_cd_812ed87905f9c760_7a000000*) cd;
  _impl_TucanSession* impl = (_impl_TucanSession*) svnt->_ptrToInterface(TucanSession::_PD_repoId);
  tcd->pd_result = impl->getStoreByProtocol(tcd->arg_0);
}

TucanStore_ptr _objref_TucanSession::getStoreByProtocol(const char* proto)
{
  _0RL_cd_812ed87905f9c760_7a000000 _call_desc(_0RL_lcfn_812ed87905f9c760_8a000000, "getStoreByProtocol", 19, 0, proto);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cTucanTransport_e_cTucanAuthException_e_cTucanException
class _0RL_cd_812ed87905f9c760_9a000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_9a000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  virtual void userException(GIOP_C&, const char*);
  
  inline TucanTransport_ptr result() { return pd_result; }
  
  TucanTransport_ptr pd_result;
};

void _0RL_cd_812ed87905f9c760_9a000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = TucanTransport_Helper::unmarshalObjRef(giop_client);
  
}

void _0RL_cd_812ed87905f9c760_9a000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else if( strcmp(repoId, TucanAuthException::_PD_repoId) == 0 ) {
    TucanAuthException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_aa000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_9a000000* tcd = (_0RL_cd_812ed87905f9c760_9a000000*) cd;
  _impl_TucanSession* impl = (_impl_TucanSession*) svnt->_ptrToInterface(TucanSession::_PD_repoId);
  tcd->pd_result = impl->getDefaultTransport();
}

TucanTransport_ptr _objref_TucanSession::getDefaultTransport()
{
  _0RL_cd_812ed87905f9c760_9a000000 _call_desc(_0RL_lcfn_812ed87905f9c760_aa000000, "getDefaultTransport", 20, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cTucanTransport_i_cstring_e_cTucanAuthException_e_cTucanException
class _0RL_cd_812ed87905f9c760_ba000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_ba000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const char* a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  virtual void userException(GIOP_C&, const char*);
  
  inline TucanTransport_ptr result() { return pd_result; }
  const char* arg_0;
  TucanTransport_ptr pd_result;
};

CORBA::ULong _0RL_cd_812ed87905f9c760_ba000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_0) ? strlen((const char*) arg_0) + 1 : 1;
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_ba000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_0)? strlen((const char*) arg_0) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_0),_len);
    else {
      if ((const char*) arg_0 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  
}

void _0RL_cd_812ed87905f9c760_ba000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = TucanTransport_Helper::unmarshalObjRef(giop_client);
  
}

void _0RL_cd_812ed87905f9c760_ba000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else if( strcmp(repoId, TucanAuthException::_PD_repoId) == 0 ) {
    TucanAuthException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_ca000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_ba000000* tcd = (_0RL_cd_812ed87905f9c760_ba000000*) cd;
  _impl_TucanSession* impl = (_impl_TucanSession*) svnt->_ptrToInterface(TucanSession::_PD_repoId);
  tcd->pd_result = impl->getTransportByProtocol(tcd->arg_0);
}

TucanTransport_ptr _objref_TucanSession::getTransportByProtocol(const char* proto)
{
  _0RL_cd_812ed87905f9c760_ba000000 _call_desc(_0RL_lcfn_812ed87905f9c760_ca000000, "getTransportByProtocol", 23, 0, proto);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cboolean_e_cTucanAuthException_e_cTucanException
class _0RL_cd_812ed87905f9c760_da000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_da000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  virtual void userException(GIOP_C&, const char*);
  
  inline CORBA::Boolean result() { return pd_result; }
  
  CORBA::Boolean pd_result;
};

void _0RL_cd_812ed87905f9c760_da000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result <<= giop_client;
  
}

void _0RL_cd_812ed87905f9c760_da000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else if( strcmp(repoId, TucanAuthException::_PD_repoId) == 0 ) {
    TucanAuthException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_ea000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_da000000* tcd = (_0RL_cd_812ed87905f9c760_da000000*) cd;
  _impl_TucanSession* impl = (_impl_TucanSession*) svnt->_ptrToInterface(TucanSession::_PD_repoId);
  tcd->pd_result = impl->isAdmin();
}

CORBA::Boolean _objref_TucanSession::isAdmin()
{
  _0RL_cd_812ed87905f9c760_da000000 _call_desc(_0RL_lcfn_812ed87905f9c760_ea000000, "isAdmin", 8, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_fa000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_41000000* tcd = (_0RL_cd_812ed87905f9c760_41000000*) cd;
  _impl_TucanSession* impl = (_impl_TucanSession*) svnt->_ptrToInterface(TucanSession::_PD_repoId);
  impl->setNewPinNumber(tcd->arg_0);
}

void _objref_TucanSession::setNewPinNumber(CORBA::Long newpin)
{
  _0RL_cd_812ed87905f9c760_41000000 _call_desc(_0RL_lcfn_812ed87905f9c760_fa000000, "setNewPinNumber", 16, 0, newpin);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_0b000000(omniCallDescriptor* cd, omniServant* svnt)
{
  
  _impl_TucanSession* impl = (_impl_TucanSession*) svnt->_ptrToInterface(TucanSession::_PD_repoId);
  impl->destroy();
}

void _objref_TucanSession::destroy()
{
  _0RL_cd_812ed87905f9c760_60000000 _call_desc(_0RL_lcfn_812ed87905f9c760_0b000000, "destroy", 8, 0);
  
  _invoke(_call_desc);
  
}

_pof_TucanSession::~_pof_TucanSession() {}

omniObjRef*
_pof_TucanSession::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanSession(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanSession::is_a(const char* id) const
{
  if( !strcmp(id, TucanSession::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanSession _the_pof_TucanSession;

_impl_TucanSession::~_impl_TucanSession() {}

CORBA::Boolean
_impl_TucanSession::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "getAuth") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    TucanAuth_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getAuth();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = TucanAuth_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      TucanAuth_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "authorize") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanAuthException:1.0",
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 2);
    
    TucanAuth_var arg_auth;
    
    arg_auth = TucanAuth_Helper::unmarshalObjRef(giop_s);
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->authorize(arg_auth.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
    catch(TucanAuthException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getDefaultStore") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanAuthException:1.0",
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 2);
    
    giop_s.RequestReceived();
    TucanStore_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getDefaultStore();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
    catch(TucanAuthException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = TucanStore_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      TucanStore_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getStoreByProtocol") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanAuthException:1.0",
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 2);
    
    CORBA::String_var arg_proto;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_proto = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    TucanStore_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getStoreByProtocol(arg_proto.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
    catch(TucanAuthException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = TucanStore_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      TucanStore_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getDefaultTransport") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanAuthException:1.0",
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 2);
    
    giop_s.RequestReceived();
    TucanTransport_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getDefaultTransport();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
    catch(TucanAuthException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = TucanTransport_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      TucanTransport_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getTransportByProtocol") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanAuthException:1.0",
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 2);
    
    CORBA::String_var arg_proto;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_proto = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    TucanTransport_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getTransportByProtocol(arg_proto.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
    catch(TucanAuthException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = TucanTransport_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      TucanTransport_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "isAdmin") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanAuthException:1.0",
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 2);
    
    giop_s.RequestReceived();
    CORBA::Boolean result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->isAdmin();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
    catch(TucanAuthException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize += 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setNewPinNumber") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanAuthException:1.0",
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 2);
    
    CORBA::Long arg_newpin;
    
    arg_newpin <<= giop_s;
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->setNewPinNumber(arg_newpin);
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
    catch(TucanAuthException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "destroy") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->destroy();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  return 0;
}

void*
_impl_TucanSession::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanSession::_PD_repoId) )
    return (_impl_TucanSession*) this;
  
  return 0;
}

const char*
_impl_TucanSession::_mostDerivedRepoId()
{
  return TucanSession::_PD_repoId;
}

TucanSessionFactory_ptr TucanSessionFactory_Helper::_nil() {
  return TucanSessionFactory::_nil();
}

CORBA::Boolean TucanSessionFactory_Helper::is_nil(TucanSessionFactory_ptr p) {
  return CORBA::is_nil(p);

}

void TucanSessionFactory_Helper::release(TucanSessionFactory_ptr p) {
  CORBA::release(p);
}

void TucanSessionFactory_Helper::duplicate(TucanSessionFactory_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanSessionFactory_Helper::NP_alignedSize(TucanSessionFactory_ptr obj, size_t offset) {
  return TucanSessionFactory::_alignedSize(obj, offset);
}

void TucanSessionFactory_Helper::marshalObjRef(TucanSessionFactory_ptr obj, NetBufferedStream& s) {
  TucanSessionFactory::_marshalObjRef(obj, s);
}

TucanSessionFactory_ptr TucanSessionFactory_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanSessionFactory::_unmarshalObjRef(s);
}

void TucanSessionFactory_Helper::marshalObjRef(TucanSessionFactory_ptr obj, MemBufferedStream& s) {
  TucanSessionFactory::_marshalObjRef(obj, s);
}

TucanSessionFactory_ptr TucanSessionFactory_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanSessionFactory::_unmarshalObjRef(s);
}

TucanSessionFactory_ptr
TucanSessionFactory::_duplicate(TucanSessionFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanSessionFactory_ptr
TucanSessionFactory::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanSessionFactory_ptr
TucanSessionFactory::_nil()
{
  static _objref_TucanSessionFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanSessionFactory;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanSessionFactory::_PD_repoId = "IDL:TucanSessionFactory:1.0";

_objref_TucanSessionFactory::~_objref_TucanSessionFactory() {}

_objref_TucanSessionFactory::_objref_TucanSessionFactory(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   
   omniObjRef(TucanSessionFactory::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanSessionFactory::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanSessionFactory::_PD_repoId) )
    return (TucanSessionFactory_ptr) this;
  
  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cTucanSession_e_cTucanException
class _0RL_cd_812ed87905f9c760_1b000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_1b000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  virtual void userException(GIOP_C&, const char*);
  
  inline TucanSession_ptr result() { return pd_result; }
  
  TucanSession_ptr pd_result;
};

void _0RL_cd_812ed87905f9c760_1b000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = TucanSession_Helper::unmarshalObjRef(giop_client);
  
}

void _0RL_cd_812ed87905f9c760_1b000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_2b000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_1b000000* tcd = (_0RL_cd_812ed87905f9c760_1b000000*) cd;
  _impl_TucanSessionFactory* impl = (_impl_TucanSessionFactory*) svnt->_ptrToInterface(TucanSessionFactory::_PD_repoId);
  tcd->pd_result = impl->create();
}

TucanSession_ptr _objref_TucanSessionFactory::create()
{
  _0RL_cd_812ed87905f9c760_1b000000 _call_desc(_0RL_lcfn_812ed87905f9c760_2b000000, "create", 7, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

_pof_TucanSessionFactory::~_pof_TucanSessionFactory() {}

omniObjRef*
_pof_TucanSessionFactory::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanSessionFactory(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanSessionFactory::is_a(const char* id) const
{
  if( !strcmp(id, TucanSessionFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanSessionFactory _the_pof_TucanSessionFactory;

_impl_TucanSessionFactory::~_impl_TucanSessionFactory() {}

CORBA::Boolean
_impl_TucanSessionFactory::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "create") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    TucanSession_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->create();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = TucanSession_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      TucanSession_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  return 0;
}

void*
_impl_TucanSessionFactory::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanSessionFactory::_PD_repoId) )
    return (_impl_TucanSessionFactory*) this;
  
  return 0;
}

const char*
_impl_TucanSessionFactory::_mostDerivedRepoId()
{
  return TucanSessionFactory::_PD_repoId;
}

TucanAddressBookAddress_ptr TucanAddressBookAddress_Helper::_nil() {
  return TucanAddressBookAddress::_nil();
}

CORBA::Boolean TucanAddressBookAddress_Helper::is_nil(TucanAddressBookAddress_ptr p) {
  return CORBA::is_nil(p);

}

void TucanAddressBookAddress_Helper::release(TucanAddressBookAddress_ptr p) {
  CORBA::release(p);
}

void TucanAddressBookAddress_Helper::duplicate(TucanAddressBookAddress_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanAddressBookAddress_Helper::NP_alignedSize(TucanAddressBookAddress_ptr obj, size_t offset) {
  return TucanAddressBookAddress::_alignedSize(obj, offset);
}

void TucanAddressBookAddress_Helper::marshalObjRef(TucanAddressBookAddress_ptr obj, NetBufferedStream& s) {
  TucanAddressBookAddress::_marshalObjRef(obj, s);
}

TucanAddressBookAddress_ptr TucanAddressBookAddress_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanAddressBookAddress::_unmarshalObjRef(s);
}

void TucanAddressBookAddress_Helper::marshalObjRef(TucanAddressBookAddress_ptr obj, MemBufferedStream& s) {
  TucanAddressBookAddress::_marshalObjRef(obj, s);
}

TucanAddressBookAddress_ptr TucanAddressBookAddress_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanAddressBookAddress::_unmarshalObjRef(s);
}

TucanAddressBookAddress_ptr
TucanAddressBookAddress::_duplicate(TucanAddressBookAddress_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanAddressBookAddress_ptr
TucanAddressBookAddress::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanAddressBookAddress_ptr
TucanAddressBookAddress::_nil()
{
  static _objref_TucanAddressBookAddress* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanAddressBookAddress;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanAddressBookAddress::_PD_repoId = "IDL:TucanAddressBookAddress:1.0";

_objref_TucanAddressBookAddress::~_objref_TucanAddressBookAddress() {}

_objref_TucanAddressBookAddress::_objref_TucanAddressBookAddress(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanAddress(mdri, p, id, lid),
   
   omniObjRef(TucanAddressBookAddress::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanAddressBookAddress::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanAddressBookAddress::_PD_repoId) )
    return (TucanAddressBookAddress_ptr) this;
  if( !strcmp(id, TucanAddress::_PD_repoId) )
    return (TucanAddress_ptr) this;
  
  return 0;
}

_pof_TucanAddressBookAddress::~_pof_TucanAddressBookAddress() {}

omniObjRef*
_pof_TucanAddressBookAddress::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanAddressBookAddress(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanAddressBookAddress::is_a(const char* id) const
{
  if( !strcmp(id, TucanAddressBookAddress::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanAddress::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanAddressBookAddress _the_pof_TucanAddressBookAddress;

_impl_TucanAddressBookAddress::~_impl_TucanAddressBookAddress() {}

CORBA::Boolean
_impl_TucanAddressBookAddress::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanAddress::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanAddressBookAddress::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanAddressBookAddress::_PD_repoId) )
    return (_impl_TucanAddressBookAddress*) this;
  if( !strcmp(id, TucanAddress::_PD_repoId) )
    return (_impl_TucanAddress*) this;

  return 0;
}

const char*
_impl_TucanAddressBookAddress::_mostDerivedRepoId()
{
  return TucanAddressBookAddress::_PD_repoId;
}

TucanAddressBookAddressFactory_ptr TucanAddressBookAddressFactory_Helper::_nil() {
  return TucanAddressBookAddressFactory::_nil();
}

CORBA::Boolean TucanAddressBookAddressFactory_Helper::is_nil(TucanAddressBookAddressFactory_ptr p) {
  return CORBA::is_nil(p);

}

void TucanAddressBookAddressFactory_Helper::release(TucanAddressBookAddressFactory_ptr p) {
  CORBA::release(p);
}

void TucanAddressBookAddressFactory_Helper::duplicate(TucanAddressBookAddressFactory_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanAddressBookAddressFactory_Helper::NP_alignedSize(TucanAddressBookAddressFactory_ptr obj, size_t offset) {
  return TucanAddressBookAddressFactory::_alignedSize(obj, offset);
}

void TucanAddressBookAddressFactory_Helper::marshalObjRef(TucanAddressBookAddressFactory_ptr obj, NetBufferedStream& s) {
  TucanAddressBookAddressFactory::_marshalObjRef(obj, s);
}

TucanAddressBookAddressFactory_ptr TucanAddressBookAddressFactory_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanAddressBookAddressFactory::_unmarshalObjRef(s);
}

void TucanAddressBookAddressFactory_Helper::marshalObjRef(TucanAddressBookAddressFactory_ptr obj, MemBufferedStream& s) {
  TucanAddressBookAddressFactory::_marshalObjRef(obj, s);
}

TucanAddressBookAddressFactory_ptr TucanAddressBookAddressFactory_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanAddressBookAddressFactory::_unmarshalObjRef(s);
}

TucanAddressBookAddressFactory_ptr
TucanAddressBookAddressFactory::_duplicate(TucanAddressBookAddressFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanAddressBookAddressFactory_ptr
TucanAddressBookAddressFactory::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanAddressBookAddressFactory_ptr
TucanAddressBookAddressFactory::_nil()
{
  static _objref_TucanAddressBookAddressFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanAddressBookAddressFactory;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanAddressBookAddressFactory::_PD_repoId = "IDL:TucanAddressBookAddressFactory:1.0";

_objref_TucanAddressBookAddressFactory::~_objref_TucanAddressBookAddressFactory() {}

_objref_TucanAddressBookAddressFactory::_objref_TucanAddressBookAddressFactory(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanAddressFactory(mdri, p, id, lid),
   
   omniObjRef(TucanAddressBookAddressFactory::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanAddressBookAddressFactory::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanAddressBookAddressFactory::_PD_repoId) )
    return (TucanAddressBookAddressFactory_ptr) this;
  if( !strcmp(id, TucanAddressFactory::_PD_repoId) )
    return (TucanAddressFactory_ptr) this;
  
  return 0;
}

_pof_TucanAddressBookAddressFactory::~_pof_TucanAddressBookAddressFactory() {}

omniObjRef*
_pof_TucanAddressBookAddressFactory::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanAddressBookAddressFactory(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanAddressBookAddressFactory::is_a(const char* id) const
{
  if( !strcmp(id, TucanAddressBookAddressFactory::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanAddressFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanAddressBookAddressFactory _the_pof_TucanAddressBookAddressFactory;

_impl_TucanAddressBookAddressFactory::~_impl_TucanAddressBookAddressFactory() {}

CORBA::Boolean
_impl_TucanAddressBookAddressFactory::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanAddressFactory::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanAddressBookAddressFactory::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanAddressBookAddressFactory::_PD_repoId) )
    return (_impl_TucanAddressBookAddressFactory*) this;
  if( !strcmp(id, TucanAddressFactory::_PD_repoId) )
    return (_impl_TucanAddressFactory*) this;

  return 0;
}

const char*
_impl_TucanAddressBookAddressFactory::_mostDerivedRepoId()
{
  return TucanAddressBookAddressFactory::_PD_repoId;
}

TucanAddressBookFolder_ptr TucanAddressBookFolder_Helper::_nil() {
  return TucanAddressBookFolder::_nil();
}

CORBA::Boolean TucanAddressBookFolder_Helper::is_nil(TucanAddressBookFolder_ptr p) {
  return CORBA::is_nil(p);

}

void TucanAddressBookFolder_Helper::release(TucanAddressBookFolder_ptr p) {
  CORBA::release(p);
}

void TucanAddressBookFolder_Helper::duplicate(TucanAddressBookFolder_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanAddressBookFolder_Helper::NP_alignedSize(TucanAddressBookFolder_ptr obj, size_t offset) {
  return TucanAddressBookFolder::_alignedSize(obj, offset);
}

void TucanAddressBookFolder_Helper::marshalObjRef(TucanAddressBookFolder_ptr obj, NetBufferedStream& s) {
  TucanAddressBookFolder::_marshalObjRef(obj, s);
}

TucanAddressBookFolder_ptr TucanAddressBookFolder_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanAddressBookFolder::_unmarshalObjRef(s);
}

void TucanAddressBookFolder_Helper::marshalObjRef(TucanAddressBookFolder_ptr obj, MemBufferedStream& s) {
  TucanAddressBookFolder::_marshalObjRef(obj, s);
}

TucanAddressBookFolder_ptr TucanAddressBookFolder_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanAddressBookFolder::_unmarshalObjRef(s);
}

TucanAddressBookFolder_ptr
TucanAddressBookFolder::_duplicate(TucanAddressBookFolder_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanAddressBookFolder_ptr
TucanAddressBookFolder::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanAddressBookFolder_ptr
TucanAddressBookFolder::_nil()
{
  static _objref_TucanAddressBookFolder* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanAddressBookFolder;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanAddressBookFolder::_PD_repoId = "IDL:TucanAddressBookFolder:1.0";

_objref_TucanAddressBookFolder::~_objref_TucanAddressBookFolder() {}

_objref_TucanAddressBookFolder::_objref_TucanAddressBookFolder(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanFolder(mdri, p, id, lid),
   
   omniObjRef(TucanAddressBookFolder::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanAddressBookFolder::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanAddressBookFolder::_PD_repoId) )
    return (TucanAddressBookFolder_ptr) this;
  if( !strcmp(id, TucanFolder::_PD_repoId) )
    return (TucanFolder_ptr) this;
  
  return 0;
}

_pof_TucanAddressBookFolder::~_pof_TucanAddressBookFolder() {}

omniObjRef*
_pof_TucanAddressBookFolder::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanAddressBookFolder(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanAddressBookFolder::is_a(const char* id) const
{
  if( !strcmp(id, TucanAddressBookFolder::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanFolder::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanAddressBookFolder _the_pof_TucanAddressBookFolder;

_impl_TucanAddressBookFolder::~_impl_TucanAddressBookFolder() {}

CORBA::Boolean
_impl_TucanAddressBookFolder::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanFolder::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanAddressBookFolder::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanAddressBookFolder::_PD_repoId) )
    return (_impl_TucanAddressBookFolder*) this;
  if( !strcmp(id, TucanFolder::_PD_repoId) )
    return (_impl_TucanFolder*) this;

  return 0;
}

const char*
_impl_TucanAddressBookFolder::_mostDerivedRepoId()
{
  return TucanAddressBookFolder::_PD_repoId;
}

TucanAddressBookFolderFactory_ptr TucanAddressBookFolderFactory_Helper::_nil() {
  return TucanAddressBookFolderFactory::_nil();
}

CORBA::Boolean TucanAddressBookFolderFactory_Helper::is_nil(TucanAddressBookFolderFactory_ptr p) {
  return CORBA::is_nil(p);

}

void TucanAddressBookFolderFactory_Helper::release(TucanAddressBookFolderFactory_ptr p) {
  CORBA::release(p);
}

void TucanAddressBookFolderFactory_Helper::duplicate(TucanAddressBookFolderFactory_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanAddressBookFolderFactory_Helper::NP_alignedSize(TucanAddressBookFolderFactory_ptr obj, size_t offset) {
  return TucanAddressBookFolderFactory::_alignedSize(obj, offset);
}

void TucanAddressBookFolderFactory_Helper::marshalObjRef(TucanAddressBookFolderFactory_ptr obj, NetBufferedStream& s) {
  TucanAddressBookFolderFactory::_marshalObjRef(obj, s);
}

TucanAddressBookFolderFactory_ptr TucanAddressBookFolderFactory_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanAddressBookFolderFactory::_unmarshalObjRef(s);
}

void TucanAddressBookFolderFactory_Helper::marshalObjRef(TucanAddressBookFolderFactory_ptr obj, MemBufferedStream& s) {
  TucanAddressBookFolderFactory::_marshalObjRef(obj, s);
}

TucanAddressBookFolderFactory_ptr TucanAddressBookFolderFactory_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanAddressBookFolderFactory::_unmarshalObjRef(s);
}

TucanAddressBookFolderFactory_ptr
TucanAddressBookFolderFactory::_duplicate(TucanAddressBookFolderFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanAddressBookFolderFactory_ptr
TucanAddressBookFolderFactory::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanAddressBookFolderFactory_ptr
TucanAddressBookFolderFactory::_nil()
{
  static _objref_TucanAddressBookFolderFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanAddressBookFolderFactory;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanAddressBookFolderFactory::_PD_repoId = "IDL:TucanAddressBookFolderFactory:1.0";

_objref_TucanAddressBookFolderFactory::~_objref_TucanAddressBookFolderFactory() {}

_objref_TucanAddressBookFolderFactory::_objref_TucanAddressBookFolderFactory(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanFolderFactory(mdri, p, id, lid),
   
   omniObjRef(TucanAddressBookFolderFactory::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanAddressBookFolderFactory::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanAddressBookFolderFactory::_PD_repoId) )
    return (TucanAddressBookFolderFactory_ptr) this;
  if( !strcmp(id, TucanFolderFactory::_PD_repoId) )
    return (TucanFolderFactory_ptr) this;
  
  return 0;
}

_pof_TucanAddressBookFolderFactory::~_pof_TucanAddressBookFolderFactory() {}

omniObjRef*
_pof_TucanAddressBookFolderFactory::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanAddressBookFolderFactory(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanAddressBookFolderFactory::is_a(const char* id) const
{
  if( !strcmp(id, TucanAddressBookFolderFactory::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanFolderFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanAddressBookFolderFactory _the_pof_TucanAddressBookFolderFactory;

_impl_TucanAddressBookFolderFactory::~_impl_TucanAddressBookFolderFactory() {}

CORBA::Boolean
_impl_TucanAddressBookFolderFactory::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanFolderFactory::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanAddressBookFolderFactory::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanAddressBookFolderFactory::_PD_repoId) )
    return (_impl_TucanAddressBookFolderFactory*) this;
  if( !strcmp(id, TucanFolderFactory::_PD_repoId) )
    return (_impl_TucanFolderFactory*) this;

  return 0;
}

const char*
_impl_TucanAddressBookFolderFactory::_mostDerivedRepoId()
{
  return TucanAddressBookFolderFactory::_PD_repoId;
}

TucanAddressBookMessage_ptr TucanAddressBookMessage_Helper::_nil() {
  return TucanAddressBookMessage::_nil();
}

CORBA::Boolean TucanAddressBookMessage_Helper::is_nil(TucanAddressBookMessage_ptr p) {
  return CORBA::is_nil(p);

}

void TucanAddressBookMessage_Helper::release(TucanAddressBookMessage_ptr p) {
  CORBA::release(p);
}

void TucanAddressBookMessage_Helper::duplicate(TucanAddressBookMessage_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanAddressBookMessage_Helper::NP_alignedSize(TucanAddressBookMessage_ptr obj, size_t offset) {
  return TucanAddressBookMessage::_alignedSize(obj, offset);
}

void TucanAddressBookMessage_Helper::marshalObjRef(TucanAddressBookMessage_ptr obj, NetBufferedStream& s) {
  TucanAddressBookMessage::_marshalObjRef(obj, s);
}

TucanAddressBookMessage_ptr TucanAddressBookMessage_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanAddressBookMessage::_unmarshalObjRef(s);
}

void TucanAddressBookMessage_Helper::marshalObjRef(TucanAddressBookMessage_ptr obj, MemBufferedStream& s) {
  TucanAddressBookMessage::_marshalObjRef(obj, s);
}

TucanAddressBookMessage_ptr TucanAddressBookMessage_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanAddressBookMessage::_unmarshalObjRef(s);
}

TucanAddressBookMessage_ptr
TucanAddressBookMessage::_duplicate(TucanAddressBookMessage_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanAddressBookMessage_ptr
TucanAddressBookMessage::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanAddressBookMessage_ptr
TucanAddressBookMessage::_nil()
{
  static _objref_TucanAddressBookMessage* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanAddressBookMessage;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanAddressBookMessage::_PD_repoId = "IDL:TucanAddressBookMessage:1.0";

_objref_TucanAddressBookMessage::~_objref_TucanAddressBookMessage() {}

_objref_TucanAddressBookMessage::_objref_TucanAddressBookMessage(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanMessage(mdri, p, id, lid),
   
   omniObjRef(TucanAddressBookMessage::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanAddressBookMessage::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanAddressBookMessage::_PD_repoId) )
    return (TucanAddressBookMessage_ptr) this;
  if( !strcmp(id, TucanMessage::_PD_repoId) )
    return (TucanMessage_ptr) this;
  
  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cstring_i_cstring
class _0RL_cd_812ed87905f9c760_3b000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_3b000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const char* a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline char * result() { return pd_result; }
  const char* arg_0;
  char * pd_result;
};

CORBA::ULong _0RL_cd_812ed87905f9c760_3b000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_0) ? strlen((const char*) arg_0) + 1 : 1;
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_3b000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_0)? strlen((const char*) arg_0) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_0),_len);
    else {
      if ((const char*) arg_0 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  
}

void _0RL_cd_812ed87905f9c760_3b000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  {
    CORBA::String_member _0RL_str_tmp;
    _0RL_str_tmp <<=  giop_client;
    pd_result = _0RL_str_tmp._ptr;
    _0RL_str_tmp._ptr = 0;
  }
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_4b000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_3b000000* tcd = (_0RL_cd_812ed87905f9c760_3b000000*) cd;
  _impl_TucanAddressBookMessage* impl = (_impl_TucanAddressBookMessage*) svnt->_ptrToInterface(TucanAddressBookMessage::_PD_repoId);
  tcd->pd_result = impl->getAttribute(tcd->arg_0);
}

char* _objref_TucanAddressBookMessage::getAttribute(const char* name)
{
  _0RL_cd_812ed87905f9c760_3b000000 _call_desc(_0RL_lcfn_812ed87905f9c760_4b000000, "getAttribute", 13, 0, name);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring
class _0RL_cd_812ed87905f9c760_5b000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_5b000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const char* a_0, const char* a_1):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0),
     arg_1(a_1) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  const char* arg_0;
  const char* arg_1;
  
};

CORBA::ULong _0RL_cd_812ed87905f9c760_5b000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_0) ? strlen((const char*) arg_0) + 1 : 1;
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_1) ? strlen((const char*) arg_1) + 1 : 1;
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_5b000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_0)? strlen((const char*) arg_0) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_0),_len);
    else {
      if ((const char*) arg_0 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  {
    CORBA::ULong _len = (((const char*) arg_1)? strlen((const char*) arg_1) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_1),_len);
    else {
      if ((const char*) arg_1 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_6b000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_5b000000* tcd = (_0RL_cd_812ed87905f9c760_5b000000*) cd;
  _impl_TucanAddressBookMessage* impl = (_impl_TucanAddressBookMessage*) svnt->_ptrToInterface(TucanAddressBookMessage::_PD_repoId);
  impl->setAttribute(tcd->arg_0, tcd->arg_1);
}

void _objref_TucanAddressBookMessage::setAttribute(const char* name, const char* value)
{
  _0RL_cd_812ed87905f9c760_5b000000 _call_desc(_0RL_lcfn_812ed87905f9c760_6b000000, "setAttribute", 13, 0, name, value);
  
  _invoke(_call_desc);
  
}

// Proxy call descriptor class. Mangled signature:
//  _cTucanStringList
class _0RL_cd_812ed87905f9c760_7b000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_7b000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline TucanStringList* result() { return pd_result; }
  
  TucanStringList* pd_result;
};

void _0RL_cd_812ed87905f9c760_7b000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = new TucanStringList;
  
  *pd_result <<= giop_client;
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_8b000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_7b000000* tcd = (_0RL_cd_812ed87905f9c760_7b000000*) cd;
  _impl_TucanAddressBookMessage* impl = (_impl_TucanAddressBookMessage*) svnt->_ptrToInterface(TucanAddressBookMessage::_PD_repoId);
  tcd->pd_result = impl->listAttributes();
}

TucanStringList* _objref_TucanAddressBookMessage::listAttributes()
{
  _0RL_cd_812ed87905f9c760_7b000000 _call_desc(_0RL_lcfn_812ed87905f9c760_8b000000, "listAttributes", 15, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cTucanAttributeSeq
class _0RL_cd_812ed87905f9c760_9b000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_9b000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline TucanAttributeSeq* result() { return pd_result; }
  
  TucanAttributeSeq* pd_result;
};

void _0RL_cd_812ed87905f9c760_9b000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = new TucanAttributeSeq;
  
  *pd_result <<= giop_client;
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_ab000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_9b000000* tcd = (_0RL_cd_812ed87905f9c760_9b000000*) cd;
  _impl_TucanAddressBookMessage* impl = (_impl_TucanAddressBookMessage*) svnt->_ptrToInterface(TucanAddressBookMessage::_PD_repoId);
  tcd->pd_result = impl->getAttributes();
}

TucanAttributeSeq* _objref_TucanAddressBookMessage::getAttributes()
{
  _0RL_cd_812ed87905f9c760_9b000000 _call_desc(_0RL_lcfn_812ed87905f9c760_ab000000, "getAttributes", 14, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cstring
class _0RL_cd_812ed87905f9c760_bb000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_bb000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline char * result() { return pd_result; }
  
  char * pd_result;
};

void _0RL_cd_812ed87905f9c760_bb000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  {
    CORBA::String_member _0RL_str_tmp;
    _0RL_str_tmp <<=  giop_client;
    pd_result = _0RL_str_tmp._ptr;
    _0RL_str_tmp._ptr = 0;
  }
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_cb000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_bb000000* tcd = (_0RL_cd_812ed87905f9c760_bb000000*) cd;
  _impl_TucanAddressBookMessage* impl = (_impl_TucanAddressBookMessage*) svnt->_ptrToInterface(TucanAddressBookMessage::_PD_repoId);
  tcd->pd_result = impl->getGroup();
}

char* _objref_TucanAddressBookMessage::getGroup()
{
  _0RL_cd_812ed87905f9c760_bb000000 _call_desc(_0RL_lcfn_812ed87905f9c760_cb000000, "getGroup", 9, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring
class _0RL_cd_812ed87905f9c760_db000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_db000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const char* a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  const char* arg_0;
  
};

CORBA::ULong _0RL_cd_812ed87905f9c760_db000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_0) ? strlen((const char*) arg_0) + 1 : 1;
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_db000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_0)? strlen((const char*) arg_0) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_0),_len);
    else {
      if ((const char*) arg_0 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_eb000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_db000000* tcd = (_0RL_cd_812ed87905f9c760_db000000*) cd;
  _impl_TucanAddressBookMessage* impl = (_impl_TucanAddressBookMessage*) svnt->_ptrToInterface(TucanAddressBookMessage::_PD_repoId);
  impl->setGroup(tcd->arg_0);
}

void _objref_TucanAddressBookMessage::setGroup(const char* group)
{
  _0RL_cd_812ed87905f9c760_db000000 _call_desc(_0RL_lcfn_812ed87905f9c760_eb000000, "setGroup", 9, 0, group);
  
  _invoke(_call_desc);
  
}

_pof_TucanAddressBookMessage::~_pof_TucanAddressBookMessage() {}

omniObjRef*
_pof_TucanAddressBookMessage::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanAddressBookMessage(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanAddressBookMessage::is_a(const char* id) const
{
  if( !strcmp(id, TucanAddressBookMessage::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanMessage::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanAddressBookMessage _the_pof_TucanAddressBookMessage;

_impl_TucanAddressBookMessage::~_impl_TucanAddressBookMessage() {}

CORBA::Boolean
_impl_TucanAddressBookMessage::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "getAttribute") ) {
    
    CORBA::String_var arg_name;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_name = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    CORBA::String_var result;
    
    result = this->getAttribute(arg_name.in());
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      msgsize += ((const char*) result) ? strlen((const char*) result) + 1 : 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      {
        CORBA::ULong _len = (((const char*) result)? strlen((const char*) result) + 1 : 1);
        
        _len >>= giop_s;
        if (_len > 1)
          giop_s.put_char_array((const CORBA::Char *)((const char*)result),_len);
        else {
          if ((const char*) result == 0 && omniORB::traceLevel > 1)
            _CORBA_null_string_ptr(0);
          CORBA::Char('\0') >>= giop_s;
        }
      }
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setAttribute") ) {
    
    CORBA::String_var arg_name;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_name = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::String_var arg_value;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_value = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    
    this->setAttribute(arg_name.in(), arg_value.in());
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "listAttributes") ) {
    
    giop_s.RequestReceived();
    TucanStringList_var result;
    
    result = this->listAttributes();
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      *(result.operator->()) >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getAttributes") ) {
    
    giop_s.RequestReceived();
    TucanAttributeSeq_var result;
    
    result = this->getAttributes();
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      *(result.operator->()) >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getGroup") ) {
    
    giop_s.RequestReceived();
    CORBA::String_var result;
    
    result = this->getGroup();
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      msgsize += ((const char*) result) ? strlen((const char*) result) + 1 : 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      {
        CORBA::ULong _len = (((const char*) result)? strlen((const char*) result) + 1 : 1);
        
        _len >>= giop_s;
        if (_len > 1)
          giop_s.put_char_array((const CORBA::Char *)((const char*)result),_len);
        else {
          if ((const char*) result == 0 && omniORB::traceLevel > 1)
            _CORBA_null_string_ptr(0);
          CORBA::Char('\0') >>= giop_s;
        }
      }
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setGroup") ) {
    
    CORBA::String_var arg_group;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_group = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    
    this->setGroup(arg_group.in());
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( _impl_TucanMessage::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanAddressBookMessage::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanAddressBookMessage::_PD_repoId) )
    return (_impl_TucanAddressBookMessage*) this;
  if( !strcmp(id, TucanMessage::_PD_repoId) )
    return (_impl_TucanMessage*) this;

  return 0;
}

const char*
_impl_TucanAddressBookMessage::_mostDerivedRepoId()
{
  return TucanAddressBookMessage::_PD_repoId;
}

TucanAddressBookMessageFactory_ptr TucanAddressBookMessageFactory_Helper::_nil() {
  return TucanAddressBookMessageFactory::_nil();
}

CORBA::Boolean TucanAddressBookMessageFactory_Helper::is_nil(TucanAddressBookMessageFactory_ptr p) {
  return CORBA::is_nil(p);

}

void TucanAddressBookMessageFactory_Helper::release(TucanAddressBookMessageFactory_ptr p) {
  CORBA::release(p);
}

void TucanAddressBookMessageFactory_Helper::duplicate(TucanAddressBookMessageFactory_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanAddressBookMessageFactory_Helper::NP_alignedSize(TucanAddressBookMessageFactory_ptr obj, size_t offset) {
  return TucanAddressBookMessageFactory::_alignedSize(obj, offset);
}

void TucanAddressBookMessageFactory_Helper::marshalObjRef(TucanAddressBookMessageFactory_ptr obj, NetBufferedStream& s) {
  TucanAddressBookMessageFactory::_marshalObjRef(obj, s);
}

TucanAddressBookMessageFactory_ptr TucanAddressBookMessageFactory_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanAddressBookMessageFactory::_unmarshalObjRef(s);
}

void TucanAddressBookMessageFactory_Helper::marshalObjRef(TucanAddressBookMessageFactory_ptr obj, MemBufferedStream& s) {
  TucanAddressBookMessageFactory::_marshalObjRef(obj, s);
}

TucanAddressBookMessageFactory_ptr TucanAddressBookMessageFactory_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanAddressBookMessageFactory::_unmarshalObjRef(s);
}

TucanAddressBookMessageFactory_ptr
TucanAddressBookMessageFactory::_duplicate(TucanAddressBookMessageFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanAddressBookMessageFactory_ptr
TucanAddressBookMessageFactory::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanAddressBookMessageFactory_ptr
TucanAddressBookMessageFactory::_nil()
{
  static _objref_TucanAddressBookMessageFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanAddressBookMessageFactory;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanAddressBookMessageFactory::_PD_repoId = "IDL:TucanAddressBookMessageFactory:1.0";

_objref_TucanAddressBookMessageFactory::~_objref_TucanAddressBookMessageFactory() {}

_objref_TucanAddressBookMessageFactory::_objref_TucanAddressBookMessageFactory(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanMessageFactory(mdri, p, id, lid),
   
   omniObjRef(TucanAddressBookMessageFactory::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanAddressBookMessageFactory::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanAddressBookMessageFactory::_PD_repoId) )
    return (TucanAddressBookMessageFactory_ptr) this;
  if( !strcmp(id, TucanMessageFactory::_PD_repoId) )
    return (TucanMessageFactory_ptr) this;
  
  return 0;
}

_pof_TucanAddressBookMessageFactory::~_pof_TucanAddressBookMessageFactory() {}

omniObjRef*
_pof_TucanAddressBookMessageFactory::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanAddressBookMessageFactory(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanAddressBookMessageFactory::is_a(const char* id) const
{
  if( !strcmp(id, TucanAddressBookMessageFactory::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanMessageFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanAddressBookMessageFactory _the_pof_TucanAddressBookMessageFactory;

_impl_TucanAddressBookMessageFactory::~_impl_TucanAddressBookMessageFactory() {}

CORBA::Boolean
_impl_TucanAddressBookMessageFactory::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanMessageFactory::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanAddressBookMessageFactory::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanAddressBookMessageFactory::_PD_repoId) )
    return (_impl_TucanAddressBookMessageFactory*) this;
  if( !strcmp(id, TucanMessageFactory::_PD_repoId) )
    return (_impl_TucanMessageFactory*) this;

  return 0;
}

const char*
_impl_TucanAddressBookMessageFactory::_mostDerivedRepoId()
{
  return TucanAddressBookMessageFactory::_PD_repoId;
}

TucanAddressBookStore_ptr TucanAddressBookStore_Helper::_nil() {
  return TucanAddressBookStore::_nil();
}

CORBA::Boolean TucanAddressBookStore_Helper::is_nil(TucanAddressBookStore_ptr p) {
  return CORBA::is_nil(p);

}

void TucanAddressBookStore_Helper::release(TucanAddressBookStore_ptr p) {
  CORBA::release(p);
}

void TucanAddressBookStore_Helper::duplicate(TucanAddressBookStore_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanAddressBookStore_Helper::NP_alignedSize(TucanAddressBookStore_ptr obj, size_t offset) {
  return TucanAddressBookStore::_alignedSize(obj, offset);
}

void TucanAddressBookStore_Helper::marshalObjRef(TucanAddressBookStore_ptr obj, NetBufferedStream& s) {
  TucanAddressBookStore::_marshalObjRef(obj, s);
}

TucanAddressBookStore_ptr TucanAddressBookStore_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanAddressBookStore::_unmarshalObjRef(s);
}

void TucanAddressBookStore_Helper::marshalObjRef(TucanAddressBookStore_ptr obj, MemBufferedStream& s) {
  TucanAddressBookStore::_marshalObjRef(obj, s);
}

TucanAddressBookStore_ptr TucanAddressBookStore_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanAddressBookStore::_unmarshalObjRef(s);
}

TucanAddressBookStore_ptr
TucanAddressBookStore::_duplicate(TucanAddressBookStore_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanAddressBookStore_ptr
TucanAddressBookStore::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanAddressBookStore_ptr
TucanAddressBookStore::_nil()
{
  static _objref_TucanAddressBookStore* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanAddressBookStore;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanAddressBookStore::_PD_repoId = "IDL:TucanAddressBookStore:1.0";

_objref_TucanAddressBookStore::~_objref_TucanAddressBookStore() {}

_objref_TucanAddressBookStore::_objref_TucanAddressBookStore(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanStore(mdri, p, id, lid),
   
   omniObjRef(TucanAddressBookStore::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanAddressBookStore::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanAddressBookStore::_PD_repoId) )
    return (TucanAddressBookStore_ptr) this;
  if( !strcmp(id, TucanStore::_PD_repoId) )
    return (TucanStore_ptr) this;
  
  return 0;
}

_pof_TucanAddressBookStore::~_pof_TucanAddressBookStore() {}

omniObjRef*
_pof_TucanAddressBookStore::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanAddressBookStore(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanAddressBookStore::is_a(const char* id) const
{
  if( !strcmp(id, TucanAddressBookStore::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanStore::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanAddressBookStore _the_pof_TucanAddressBookStore;

_impl_TucanAddressBookStore::~_impl_TucanAddressBookStore() {}

CORBA::Boolean
_impl_TucanAddressBookStore::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanStore::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanAddressBookStore::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanAddressBookStore::_PD_repoId) )
    return (_impl_TucanAddressBookStore*) this;
  if( !strcmp(id, TucanStore::_PD_repoId) )
    return (_impl_TucanStore*) this;

  return 0;
}

const char*
_impl_TucanAddressBookStore::_mostDerivedRepoId()
{
  return TucanAddressBookStore::_PD_repoId;
}

TucanAddressBookStoreFactory_ptr TucanAddressBookStoreFactory_Helper::_nil() {
  return TucanAddressBookStoreFactory::_nil();
}

CORBA::Boolean TucanAddressBookStoreFactory_Helper::is_nil(TucanAddressBookStoreFactory_ptr p) {
  return CORBA::is_nil(p);

}

void TucanAddressBookStoreFactory_Helper::release(TucanAddressBookStoreFactory_ptr p) {
  CORBA::release(p);
}

void TucanAddressBookStoreFactory_Helper::duplicate(TucanAddressBookStoreFactory_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanAddressBookStoreFactory_Helper::NP_alignedSize(TucanAddressBookStoreFactory_ptr obj, size_t offset) {
  return TucanAddressBookStoreFactory::_alignedSize(obj, offset);
}

void TucanAddressBookStoreFactory_Helper::marshalObjRef(TucanAddressBookStoreFactory_ptr obj, NetBufferedStream& s) {
  TucanAddressBookStoreFactory::_marshalObjRef(obj, s);
}

TucanAddressBookStoreFactory_ptr TucanAddressBookStoreFactory_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanAddressBookStoreFactory::_unmarshalObjRef(s);
}

void TucanAddressBookStoreFactory_Helper::marshalObjRef(TucanAddressBookStoreFactory_ptr obj, MemBufferedStream& s) {
  TucanAddressBookStoreFactory::_marshalObjRef(obj, s);
}

TucanAddressBookStoreFactory_ptr TucanAddressBookStoreFactory_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanAddressBookStoreFactory::_unmarshalObjRef(s);
}

TucanAddressBookStoreFactory_ptr
TucanAddressBookStoreFactory::_duplicate(TucanAddressBookStoreFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanAddressBookStoreFactory_ptr
TucanAddressBookStoreFactory::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanAddressBookStoreFactory_ptr
TucanAddressBookStoreFactory::_nil()
{
  static _objref_TucanAddressBookStoreFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanAddressBookStoreFactory;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanAddressBookStoreFactory::_PD_repoId = "IDL:TucanAddressBookStoreFactory:1.0";

_objref_TucanAddressBookStoreFactory::~_objref_TucanAddressBookStoreFactory() {}

_objref_TucanAddressBookStoreFactory::_objref_TucanAddressBookStoreFactory(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanStoreFactory(mdri, p, id, lid),
   
   omniObjRef(TucanAddressBookStoreFactory::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanAddressBookStoreFactory::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanAddressBookStoreFactory::_PD_repoId) )
    return (TucanAddressBookStoreFactory_ptr) this;
  if( !strcmp(id, TucanStoreFactory::_PD_repoId) )
    return (TucanStoreFactory_ptr) this;
  
  return 0;
}

_pof_TucanAddressBookStoreFactory::~_pof_TucanAddressBookStoreFactory() {}

omniObjRef*
_pof_TucanAddressBookStoreFactory::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanAddressBookStoreFactory(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanAddressBookStoreFactory::is_a(const char* id) const
{
  if( !strcmp(id, TucanAddressBookStoreFactory::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanStoreFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanAddressBookStoreFactory _the_pof_TucanAddressBookStoreFactory;

_impl_TucanAddressBookStoreFactory::~_impl_TucanAddressBookStoreFactory() {}

CORBA::Boolean
_impl_TucanAddressBookStoreFactory::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanStoreFactory::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanAddressBookStoreFactory::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanAddressBookStoreFactory::_PD_repoId) )
    return (_impl_TucanAddressBookStoreFactory*) this;
  if( !strcmp(id, TucanStoreFactory::_PD_repoId) )
    return (_impl_TucanStoreFactory*) this;

  return 0;
}

const char*
_impl_TucanAddressBookStoreFactory::_mostDerivedRepoId()
{
  return TucanAddressBookStoreFactory::_PD_repoId;
}

TucanAddressBookTransport_ptr TucanAddressBookTransport_Helper::_nil() {
  return TucanAddressBookTransport::_nil();
}

CORBA::Boolean TucanAddressBookTransport_Helper::is_nil(TucanAddressBookTransport_ptr p) {
  return CORBA::is_nil(p);

}

void TucanAddressBookTransport_Helper::release(TucanAddressBookTransport_ptr p) {
  CORBA::release(p);
}

void TucanAddressBookTransport_Helper::duplicate(TucanAddressBookTransport_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanAddressBookTransport_Helper::NP_alignedSize(TucanAddressBookTransport_ptr obj, size_t offset) {
  return TucanAddressBookTransport::_alignedSize(obj, offset);
}

void TucanAddressBookTransport_Helper::marshalObjRef(TucanAddressBookTransport_ptr obj, NetBufferedStream& s) {
  TucanAddressBookTransport::_marshalObjRef(obj, s);
}

TucanAddressBookTransport_ptr TucanAddressBookTransport_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanAddressBookTransport::_unmarshalObjRef(s);
}

void TucanAddressBookTransport_Helper::marshalObjRef(TucanAddressBookTransport_ptr obj, MemBufferedStream& s) {
  TucanAddressBookTransport::_marshalObjRef(obj, s);
}

TucanAddressBookTransport_ptr TucanAddressBookTransport_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanAddressBookTransport::_unmarshalObjRef(s);
}

TucanAddressBookTransport_ptr
TucanAddressBookTransport::_duplicate(TucanAddressBookTransport_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanAddressBookTransport_ptr
TucanAddressBookTransport::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanAddressBookTransport_ptr
TucanAddressBookTransport::_nil()
{
  static _objref_TucanAddressBookTransport* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanAddressBookTransport;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanAddressBookTransport::_PD_repoId = "IDL:TucanAddressBookTransport:1.0";

_objref_TucanAddressBookTransport::~_objref_TucanAddressBookTransport() {}

_objref_TucanAddressBookTransport::_objref_TucanAddressBookTransport(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanTransport(mdri, p, id, lid),
   
   omniObjRef(TucanAddressBookTransport::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanAddressBookTransport::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanAddressBookTransport::_PD_repoId) )
    return (TucanAddressBookTransport_ptr) this;
  if( !strcmp(id, TucanTransport::_PD_repoId) )
    return (TucanTransport_ptr) this;
  
  return 0;
}

_pof_TucanAddressBookTransport::~_pof_TucanAddressBookTransport() {}

omniObjRef*
_pof_TucanAddressBookTransport::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanAddressBookTransport(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanAddressBookTransport::is_a(const char* id) const
{
  if( !strcmp(id, TucanAddressBookTransport::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanTransport::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanAddressBookTransport _the_pof_TucanAddressBookTransport;

_impl_TucanAddressBookTransport::~_impl_TucanAddressBookTransport() {}

CORBA::Boolean
_impl_TucanAddressBookTransport::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanTransport::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanAddressBookTransport::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanAddressBookTransport::_PD_repoId) )
    return (_impl_TucanAddressBookTransport*) this;
  if( !strcmp(id, TucanTransport::_PD_repoId) )
    return (_impl_TucanTransport*) this;

  return 0;
}

const char*
_impl_TucanAddressBookTransport::_mostDerivedRepoId()
{
  return TucanAddressBookTransport::_PD_repoId;
}

TucanAddressBookTransportFactory_ptr TucanAddressBookTransportFactory_Helper::_nil() {
  return TucanAddressBookTransportFactory::_nil();
}

CORBA::Boolean TucanAddressBookTransportFactory_Helper::is_nil(TucanAddressBookTransportFactory_ptr p) {
  return CORBA::is_nil(p);

}

void TucanAddressBookTransportFactory_Helper::release(TucanAddressBookTransportFactory_ptr p) {
  CORBA::release(p);
}

void TucanAddressBookTransportFactory_Helper::duplicate(TucanAddressBookTransportFactory_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanAddressBookTransportFactory_Helper::NP_alignedSize(TucanAddressBookTransportFactory_ptr obj, size_t offset) {
  return TucanAddressBookTransportFactory::_alignedSize(obj, offset);
}

void TucanAddressBookTransportFactory_Helper::marshalObjRef(TucanAddressBookTransportFactory_ptr obj, NetBufferedStream& s) {
  TucanAddressBookTransportFactory::_marshalObjRef(obj, s);
}

TucanAddressBookTransportFactory_ptr TucanAddressBookTransportFactory_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanAddressBookTransportFactory::_unmarshalObjRef(s);
}

void TucanAddressBookTransportFactory_Helper::marshalObjRef(TucanAddressBookTransportFactory_ptr obj, MemBufferedStream& s) {
  TucanAddressBookTransportFactory::_marshalObjRef(obj, s);
}

TucanAddressBookTransportFactory_ptr TucanAddressBookTransportFactory_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanAddressBookTransportFactory::_unmarshalObjRef(s);
}

TucanAddressBookTransportFactory_ptr
TucanAddressBookTransportFactory::_duplicate(TucanAddressBookTransportFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanAddressBookTransportFactory_ptr
TucanAddressBookTransportFactory::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanAddressBookTransportFactory_ptr
TucanAddressBookTransportFactory::_nil()
{
  static _objref_TucanAddressBookTransportFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanAddressBookTransportFactory;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanAddressBookTransportFactory::_PD_repoId = "IDL:TucanAddressBookTransportFactory:1.0";

_objref_TucanAddressBookTransportFactory::~_objref_TucanAddressBookTransportFactory() {}

_objref_TucanAddressBookTransportFactory::_objref_TucanAddressBookTransportFactory(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanTransportFactory(mdri, p, id, lid),
   
   omniObjRef(TucanAddressBookTransportFactory::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanAddressBookTransportFactory::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanAddressBookTransportFactory::_PD_repoId) )
    return (TucanAddressBookTransportFactory_ptr) this;
  if( !strcmp(id, TucanTransportFactory::_PD_repoId) )
    return (TucanTransportFactory_ptr) this;
  
  return 0;
}

_pof_TucanAddressBookTransportFactory::~_pof_TucanAddressBookTransportFactory() {}

omniObjRef*
_pof_TucanAddressBookTransportFactory::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanAddressBookTransportFactory(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanAddressBookTransportFactory::is_a(const char* id) const
{
  if( !strcmp(id, TucanAddressBookTransportFactory::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanTransportFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanAddressBookTransportFactory _the_pof_TucanAddressBookTransportFactory;

_impl_TucanAddressBookTransportFactory::~_impl_TucanAddressBookTransportFactory() {}

CORBA::Boolean
_impl_TucanAddressBookTransportFactory::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanTransportFactory::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanAddressBookTransportFactory::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanAddressBookTransportFactory::_PD_repoId) )
    return (_impl_TucanAddressBookTransportFactory*) this;
  if( !strcmp(id, TucanTransportFactory::_PD_repoId) )
    return (_impl_TucanTransportFactory*) this;

  return 0;
}

const char*
_impl_TucanAddressBookTransportFactory::_mostDerivedRepoId()
{
  return TucanAddressBookTransportFactory::_PD_repoId;
}

TucanBbsAddress_ptr TucanBbsAddress_Helper::_nil() {
  return TucanBbsAddress::_nil();
}

CORBA::Boolean TucanBbsAddress_Helper::is_nil(TucanBbsAddress_ptr p) {
  return CORBA::is_nil(p);

}

void TucanBbsAddress_Helper::release(TucanBbsAddress_ptr p) {
  CORBA::release(p);
}

void TucanBbsAddress_Helper::duplicate(TucanBbsAddress_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanBbsAddress_Helper::NP_alignedSize(TucanBbsAddress_ptr obj, size_t offset) {
  return TucanBbsAddress::_alignedSize(obj, offset);
}

void TucanBbsAddress_Helper::marshalObjRef(TucanBbsAddress_ptr obj, NetBufferedStream& s) {
  TucanBbsAddress::_marshalObjRef(obj, s);
}

TucanBbsAddress_ptr TucanBbsAddress_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanBbsAddress::_unmarshalObjRef(s);
}

void TucanBbsAddress_Helper::marshalObjRef(TucanBbsAddress_ptr obj, MemBufferedStream& s) {
  TucanBbsAddress::_marshalObjRef(obj, s);
}

TucanBbsAddress_ptr TucanBbsAddress_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanBbsAddress::_unmarshalObjRef(s);
}

TucanBbsAddress_ptr
TucanBbsAddress::_duplicate(TucanBbsAddress_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanBbsAddress_ptr
TucanBbsAddress::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanBbsAddress_ptr
TucanBbsAddress::_nil()
{
  static _objref_TucanBbsAddress* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanBbsAddress;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanBbsAddress::_PD_repoId = "IDL:TucanBbsAddress:1.0";

_objref_TucanBbsAddress::~_objref_TucanBbsAddress() {}

_objref_TucanBbsAddress::_objref_TucanBbsAddress(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanAddress(mdri, p, id, lid),
   
   omniObjRef(TucanBbsAddress::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanBbsAddress::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanBbsAddress::_PD_repoId) )
    return (TucanBbsAddress_ptr) this;
  if( !strcmp(id, TucanAddress::_PD_repoId) )
    return (TucanAddress_ptr) this;
  
  return 0;
}

_pof_TucanBbsAddress::~_pof_TucanBbsAddress() {}

omniObjRef*
_pof_TucanBbsAddress::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanBbsAddress(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanBbsAddress::is_a(const char* id) const
{
  if( !strcmp(id, TucanBbsAddress::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanAddress::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanBbsAddress _the_pof_TucanBbsAddress;

_impl_TucanBbsAddress::~_impl_TucanBbsAddress() {}

CORBA::Boolean
_impl_TucanBbsAddress::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanAddress::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanBbsAddress::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanBbsAddress::_PD_repoId) )
    return (_impl_TucanBbsAddress*) this;
  if( !strcmp(id, TucanAddress::_PD_repoId) )
    return (_impl_TucanAddress*) this;

  return 0;
}

const char*
_impl_TucanBbsAddress::_mostDerivedRepoId()
{
  return TucanBbsAddress::_PD_repoId;
}

TucanBbsAddressFactory_ptr TucanBbsAddressFactory_Helper::_nil() {
  return TucanBbsAddressFactory::_nil();
}

CORBA::Boolean TucanBbsAddressFactory_Helper::is_nil(TucanBbsAddressFactory_ptr p) {
  return CORBA::is_nil(p);

}

void TucanBbsAddressFactory_Helper::release(TucanBbsAddressFactory_ptr p) {
  CORBA::release(p);
}

void TucanBbsAddressFactory_Helper::duplicate(TucanBbsAddressFactory_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanBbsAddressFactory_Helper::NP_alignedSize(TucanBbsAddressFactory_ptr obj, size_t offset) {
  return TucanBbsAddressFactory::_alignedSize(obj, offset);
}

void TucanBbsAddressFactory_Helper::marshalObjRef(TucanBbsAddressFactory_ptr obj, NetBufferedStream& s) {
  TucanBbsAddressFactory::_marshalObjRef(obj, s);
}

TucanBbsAddressFactory_ptr TucanBbsAddressFactory_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanBbsAddressFactory::_unmarshalObjRef(s);
}

void TucanBbsAddressFactory_Helper::marshalObjRef(TucanBbsAddressFactory_ptr obj, MemBufferedStream& s) {
  TucanBbsAddressFactory::_marshalObjRef(obj, s);
}

TucanBbsAddressFactory_ptr TucanBbsAddressFactory_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanBbsAddressFactory::_unmarshalObjRef(s);
}

TucanBbsAddressFactory_ptr
TucanBbsAddressFactory::_duplicate(TucanBbsAddressFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanBbsAddressFactory_ptr
TucanBbsAddressFactory::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanBbsAddressFactory_ptr
TucanBbsAddressFactory::_nil()
{
  static _objref_TucanBbsAddressFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanBbsAddressFactory;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanBbsAddressFactory::_PD_repoId = "IDL:TucanBbsAddressFactory:1.0";

_objref_TucanBbsAddressFactory::~_objref_TucanBbsAddressFactory() {}

_objref_TucanBbsAddressFactory::_objref_TucanBbsAddressFactory(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanAddressFactory(mdri, p, id, lid),
   
   omniObjRef(TucanBbsAddressFactory::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanBbsAddressFactory::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanBbsAddressFactory::_PD_repoId) )
    return (TucanBbsAddressFactory_ptr) this;
  if( !strcmp(id, TucanAddressFactory::_PD_repoId) )
    return (TucanAddressFactory_ptr) this;
  
  return 0;
}

_pof_TucanBbsAddressFactory::~_pof_TucanBbsAddressFactory() {}

omniObjRef*
_pof_TucanBbsAddressFactory::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanBbsAddressFactory(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanBbsAddressFactory::is_a(const char* id) const
{
  if( !strcmp(id, TucanBbsAddressFactory::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanAddressFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanBbsAddressFactory _the_pof_TucanBbsAddressFactory;

_impl_TucanBbsAddressFactory::~_impl_TucanBbsAddressFactory() {}

CORBA::Boolean
_impl_TucanBbsAddressFactory::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanAddressFactory::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanBbsAddressFactory::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanBbsAddressFactory::_PD_repoId) )
    return (_impl_TucanBbsAddressFactory*) this;
  if( !strcmp(id, TucanAddressFactory::_PD_repoId) )
    return (_impl_TucanAddressFactory*) this;

  return 0;
}

const char*
_impl_TucanBbsAddressFactory::_mostDerivedRepoId()
{
  return TucanBbsAddressFactory::_PD_repoId;
}

TucanBbsFolder_ptr TucanBbsFolder_Helper::_nil() {
  return TucanBbsFolder::_nil();
}

CORBA::Boolean TucanBbsFolder_Helper::is_nil(TucanBbsFolder_ptr p) {
  return CORBA::is_nil(p);

}

void TucanBbsFolder_Helper::release(TucanBbsFolder_ptr p) {
  CORBA::release(p);
}

void TucanBbsFolder_Helper::duplicate(TucanBbsFolder_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanBbsFolder_Helper::NP_alignedSize(TucanBbsFolder_ptr obj, size_t offset) {
  return TucanBbsFolder::_alignedSize(obj, offset);
}

void TucanBbsFolder_Helper::marshalObjRef(TucanBbsFolder_ptr obj, NetBufferedStream& s) {
  TucanBbsFolder::_marshalObjRef(obj, s);
}

TucanBbsFolder_ptr TucanBbsFolder_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanBbsFolder::_unmarshalObjRef(s);
}

void TucanBbsFolder_Helper::marshalObjRef(TucanBbsFolder_ptr obj, MemBufferedStream& s) {
  TucanBbsFolder::_marshalObjRef(obj, s);
}

TucanBbsFolder_ptr TucanBbsFolder_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanBbsFolder::_unmarshalObjRef(s);
}

TucanBbsFolder_ptr
TucanBbsFolder::_duplicate(TucanBbsFolder_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanBbsFolder_ptr
TucanBbsFolder::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanBbsFolder_ptr
TucanBbsFolder::_nil()
{
  static _objref_TucanBbsFolder* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanBbsFolder;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanBbsFolder::_PD_repoId = "IDL:TucanBbsFolder:1.0";

_objref_TucanBbsFolder::~_objref_TucanBbsFolder() {}

_objref_TucanBbsFolder::_objref_TucanBbsFolder(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanFolder(mdri, p, id, lid),
   
   omniObjRef(TucanBbsFolder::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanBbsFolder::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanBbsFolder::_PD_repoId) )
    return (TucanBbsFolder_ptr) this;
  if( !strcmp(id, TucanFolder::_PD_repoId) )
    return (TucanFolder_ptr) this;
  
  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _clong
class _0RL_cd_812ed87905f9c760_fb000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_fb000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::Long result() { return pd_result; }
  
  CORBA::Long pd_result;
};

void _0RL_cd_812ed87905f9c760_fb000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result <<= giop_client;
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_0c000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_fb000000* tcd = (_0RL_cd_812ed87905f9c760_fb000000*) cd;
  _impl_TucanBbsFolder* impl = (_impl_TucanBbsFolder*) svnt->_ptrToInterface(TucanBbsFolder::_PD_repoId);
  tcd->pd_result = impl->getPid();
}

CORBA::Long _objref_TucanBbsFolder::getPid()
{
  _0RL_cd_812ed87905f9c760_fb000000 _call_desc(_0RL_lcfn_812ed87905f9c760_0c000000, "getPid", 7, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  void_i_clong
class _0RL_cd_812ed87905f9c760_1c000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_1c000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, CORBA::Long a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  CORBA::Long arg_0;
  
};

CORBA::ULong _0RL_cd_812ed87905f9c760_1c000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_1c000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_2c000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_1c000000* tcd = (_0RL_cd_812ed87905f9c760_1c000000*) cd;
  _impl_TucanBbsFolder* impl = (_impl_TucanBbsFolder*) svnt->_ptrToInterface(TucanBbsFolder::_PD_repoId);
  impl->setPid(tcd->arg_0);
}

void _objref_TucanBbsFolder::setPid(CORBA::Long pid)
{
  _0RL_cd_812ed87905f9c760_1c000000 _call_desc(_0RL_lcfn_812ed87905f9c760_2c000000, "setPid", 7, 0, pid);
  
  _invoke(_call_desc);
  
}

// Proxy call descriptor class. Mangled signature:
//  _cshort
class _0RL_cd_812ed87905f9c760_3c000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_3c000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::Short result() { return pd_result; }
  
  CORBA::Short pd_result;
};

void _0RL_cd_812ed87905f9c760_3c000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result <<= giop_client;
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_4c000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_3c000000* tcd = (_0RL_cd_812ed87905f9c760_3c000000*) cd;
  _impl_TucanBbsFolder* impl = (_impl_TucanBbsFolder*) svnt->_ptrToInterface(TucanBbsFolder::_PD_repoId);
  tcd->pd_result = impl->getBid();
}

CORBA::Short _objref_TucanBbsFolder::getBid()
{
  _0RL_cd_812ed87905f9c760_3c000000 _call_desc(_0RL_lcfn_812ed87905f9c760_4c000000, "getBid", 7, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cshort
class _0RL_cd_812ed87905f9c760_5c000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_5c000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, CORBA::Short a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  CORBA::Short arg_0;
  
};

CORBA::ULong _0RL_cd_812ed87905f9c760_5c000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_2) + 2;
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_5c000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_6c000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_5c000000* tcd = (_0RL_cd_812ed87905f9c760_5c000000*) cd;
  _impl_TucanBbsFolder* impl = (_impl_TucanBbsFolder*) svnt->_ptrToInterface(TucanBbsFolder::_PD_repoId);
  impl->setBid(tcd->arg_0);
}

void _objref_TucanBbsFolder::setBid(CORBA::Short bid)
{
  _0RL_cd_812ed87905f9c760_5c000000 _call_desc(_0RL_lcfn_812ed87905f9c760_6c000000, "setBid", 7, 0, bid);
  
  _invoke(_call_desc);
  
}

_pof_TucanBbsFolder::~_pof_TucanBbsFolder() {}

omniObjRef*
_pof_TucanBbsFolder::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanBbsFolder(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanBbsFolder::is_a(const char* id) const
{
  if( !strcmp(id, TucanBbsFolder::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanFolder::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanBbsFolder _the_pof_TucanBbsFolder;

_impl_TucanBbsFolder::~_impl_TucanBbsFolder() {}

CORBA::Boolean
_impl_TucanBbsFolder::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "getPid") ) {
    
    giop_s.RequestReceived();
    CORBA::Long result;
    
    result = this->getPid();
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setPid") ) {
    
    CORBA::Long arg_pid;
    
    arg_pid <<= giop_s;
    
    giop_s.RequestReceived();
    
    this->setPid(arg_pid);
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getBid") ) {
    
    giop_s.RequestReceived();
    CORBA::Short result;
    
    result = this->getBid();
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_2) + 2;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setBid") ) {
    
    CORBA::Short arg_bid;
    
    arg_bid <<= giop_s;
    
    giop_s.RequestReceived();
    
    this->setBid(arg_bid);
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( _impl_TucanFolder::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanBbsFolder::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanBbsFolder::_PD_repoId) )
    return (_impl_TucanBbsFolder*) this;
  if( !strcmp(id, TucanFolder::_PD_repoId) )
    return (_impl_TucanFolder*) this;

  return 0;
}

const char*
_impl_TucanBbsFolder::_mostDerivedRepoId()
{
  return TucanBbsFolder::_PD_repoId;
}

TucanBbsFolderFactory_ptr TucanBbsFolderFactory_Helper::_nil() {
  return TucanBbsFolderFactory::_nil();
}

CORBA::Boolean TucanBbsFolderFactory_Helper::is_nil(TucanBbsFolderFactory_ptr p) {
  return CORBA::is_nil(p);

}

void TucanBbsFolderFactory_Helper::release(TucanBbsFolderFactory_ptr p) {
  CORBA::release(p);
}

void TucanBbsFolderFactory_Helper::duplicate(TucanBbsFolderFactory_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanBbsFolderFactory_Helper::NP_alignedSize(TucanBbsFolderFactory_ptr obj, size_t offset) {
  return TucanBbsFolderFactory::_alignedSize(obj, offset);
}

void TucanBbsFolderFactory_Helper::marshalObjRef(TucanBbsFolderFactory_ptr obj, NetBufferedStream& s) {
  TucanBbsFolderFactory::_marshalObjRef(obj, s);
}

TucanBbsFolderFactory_ptr TucanBbsFolderFactory_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanBbsFolderFactory::_unmarshalObjRef(s);
}

void TucanBbsFolderFactory_Helper::marshalObjRef(TucanBbsFolderFactory_ptr obj, MemBufferedStream& s) {
  TucanBbsFolderFactory::_marshalObjRef(obj, s);
}

TucanBbsFolderFactory_ptr TucanBbsFolderFactory_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanBbsFolderFactory::_unmarshalObjRef(s);
}

TucanBbsFolderFactory_ptr
TucanBbsFolderFactory::_duplicate(TucanBbsFolderFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanBbsFolderFactory_ptr
TucanBbsFolderFactory::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanBbsFolderFactory_ptr
TucanBbsFolderFactory::_nil()
{
  static _objref_TucanBbsFolderFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanBbsFolderFactory;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanBbsFolderFactory::_PD_repoId = "IDL:TucanBbsFolderFactory:1.0";

_objref_TucanBbsFolderFactory::~_objref_TucanBbsFolderFactory() {}

_objref_TucanBbsFolderFactory::_objref_TucanBbsFolderFactory(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanFolderFactory(mdri, p, id, lid),
   
   omniObjRef(TucanBbsFolderFactory::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanBbsFolderFactory::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanBbsFolderFactory::_PD_repoId) )
    return (TucanBbsFolderFactory_ptr) this;
  if( !strcmp(id, TucanFolderFactory::_PD_repoId) )
    return (TucanFolderFactory_ptr) this;
  
  return 0;
}

_pof_TucanBbsFolderFactory::~_pof_TucanBbsFolderFactory() {}

omniObjRef*
_pof_TucanBbsFolderFactory::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanBbsFolderFactory(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanBbsFolderFactory::is_a(const char* id) const
{
  if( !strcmp(id, TucanBbsFolderFactory::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanFolderFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanBbsFolderFactory _the_pof_TucanBbsFolderFactory;

_impl_TucanBbsFolderFactory::~_impl_TucanBbsFolderFactory() {}

CORBA::Boolean
_impl_TucanBbsFolderFactory::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanFolderFactory::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanBbsFolderFactory::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanBbsFolderFactory::_PD_repoId) )
    return (_impl_TucanBbsFolderFactory*) this;
  if( !strcmp(id, TucanFolderFactory::_PD_repoId) )
    return (_impl_TucanFolderFactory*) this;

  return 0;
}

const char*
_impl_TucanBbsFolderFactory::_mostDerivedRepoId()
{
  return TucanBbsFolderFactory::_PD_repoId;
}

TucanBbsMessage_ptr TucanBbsMessage_Helper::_nil() {
  return TucanBbsMessage::_nil();
}

CORBA::Boolean TucanBbsMessage_Helper::is_nil(TucanBbsMessage_ptr p) {
  return CORBA::is_nil(p);

}

void TucanBbsMessage_Helper::release(TucanBbsMessage_ptr p) {
  CORBA::release(p);
}

void TucanBbsMessage_Helper::duplicate(TucanBbsMessage_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanBbsMessage_Helper::NP_alignedSize(TucanBbsMessage_ptr obj, size_t offset) {
  return TucanBbsMessage::_alignedSize(obj, offset);
}

void TucanBbsMessage_Helper::marshalObjRef(TucanBbsMessage_ptr obj, NetBufferedStream& s) {
  TucanBbsMessage::_marshalObjRef(obj, s);
}

TucanBbsMessage_ptr TucanBbsMessage_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanBbsMessage::_unmarshalObjRef(s);
}

void TucanBbsMessage_Helper::marshalObjRef(TucanBbsMessage_ptr obj, MemBufferedStream& s) {
  TucanBbsMessage::_marshalObjRef(obj, s);
}

TucanBbsMessage_ptr TucanBbsMessage_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanBbsMessage::_unmarshalObjRef(s);
}

TucanBbsMessage_ptr
TucanBbsMessage::_duplicate(TucanBbsMessage_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanBbsMessage_ptr
TucanBbsMessage::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanBbsMessage_ptr
TucanBbsMessage::_nil()
{
  static _objref_TucanBbsMessage* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanBbsMessage;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanBbsMessage::_PD_repoId = "IDL:TucanBbsMessage:1.0";

_objref_TucanBbsMessage::~_objref_TucanBbsMessage() {}

_objref_TucanBbsMessage::_objref_TucanBbsMessage(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanMessage(mdri, p, id, lid),
   
   omniObjRef(TucanBbsMessage::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanBbsMessage::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanBbsMessage::_PD_repoId) )
    return (TucanBbsMessage_ptr) this;
  if( !strcmp(id, TucanMessage::_PD_repoId) )
    return (TucanMessage_ptr) this;
  
  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_7c000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_3c000000* tcd = (_0RL_cd_812ed87905f9c760_3c000000*) cd;
  _impl_TucanBbsMessage* impl = (_impl_TucanBbsMessage*) svnt->_ptrToInterface(TucanBbsMessage::_PD_repoId);
  tcd->pd_result = impl->getBid();
}

CORBA::Short _objref_TucanBbsMessage::getBid()
{
  _0RL_cd_812ed87905f9c760_3c000000 _call_desc(_0RL_lcfn_812ed87905f9c760_7c000000, "getBid", 7, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_8c000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_5c000000* tcd = (_0RL_cd_812ed87905f9c760_5c000000*) cd;
  _impl_TucanBbsMessage* impl = (_impl_TucanBbsMessage*) svnt->_ptrToInterface(TucanBbsMessage::_PD_repoId);
  impl->setBid(tcd->arg_0);
}

void _objref_TucanBbsMessage::setBid(CORBA::Short bid)
{
  _0RL_cd_812ed87905f9c760_5c000000 _call_desc(_0RL_lcfn_812ed87905f9c760_8c000000, "setBid", 7, 0, bid);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_9c000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_fb000000* tcd = (_0RL_cd_812ed87905f9c760_fb000000*) cd;
  _impl_TucanBbsMessage* impl = (_impl_TucanBbsMessage*) svnt->_ptrToInterface(TucanBbsMessage::_PD_repoId);
  tcd->pd_result = impl->getPid();
}

CORBA::Long _objref_TucanBbsMessage::getPid()
{
  _0RL_cd_812ed87905f9c760_fb000000 _call_desc(_0RL_lcfn_812ed87905f9c760_9c000000, "getPid", 7, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_ac000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_1c000000* tcd = (_0RL_cd_812ed87905f9c760_1c000000*) cd;
  _impl_TucanBbsMessage* impl = (_impl_TucanBbsMessage*) svnt->_ptrToInterface(TucanBbsMessage::_PD_repoId);
  impl->setPid(tcd->arg_0);
}

void _objref_TucanBbsMessage::setPid(CORBA::Long pid)
{
  _0RL_cd_812ed87905f9c760_1c000000 _call_desc(_0RL_lcfn_812ed87905f9c760_ac000000, "setPid", 7, 0, pid);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_bc000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_bb000000* tcd = (_0RL_cd_812ed87905f9c760_bb000000*) cd;
  _impl_TucanBbsMessage* impl = (_impl_TucanBbsMessage*) svnt->_ptrToInterface(TucanBbsMessage::_PD_repoId);
  tcd->pd_result = impl->getAuthor();
}

char* _objref_TucanBbsMessage::getAuthor()
{
  _0RL_cd_812ed87905f9c760_bb000000 _call_desc(_0RL_lcfn_812ed87905f9c760_bc000000, "getAuthor", 10, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_cc000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_db000000* tcd = (_0RL_cd_812ed87905f9c760_db000000*) cd;
  _impl_TucanBbsMessage* impl = (_impl_TucanBbsMessage*) svnt->_ptrToInterface(TucanBbsMessage::_PD_repoId);
  impl->setAuthor(tcd->arg_0);
}

void _objref_TucanBbsMessage::setAuthor(const char* author)
{
  _0RL_cd_812ed87905f9c760_db000000 _call_desc(_0RL_lcfn_812ed87905f9c760_cc000000, "setAuthor", 10, 0, author);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_dc000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_3c000000* tcd = (_0RL_cd_812ed87905f9c760_3c000000*) cd;
  _impl_TucanBbsMessage* impl = (_impl_TucanBbsMessage*) svnt->_ptrToInterface(TucanBbsMessage::_PD_repoId);
  tcd->pd_result = impl->getAccessType();
}

CORBA::Short _objref_TucanBbsMessage::getAccessType()
{
  _0RL_cd_812ed87905f9c760_3c000000 _call_desc(_0RL_lcfn_812ed87905f9c760_dc000000, "getAccessType", 14, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_ec000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_5c000000* tcd = (_0RL_cd_812ed87905f9c760_5c000000*) cd;
  _impl_TucanBbsMessage* impl = (_impl_TucanBbsMessage*) svnt->_ptrToInterface(TucanBbsMessage::_PD_repoId);
  impl->setAccessType(tcd->arg_0);
}

void _objref_TucanBbsMessage::setAccessType(CORBA::Short accesstype)
{
  _0RL_cd_812ed87905f9c760_5c000000 _call_desc(_0RL_lcfn_812ed87905f9c760_ec000000, "setAccessType", 14, 0, accesstype);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_fc000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_db000000* tcd = (_0RL_cd_812ed87905f9c760_db000000*) cd;
  _impl_TucanBbsMessage* impl = (_impl_TucanBbsMessage*) svnt->_ptrToInterface(TucanBbsMessage::_PD_repoId);
  impl->updateSubject(tcd->arg_0);
}

void _objref_TucanBbsMessage::updateSubject(const char* subject)
{
  _0RL_cd_812ed87905f9c760_db000000 _call_desc(_0RL_lcfn_812ed87905f9c760_fc000000, "updateSubject", 14, 0, subject);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_0d000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_db000000* tcd = (_0RL_cd_812ed87905f9c760_db000000*) cd;
  _impl_TucanBbsMessage* impl = (_impl_TucanBbsMessage*) svnt->_ptrToInterface(TucanBbsMessage::_PD_repoId);
  impl->updateBody(tcd->arg_0);
}

void _objref_TucanBbsMessage::updateBody(const char* body)
{
  _0RL_cd_812ed87905f9c760_db000000 _call_desc(_0RL_lcfn_812ed87905f9c760_0d000000, "updateBody", 11, 0, body);
  
  _invoke(_call_desc);
  
}

_pof_TucanBbsMessage::~_pof_TucanBbsMessage() {}

omniObjRef*
_pof_TucanBbsMessage::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanBbsMessage(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanBbsMessage::is_a(const char* id) const
{
  if( !strcmp(id, TucanBbsMessage::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanMessage::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanBbsMessage _the_pof_TucanBbsMessage;

_impl_TucanBbsMessage::~_impl_TucanBbsMessage() {}

CORBA::Boolean
_impl_TucanBbsMessage::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "getBid") ) {
    
    giop_s.RequestReceived();
    CORBA::Short result;
    
    result = this->getBid();
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_2) + 2;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setBid") ) {
    
    CORBA::Short arg_bid;
    
    arg_bid <<= giop_s;
    
    giop_s.RequestReceived();
    
    this->setBid(arg_bid);
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getPid") ) {
    
    giop_s.RequestReceived();
    CORBA::Long result;
    
    result = this->getPid();
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setPid") ) {
    
    CORBA::Long arg_pid;
    
    arg_pid <<= giop_s;
    
    giop_s.RequestReceived();
    
    this->setPid(arg_pid);
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getAuthor") ) {
    
    giop_s.RequestReceived();
    CORBA::String_var result;
    
    result = this->getAuthor();
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      msgsize += ((const char*) result) ? strlen((const char*) result) + 1 : 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      {
        CORBA::ULong _len = (((const char*) result)? strlen((const char*) result) + 1 : 1);
        
        _len >>= giop_s;
        if (_len > 1)
          giop_s.put_char_array((const CORBA::Char *)((const char*)result),_len);
        else {
          if ((const char*) result == 0 && omniORB::traceLevel > 1)
            _CORBA_null_string_ptr(0);
          CORBA::Char('\0') >>= giop_s;
        }
      }
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setAuthor") ) {
    
    CORBA::String_var arg_author;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_author = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    
    this->setAuthor(arg_author.in());
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getAccessType") ) {
    
    giop_s.RequestReceived();
    CORBA::Short result;
    
    result = this->getAccessType();
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_2) + 2;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setAccessType") ) {
    
    CORBA::Short arg_accesstype;
    
    arg_accesstype <<= giop_s;
    
    giop_s.RequestReceived();
    
    this->setAccessType(arg_accesstype);
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "updateSubject") ) {
    
    CORBA::String_var arg_subject;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_subject = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    
    this->updateSubject(arg_subject.in());
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "updateBody") ) {
    
    CORBA::String_var arg_body;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_body = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    
    this->updateBody(arg_body.in());
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( _impl_TucanMessage::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanBbsMessage::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanBbsMessage::_PD_repoId) )
    return (_impl_TucanBbsMessage*) this;
  if( !strcmp(id, TucanMessage::_PD_repoId) )
    return (_impl_TucanMessage*) this;

  return 0;
}

const char*
_impl_TucanBbsMessage::_mostDerivedRepoId()
{
  return TucanBbsMessage::_PD_repoId;
}

TucanBbsMessageFactory_ptr TucanBbsMessageFactory_Helper::_nil() {
  return TucanBbsMessageFactory::_nil();
}

CORBA::Boolean TucanBbsMessageFactory_Helper::is_nil(TucanBbsMessageFactory_ptr p) {
  return CORBA::is_nil(p);

}

void TucanBbsMessageFactory_Helper::release(TucanBbsMessageFactory_ptr p) {
  CORBA::release(p);
}

void TucanBbsMessageFactory_Helper::duplicate(TucanBbsMessageFactory_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanBbsMessageFactory_Helper::NP_alignedSize(TucanBbsMessageFactory_ptr obj, size_t offset) {
  return TucanBbsMessageFactory::_alignedSize(obj, offset);
}

void TucanBbsMessageFactory_Helper::marshalObjRef(TucanBbsMessageFactory_ptr obj, NetBufferedStream& s) {
  TucanBbsMessageFactory::_marshalObjRef(obj, s);
}

TucanBbsMessageFactory_ptr TucanBbsMessageFactory_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanBbsMessageFactory::_unmarshalObjRef(s);
}

void TucanBbsMessageFactory_Helper::marshalObjRef(TucanBbsMessageFactory_ptr obj, MemBufferedStream& s) {
  TucanBbsMessageFactory::_marshalObjRef(obj, s);
}

TucanBbsMessageFactory_ptr TucanBbsMessageFactory_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanBbsMessageFactory::_unmarshalObjRef(s);
}

TucanBbsMessageFactory_ptr
TucanBbsMessageFactory::_duplicate(TucanBbsMessageFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanBbsMessageFactory_ptr
TucanBbsMessageFactory::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanBbsMessageFactory_ptr
TucanBbsMessageFactory::_nil()
{
  static _objref_TucanBbsMessageFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanBbsMessageFactory;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanBbsMessageFactory::_PD_repoId = "IDL:TucanBbsMessageFactory:1.0";

_objref_TucanBbsMessageFactory::~_objref_TucanBbsMessageFactory() {}

_objref_TucanBbsMessageFactory::_objref_TucanBbsMessageFactory(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanMessageFactory(mdri, p, id, lid),
   
   omniObjRef(TucanBbsMessageFactory::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanBbsMessageFactory::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanBbsMessageFactory::_PD_repoId) )
    return (TucanBbsMessageFactory_ptr) this;
  if( !strcmp(id, TucanMessageFactory::_PD_repoId) )
    return (TucanMessageFactory_ptr) this;
  
  return 0;
}

_pof_TucanBbsMessageFactory::~_pof_TucanBbsMessageFactory() {}

omniObjRef*
_pof_TucanBbsMessageFactory::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanBbsMessageFactory(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanBbsMessageFactory::is_a(const char* id) const
{
  if( !strcmp(id, TucanBbsMessageFactory::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanMessageFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanBbsMessageFactory _the_pof_TucanBbsMessageFactory;

_impl_TucanBbsMessageFactory::~_impl_TucanBbsMessageFactory() {}

CORBA::Boolean
_impl_TucanBbsMessageFactory::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanMessageFactory::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanBbsMessageFactory::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanBbsMessageFactory::_PD_repoId) )
    return (_impl_TucanBbsMessageFactory*) this;
  if( !strcmp(id, TucanMessageFactory::_PD_repoId) )
    return (_impl_TucanMessageFactory*) this;

  return 0;
}

const char*
_impl_TucanBbsMessageFactory::_mostDerivedRepoId()
{
  return TucanBbsMessageFactory::_PD_repoId;
}

TucanBbsStore_ptr TucanBbsStore_Helper::_nil() {
  return TucanBbsStore::_nil();
}

CORBA::Boolean TucanBbsStore_Helper::is_nil(TucanBbsStore_ptr p) {
  return CORBA::is_nil(p);

}

void TucanBbsStore_Helper::release(TucanBbsStore_ptr p) {
  CORBA::release(p);
}

void TucanBbsStore_Helper::duplicate(TucanBbsStore_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanBbsStore_Helper::NP_alignedSize(TucanBbsStore_ptr obj, size_t offset) {
  return TucanBbsStore::_alignedSize(obj, offset);
}

void TucanBbsStore_Helper::marshalObjRef(TucanBbsStore_ptr obj, NetBufferedStream& s) {
  TucanBbsStore::_marshalObjRef(obj, s);
}

TucanBbsStore_ptr TucanBbsStore_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanBbsStore::_unmarshalObjRef(s);
}

void TucanBbsStore_Helper::marshalObjRef(TucanBbsStore_ptr obj, MemBufferedStream& s) {
  TucanBbsStore::_marshalObjRef(obj, s);
}

TucanBbsStore_ptr TucanBbsStore_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanBbsStore::_unmarshalObjRef(s);
}

TucanBbsStore_ptr
TucanBbsStore::_duplicate(TucanBbsStore_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanBbsStore_ptr
TucanBbsStore::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanBbsStore_ptr
TucanBbsStore::_nil()
{
  static _objref_TucanBbsStore* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanBbsStore;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanBbsStore::_PD_repoId = "IDL:TucanBbsStore:1.0";

_objref_TucanBbsStore::~_objref_TucanBbsStore() {}

_objref_TucanBbsStore::_objref_TucanBbsStore(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanStore(mdri, p, id, lid),
   
   omniObjRef(TucanBbsStore::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanBbsStore::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanBbsStore::_PD_repoId) )
    return (TucanBbsStore_ptr) this;
  if( !strcmp(id, TucanStore::_PD_repoId) )
    return (TucanStore_ptr) this;
  
  return 0;
}

_pof_TucanBbsStore::~_pof_TucanBbsStore() {}

omniObjRef*
_pof_TucanBbsStore::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanBbsStore(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanBbsStore::is_a(const char* id) const
{
  if( !strcmp(id, TucanBbsStore::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanStore::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanBbsStore _the_pof_TucanBbsStore;

_impl_TucanBbsStore::~_impl_TucanBbsStore() {}

CORBA::Boolean
_impl_TucanBbsStore::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanStore::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanBbsStore::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanBbsStore::_PD_repoId) )
    return (_impl_TucanBbsStore*) this;
  if( !strcmp(id, TucanStore::_PD_repoId) )
    return (_impl_TucanStore*) this;

  return 0;
}

const char*
_impl_TucanBbsStore::_mostDerivedRepoId()
{
  return TucanBbsStore::_PD_repoId;
}

TucanBbsStoreFactory_ptr TucanBbsStoreFactory_Helper::_nil() {
  return TucanBbsStoreFactory::_nil();
}

CORBA::Boolean TucanBbsStoreFactory_Helper::is_nil(TucanBbsStoreFactory_ptr p) {
  return CORBA::is_nil(p);

}

void TucanBbsStoreFactory_Helper::release(TucanBbsStoreFactory_ptr p) {
  CORBA::release(p);
}

void TucanBbsStoreFactory_Helper::duplicate(TucanBbsStoreFactory_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanBbsStoreFactory_Helper::NP_alignedSize(TucanBbsStoreFactory_ptr obj, size_t offset) {
  return TucanBbsStoreFactory::_alignedSize(obj, offset);
}

void TucanBbsStoreFactory_Helper::marshalObjRef(TucanBbsStoreFactory_ptr obj, NetBufferedStream& s) {
  TucanBbsStoreFactory::_marshalObjRef(obj, s);
}

TucanBbsStoreFactory_ptr TucanBbsStoreFactory_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanBbsStoreFactory::_unmarshalObjRef(s);
}

void TucanBbsStoreFactory_Helper::marshalObjRef(TucanBbsStoreFactory_ptr obj, MemBufferedStream& s) {
  TucanBbsStoreFactory::_marshalObjRef(obj, s);
}

TucanBbsStoreFactory_ptr TucanBbsStoreFactory_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanBbsStoreFactory::_unmarshalObjRef(s);
}

TucanBbsStoreFactory_ptr
TucanBbsStoreFactory::_duplicate(TucanBbsStoreFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanBbsStoreFactory_ptr
TucanBbsStoreFactory::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanBbsStoreFactory_ptr
TucanBbsStoreFactory::_nil()
{
  static _objref_TucanBbsStoreFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanBbsStoreFactory;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanBbsStoreFactory::_PD_repoId = "IDL:TucanBbsStoreFactory:1.0";

_objref_TucanBbsStoreFactory::~_objref_TucanBbsStoreFactory() {}

_objref_TucanBbsStoreFactory::_objref_TucanBbsStoreFactory(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanStoreFactory(mdri, p, id, lid),
   
   omniObjRef(TucanBbsStoreFactory::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanBbsStoreFactory::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanBbsStoreFactory::_PD_repoId) )
    return (TucanBbsStoreFactory_ptr) this;
  if( !strcmp(id, TucanStoreFactory::_PD_repoId) )
    return (TucanStoreFactory_ptr) this;
  
  return 0;
}

_pof_TucanBbsStoreFactory::~_pof_TucanBbsStoreFactory() {}

omniObjRef*
_pof_TucanBbsStoreFactory::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanBbsStoreFactory(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanBbsStoreFactory::is_a(const char* id) const
{
  if( !strcmp(id, TucanBbsStoreFactory::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanStoreFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanBbsStoreFactory _the_pof_TucanBbsStoreFactory;

_impl_TucanBbsStoreFactory::~_impl_TucanBbsStoreFactory() {}

CORBA::Boolean
_impl_TucanBbsStoreFactory::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanStoreFactory::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanBbsStoreFactory::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanBbsStoreFactory::_PD_repoId) )
    return (_impl_TucanBbsStoreFactory*) this;
  if( !strcmp(id, TucanStoreFactory::_PD_repoId) )
    return (_impl_TucanStoreFactory*) this;

  return 0;
}

const char*
_impl_TucanBbsStoreFactory::_mostDerivedRepoId()
{
  return TucanBbsStoreFactory::_PD_repoId;
}

TucanBbsTransport_ptr TucanBbsTransport_Helper::_nil() {
  return TucanBbsTransport::_nil();
}

CORBA::Boolean TucanBbsTransport_Helper::is_nil(TucanBbsTransport_ptr p) {
  return CORBA::is_nil(p);

}

void TucanBbsTransport_Helper::release(TucanBbsTransport_ptr p) {
  CORBA::release(p);
}

void TucanBbsTransport_Helper::duplicate(TucanBbsTransport_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanBbsTransport_Helper::NP_alignedSize(TucanBbsTransport_ptr obj, size_t offset) {
  return TucanBbsTransport::_alignedSize(obj, offset);
}

void TucanBbsTransport_Helper::marshalObjRef(TucanBbsTransport_ptr obj, NetBufferedStream& s) {
  TucanBbsTransport::_marshalObjRef(obj, s);
}

TucanBbsTransport_ptr TucanBbsTransport_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanBbsTransport::_unmarshalObjRef(s);
}

void TucanBbsTransport_Helper::marshalObjRef(TucanBbsTransport_ptr obj, MemBufferedStream& s) {
  TucanBbsTransport::_marshalObjRef(obj, s);
}

TucanBbsTransport_ptr TucanBbsTransport_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanBbsTransport::_unmarshalObjRef(s);
}

TucanBbsTransport_ptr
TucanBbsTransport::_duplicate(TucanBbsTransport_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanBbsTransport_ptr
TucanBbsTransport::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanBbsTransport_ptr
TucanBbsTransport::_nil()
{
  static _objref_TucanBbsTransport* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanBbsTransport;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanBbsTransport::_PD_repoId = "IDL:TucanBbsTransport:1.0";

_objref_TucanBbsTransport::~_objref_TucanBbsTransport() {}

_objref_TucanBbsTransport::_objref_TucanBbsTransport(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanTransport(mdri, p, id, lid),
   
   omniObjRef(TucanBbsTransport::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanBbsTransport::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanBbsTransport::_PD_repoId) )
    return (TucanBbsTransport_ptr) this;
  if( !strcmp(id, TucanTransport::_PD_repoId) )
    return (TucanTransport_ptr) this;
  
  return 0;
}

_pof_TucanBbsTransport::~_pof_TucanBbsTransport() {}

omniObjRef*
_pof_TucanBbsTransport::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanBbsTransport(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanBbsTransport::is_a(const char* id) const
{
  if( !strcmp(id, TucanBbsTransport::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanTransport::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanBbsTransport _the_pof_TucanBbsTransport;

_impl_TucanBbsTransport::~_impl_TucanBbsTransport() {}

CORBA::Boolean
_impl_TucanBbsTransport::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanTransport::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanBbsTransport::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanBbsTransport::_PD_repoId) )
    return (_impl_TucanBbsTransport*) this;
  if( !strcmp(id, TucanTransport::_PD_repoId) )
    return (_impl_TucanTransport*) this;

  return 0;
}

const char*
_impl_TucanBbsTransport::_mostDerivedRepoId()
{
  return TucanBbsTransport::_PD_repoId;
}

TucanBbsTransportFactory_ptr TucanBbsTransportFactory_Helper::_nil() {
  return TucanBbsTransportFactory::_nil();
}

CORBA::Boolean TucanBbsTransportFactory_Helper::is_nil(TucanBbsTransportFactory_ptr p) {
  return CORBA::is_nil(p);

}

void TucanBbsTransportFactory_Helper::release(TucanBbsTransportFactory_ptr p) {
  CORBA::release(p);
}

void TucanBbsTransportFactory_Helper::duplicate(TucanBbsTransportFactory_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanBbsTransportFactory_Helper::NP_alignedSize(TucanBbsTransportFactory_ptr obj, size_t offset) {
  return TucanBbsTransportFactory::_alignedSize(obj, offset);
}

void TucanBbsTransportFactory_Helper::marshalObjRef(TucanBbsTransportFactory_ptr obj, NetBufferedStream& s) {
  TucanBbsTransportFactory::_marshalObjRef(obj, s);
}

TucanBbsTransportFactory_ptr TucanBbsTransportFactory_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanBbsTransportFactory::_unmarshalObjRef(s);
}

void TucanBbsTransportFactory_Helper::marshalObjRef(TucanBbsTransportFactory_ptr obj, MemBufferedStream& s) {
  TucanBbsTransportFactory::_marshalObjRef(obj, s);
}

TucanBbsTransportFactory_ptr TucanBbsTransportFactory_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanBbsTransportFactory::_unmarshalObjRef(s);
}

TucanBbsTransportFactory_ptr
TucanBbsTransportFactory::_duplicate(TucanBbsTransportFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanBbsTransportFactory_ptr
TucanBbsTransportFactory::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanBbsTransportFactory_ptr
TucanBbsTransportFactory::_nil()
{
  static _objref_TucanBbsTransportFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanBbsTransportFactory;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanBbsTransportFactory::_PD_repoId = "IDL:TucanBbsTransportFactory:1.0";

_objref_TucanBbsTransportFactory::~_objref_TucanBbsTransportFactory() {}

_objref_TucanBbsTransportFactory::_objref_TucanBbsTransportFactory(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanTransportFactory(mdri, p, id, lid),
   
   omniObjRef(TucanBbsTransportFactory::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanBbsTransportFactory::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanBbsTransportFactory::_PD_repoId) )
    return (TucanBbsTransportFactory_ptr) this;
  if( !strcmp(id, TucanTransportFactory::_PD_repoId) )
    return (TucanTransportFactory_ptr) this;
  
  return 0;
}

_pof_TucanBbsTransportFactory::~_pof_TucanBbsTransportFactory() {}

omniObjRef*
_pof_TucanBbsTransportFactory::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanBbsTransportFactory(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanBbsTransportFactory::is_a(const char* id) const
{
  if( !strcmp(id, TucanBbsTransportFactory::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanTransportFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanBbsTransportFactory _the_pof_TucanBbsTransportFactory;

_impl_TucanBbsTransportFactory::~_impl_TucanBbsTransportFactory() {}

CORBA::Boolean
_impl_TucanBbsTransportFactory::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanTransportFactory::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanBbsTransportFactory::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanBbsTransportFactory::_PD_repoId) )
    return (_impl_TucanBbsTransportFactory*) this;
  if( !strcmp(id, TucanTransportFactory::_PD_repoId) )
    return (_impl_TucanTransportFactory*) this;

  return 0;
}

const char*
_impl_TucanBbsTransportFactory::_mostDerivedRepoId()
{
  return TucanBbsTransportFactory::_PD_repoId;
}

TucanCalendarAddress_ptr TucanCalendarAddress_Helper::_nil() {
  return TucanCalendarAddress::_nil();
}

CORBA::Boolean TucanCalendarAddress_Helper::is_nil(TucanCalendarAddress_ptr p) {
  return CORBA::is_nil(p);

}

void TucanCalendarAddress_Helper::release(TucanCalendarAddress_ptr p) {
  CORBA::release(p);
}

void TucanCalendarAddress_Helper::duplicate(TucanCalendarAddress_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanCalendarAddress_Helper::NP_alignedSize(TucanCalendarAddress_ptr obj, size_t offset) {
  return TucanCalendarAddress::_alignedSize(obj, offset);
}

void TucanCalendarAddress_Helper::marshalObjRef(TucanCalendarAddress_ptr obj, NetBufferedStream& s) {
  TucanCalendarAddress::_marshalObjRef(obj, s);
}

TucanCalendarAddress_ptr TucanCalendarAddress_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanCalendarAddress::_unmarshalObjRef(s);
}

void TucanCalendarAddress_Helper::marshalObjRef(TucanCalendarAddress_ptr obj, MemBufferedStream& s) {
  TucanCalendarAddress::_marshalObjRef(obj, s);
}

TucanCalendarAddress_ptr TucanCalendarAddress_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanCalendarAddress::_unmarshalObjRef(s);
}

TucanCalendarAddress_ptr
TucanCalendarAddress::_duplicate(TucanCalendarAddress_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanCalendarAddress_ptr
TucanCalendarAddress::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanCalendarAddress_ptr
TucanCalendarAddress::_nil()
{
  static _objref_TucanCalendarAddress* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanCalendarAddress;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanCalendarAddress::_PD_repoId = "IDL:TucanCalendarAddress:1.0";

_objref_TucanCalendarAddress::~_objref_TucanCalendarAddress() {}

_objref_TucanCalendarAddress::_objref_TucanCalendarAddress(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanAddress(mdri, p, id, lid),
   
   omniObjRef(TucanCalendarAddress::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanCalendarAddress::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanCalendarAddress::_PD_repoId) )
    return (TucanCalendarAddress_ptr) this;
  if( !strcmp(id, TucanAddress::_PD_repoId) )
    return (TucanAddress_ptr) this;
  
  return 0;
}

_pof_TucanCalendarAddress::~_pof_TucanCalendarAddress() {}

omniObjRef*
_pof_TucanCalendarAddress::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanCalendarAddress(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanCalendarAddress::is_a(const char* id) const
{
  if( !strcmp(id, TucanCalendarAddress::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanAddress::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanCalendarAddress _the_pof_TucanCalendarAddress;

_impl_TucanCalendarAddress::~_impl_TucanCalendarAddress() {}

CORBA::Boolean
_impl_TucanCalendarAddress::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanAddress::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanCalendarAddress::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanCalendarAddress::_PD_repoId) )
    return (_impl_TucanCalendarAddress*) this;
  if( !strcmp(id, TucanAddress::_PD_repoId) )
    return (_impl_TucanAddress*) this;

  return 0;
}

const char*
_impl_TucanCalendarAddress::_mostDerivedRepoId()
{
  return TucanCalendarAddress::_PD_repoId;
}

TucanCalendarAddressFactory_ptr TucanCalendarAddressFactory_Helper::_nil() {
  return TucanCalendarAddressFactory::_nil();
}

CORBA::Boolean TucanCalendarAddressFactory_Helper::is_nil(TucanCalendarAddressFactory_ptr p) {
  return CORBA::is_nil(p);

}

void TucanCalendarAddressFactory_Helper::release(TucanCalendarAddressFactory_ptr p) {
  CORBA::release(p);
}

void TucanCalendarAddressFactory_Helper::duplicate(TucanCalendarAddressFactory_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanCalendarAddressFactory_Helper::NP_alignedSize(TucanCalendarAddressFactory_ptr obj, size_t offset) {
  return TucanCalendarAddressFactory::_alignedSize(obj, offset);
}

void TucanCalendarAddressFactory_Helper::marshalObjRef(TucanCalendarAddressFactory_ptr obj, NetBufferedStream& s) {
  TucanCalendarAddressFactory::_marshalObjRef(obj, s);
}

TucanCalendarAddressFactory_ptr TucanCalendarAddressFactory_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanCalendarAddressFactory::_unmarshalObjRef(s);
}

void TucanCalendarAddressFactory_Helper::marshalObjRef(TucanCalendarAddressFactory_ptr obj, MemBufferedStream& s) {
  TucanCalendarAddressFactory::_marshalObjRef(obj, s);
}

TucanCalendarAddressFactory_ptr TucanCalendarAddressFactory_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanCalendarAddressFactory::_unmarshalObjRef(s);
}

TucanCalendarAddressFactory_ptr
TucanCalendarAddressFactory::_duplicate(TucanCalendarAddressFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanCalendarAddressFactory_ptr
TucanCalendarAddressFactory::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanCalendarAddressFactory_ptr
TucanCalendarAddressFactory::_nil()
{
  static _objref_TucanCalendarAddressFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanCalendarAddressFactory;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanCalendarAddressFactory::_PD_repoId = "IDL:TucanCalendarAddressFactory:1.0";

_objref_TucanCalendarAddressFactory::~_objref_TucanCalendarAddressFactory() {}

_objref_TucanCalendarAddressFactory::_objref_TucanCalendarAddressFactory(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanAddressFactory(mdri, p, id, lid),
   
   omniObjRef(TucanCalendarAddressFactory::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanCalendarAddressFactory::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanCalendarAddressFactory::_PD_repoId) )
    return (TucanCalendarAddressFactory_ptr) this;
  if( !strcmp(id, TucanAddressFactory::_PD_repoId) )
    return (TucanAddressFactory_ptr) this;
  
  return 0;
}

_pof_TucanCalendarAddressFactory::~_pof_TucanCalendarAddressFactory() {}

omniObjRef*
_pof_TucanCalendarAddressFactory::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanCalendarAddressFactory(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanCalendarAddressFactory::is_a(const char* id) const
{
  if( !strcmp(id, TucanCalendarAddressFactory::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanAddressFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanCalendarAddressFactory _the_pof_TucanCalendarAddressFactory;

_impl_TucanCalendarAddressFactory::~_impl_TucanCalendarAddressFactory() {}

CORBA::Boolean
_impl_TucanCalendarAddressFactory::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanAddressFactory::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanCalendarAddressFactory::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanCalendarAddressFactory::_PD_repoId) )
    return (_impl_TucanCalendarAddressFactory*) this;
  if( !strcmp(id, TucanAddressFactory::_PD_repoId) )
    return (_impl_TucanAddressFactory*) this;

  return 0;
}

const char*
_impl_TucanCalendarAddressFactory::_mostDerivedRepoId()
{
  return TucanCalendarAddressFactory::_PD_repoId;
}

TucanCalendarFolder_ptr TucanCalendarFolder_Helper::_nil() {
  return TucanCalendarFolder::_nil();
}

CORBA::Boolean TucanCalendarFolder_Helper::is_nil(TucanCalendarFolder_ptr p) {
  return CORBA::is_nil(p);

}

void TucanCalendarFolder_Helper::release(TucanCalendarFolder_ptr p) {
  CORBA::release(p);
}

void TucanCalendarFolder_Helper::duplicate(TucanCalendarFolder_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanCalendarFolder_Helper::NP_alignedSize(TucanCalendarFolder_ptr obj, size_t offset) {
  return TucanCalendarFolder::_alignedSize(obj, offset);
}

void TucanCalendarFolder_Helper::marshalObjRef(TucanCalendarFolder_ptr obj, NetBufferedStream& s) {
  TucanCalendarFolder::_marshalObjRef(obj, s);
}

TucanCalendarFolder_ptr TucanCalendarFolder_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanCalendarFolder::_unmarshalObjRef(s);
}

void TucanCalendarFolder_Helper::marshalObjRef(TucanCalendarFolder_ptr obj, MemBufferedStream& s) {
  TucanCalendarFolder::_marshalObjRef(obj, s);
}

TucanCalendarFolder_ptr TucanCalendarFolder_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanCalendarFolder::_unmarshalObjRef(s);
}

TucanCalendarFolder_ptr
TucanCalendarFolder::_duplicate(TucanCalendarFolder_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanCalendarFolder_ptr
TucanCalendarFolder::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanCalendarFolder_ptr
TucanCalendarFolder::_nil()
{
  static _objref_TucanCalendarFolder* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanCalendarFolder;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanCalendarFolder::_PD_repoId = "IDL:TucanCalendarFolder:1.0";

_objref_TucanCalendarFolder::~_objref_TucanCalendarFolder() {}

_objref_TucanCalendarFolder::_objref_TucanCalendarFolder(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanFolder(mdri, p, id, lid),
   
   omniObjRef(TucanCalendarFolder::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanCalendarFolder::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanCalendarFolder::_PD_repoId) )
    return (TucanCalendarFolder_ptr) this;
  if( !strcmp(id, TucanFolder::_PD_repoId) )
    return (TucanFolder_ptr) this;
  
  return 0;
}

_pof_TucanCalendarFolder::~_pof_TucanCalendarFolder() {}

omniObjRef*
_pof_TucanCalendarFolder::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanCalendarFolder(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanCalendarFolder::is_a(const char* id) const
{
  if( !strcmp(id, TucanCalendarFolder::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanFolder::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanCalendarFolder _the_pof_TucanCalendarFolder;

_impl_TucanCalendarFolder::~_impl_TucanCalendarFolder() {}

CORBA::Boolean
_impl_TucanCalendarFolder::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanFolder::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanCalendarFolder::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanCalendarFolder::_PD_repoId) )
    return (_impl_TucanCalendarFolder*) this;
  if( !strcmp(id, TucanFolder::_PD_repoId) )
    return (_impl_TucanFolder*) this;

  return 0;
}

const char*
_impl_TucanCalendarFolder::_mostDerivedRepoId()
{
  return TucanCalendarFolder::_PD_repoId;
}

TucanCalendarFolderFactory_ptr TucanCalendarFolderFactory_Helper::_nil() {
  return TucanCalendarFolderFactory::_nil();
}

CORBA::Boolean TucanCalendarFolderFactory_Helper::is_nil(TucanCalendarFolderFactory_ptr p) {
  return CORBA::is_nil(p);

}

void TucanCalendarFolderFactory_Helper::release(TucanCalendarFolderFactory_ptr p) {
  CORBA::release(p);
}

void TucanCalendarFolderFactory_Helper::duplicate(TucanCalendarFolderFactory_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanCalendarFolderFactory_Helper::NP_alignedSize(TucanCalendarFolderFactory_ptr obj, size_t offset) {
  return TucanCalendarFolderFactory::_alignedSize(obj, offset);
}

void TucanCalendarFolderFactory_Helper::marshalObjRef(TucanCalendarFolderFactory_ptr obj, NetBufferedStream& s) {
  TucanCalendarFolderFactory::_marshalObjRef(obj, s);
}

TucanCalendarFolderFactory_ptr TucanCalendarFolderFactory_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanCalendarFolderFactory::_unmarshalObjRef(s);
}

void TucanCalendarFolderFactory_Helper::marshalObjRef(TucanCalendarFolderFactory_ptr obj, MemBufferedStream& s) {
  TucanCalendarFolderFactory::_marshalObjRef(obj, s);
}

TucanCalendarFolderFactory_ptr TucanCalendarFolderFactory_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanCalendarFolderFactory::_unmarshalObjRef(s);
}

TucanCalendarFolderFactory_ptr
TucanCalendarFolderFactory::_duplicate(TucanCalendarFolderFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanCalendarFolderFactory_ptr
TucanCalendarFolderFactory::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanCalendarFolderFactory_ptr
TucanCalendarFolderFactory::_nil()
{
  static _objref_TucanCalendarFolderFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanCalendarFolderFactory;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanCalendarFolderFactory::_PD_repoId = "IDL:TucanCalendarFolderFactory:1.0";

_objref_TucanCalendarFolderFactory::~_objref_TucanCalendarFolderFactory() {}

_objref_TucanCalendarFolderFactory::_objref_TucanCalendarFolderFactory(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanFolderFactory(mdri, p, id, lid),
   
   omniObjRef(TucanCalendarFolderFactory::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanCalendarFolderFactory::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanCalendarFolderFactory::_PD_repoId) )
    return (TucanCalendarFolderFactory_ptr) this;
  if( !strcmp(id, TucanFolderFactory::_PD_repoId) )
    return (TucanFolderFactory_ptr) this;
  
  return 0;
}

_pof_TucanCalendarFolderFactory::~_pof_TucanCalendarFolderFactory() {}

omniObjRef*
_pof_TucanCalendarFolderFactory::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanCalendarFolderFactory(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanCalendarFolderFactory::is_a(const char* id) const
{
  if( !strcmp(id, TucanCalendarFolderFactory::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanFolderFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanCalendarFolderFactory _the_pof_TucanCalendarFolderFactory;

_impl_TucanCalendarFolderFactory::~_impl_TucanCalendarFolderFactory() {}

CORBA::Boolean
_impl_TucanCalendarFolderFactory::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanFolderFactory::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanCalendarFolderFactory::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanCalendarFolderFactory::_PD_repoId) )
    return (_impl_TucanCalendarFolderFactory*) this;
  if( !strcmp(id, TucanFolderFactory::_PD_repoId) )
    return (_impl_TucanFolderFactory*) this;

  return 0;
}

const char*
_impl_TucanCalendarFolderFactory::_mostDerivedRepoId()
{
  return TucanCalendarFolderFactory::_PD_repoId;
}

TucanCalendarMessage_ptr TucanCalendarMessage_Helper::_nil() {
  return TucanCalendarMessage::_nil();
}

CORBA::Boolean TucanCalendarMessage_Helper::is_nil(TucanCalendarMessage_ptr p) {
  return CORBA::is_nil(p);

}

void TucanCalendarMessage_Helper::release(TucanCalendarMessage_ptr p) {
  CORBA::release(p);
}

void TucanCalendarMessage_Helper::duplicate(TucanCalendarMessage_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanCalendarMessage_Helper::NP_alignedSize(TucanCalendarMessage_ptr obj, size_t offset) {
  return TucanCalendarMessage::_alignedSize(obj, offset);
}

void TucanCalendarMessage_Helper::marshalObjRef(TucanCalendarMessage_ptr obj, NetBufferedStream& s) {
  TucanCalendarMessage::_marshalObjRef(obj, s);
}

TucanCalendarMessage_ptr TucanCalendarMessage_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanCalendarMessage::_unmarshalObjRef(s);
}

void TucanCalendarMessage_Helper::marshalObjRef(TucanCalendarMessage_ptr obj, MemBufferedStream& s) {
  TucanCalendarMessage::_marshalObjRef(obj, s);
}

TucanCalendarMessage_ptr TucanCalendarMessage_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanCalendarMessage::_unmarshalObjRef(s);
}

TucanCalendarMessage_ptr
TucanCalendarMessage::_duplicate(TucanCalendarMessage_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanCalendarMessage_ptr
TucanCalendarMessage::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanCalendarMessage_ptr
TucanCalendarMessage::_nil()
{
  static _objref_TucanCalendarMessage* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanCalendarMessage;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanCalendarMessage::_PD_repoId = "IDL:TucanCalendarMessage:1.0";

_objref_TucanCalendarMessage::~_objref_TucanCalendarMessage() {}

_objref_TucanCalendarMessage::_objref_TucanCalendarMessage(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanMessage(mdri, p, id, lid),
   
   omniObjRef(TucanCalendarMessage::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanCalendarMessage::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanCalendarMessage::_PD_repoId) )
    return (TucanCalendarMessage_ptr) this;
  if( !strcmp(id, TucanMessage::_PD_repoId) )
    return (TucanMessage_ptr) this;
  
  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_1d000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_bb000000* tcd = (_0RL_cd_812ed87905f9c760_bb000000*) cd;
  _impl_TucanCalendarMessage* impl = (_impl_TucanCalendarMessage*) svnt->_ptrToInterface(TucanCalendarMessage::_PD_repoId);
  tcd->pd_result = impl->getTime();
}

char* _objref_TucanCalendarMessage::getTime()
{
  _0RL_cd_812ed87905f9c760_bb000000 _call_desc(_0RL_lcfn_812ed87905f9c760_1d000000, "getTime", 8, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_2d000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_db000000* tcd = (_0RL_cd_812ed87905f9c760_db000000*) cd;
  _impl_TucanCalendarMessage* impl = (_impl_TucanCalendarMessage*) svnt->_ptrToInterface(TucanCalendarMessage::_PD_repoId);
  impl->setTime(tcd->arg_0);
}

void _objref_TucanCalendarMessage::setTime(const char* time)
{
  _0RL_cd_812ed87905f9c760_db000000 _call_desc(_0RL_lcfn_812ed87905f9c760_2d000000, "setTime", 8, 0, time);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_3d000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_bb000000* tcd = (_0RL_cd_812ed87905f9c760_bb000000*) cd;
  _impl_TucanCalendarMessage* impl = (_impl_TucanCalendarMessage*) svnt->_ptrToInterface(TucanCalendarMessage::_PD_repoId);
  tcd->pd_result = impl->getNotifyDate();
}

char* _objref_TucanCalendarMessage::getNotifyDate()
{
  _0RL_cd_812ed87905f9c760_bb000000 _call_desc(_0RL_lcfn_812ed87905f9c760_3d000000, "getNotifyDate", 14, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_4d000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_db000000* tcd = (_0RL_cd_812ed87905f9c760_db000000*) cd;
  _impl_TucanCalendarMessage* impl = (_impl_TucanCalendarMessage*) svnt->_ptrToInterface(TucanCalendarMessage::_PD_repoId);
  impl->setNotifyDate(tcd->arg_0);
}

void _objref_TucanCalendarMessage::setNotifyDate(const char* date)
{
  _0RL_cd_812ed87905f9c760_db000000 _call_desc(_0RL_lcfn_812ed87905f9c760_4d000000, "setNotifyDate", 14, 0, date);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_5d000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_bb000000* tcd = (_0RL_cd_812ed87905f9c760_bb000000*) cd;
  _impl_TucanCalendarMessage* impl = (_impl_TucanCalendarMessage*) svnt->_ptrToInterface(TucanCalendarMessage::_PD_repoId);
  tcd->pd_result = impl->getNotifyTime();
}

char* _objref_TucanCalendarMessage::getNotifyTime()
{
  _0RL_cd_812ed87905f9c760_bb000000 _call_desc(_0RL_lcfn_812ed87905f9c760_5d000000, "getNotifyTime", 14, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_6d000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_db000000* tcd = (_0RL_cd_812ed87905f9c760_db000000*) cd;
  _impl_TucanCalendarMessage* impl = (_impl_TucanCalendarMessage*) svnt->_ptrToInterface(TucanCalendarMessage::_PD_repoId);
  impl->setNotifyTime(tcd->arg_0);
}

void _objref_TucanCalendarMessage::setNotifyTime(const char* time)
{
  _0RL_cd_812ed87905f9c760_db000000 _call_desc(_0RL_lcfn_812ed87905f9c760_6d000000, "setNotifyTime", 14, 0, time);
  
  _invoke(_call_desc);
  
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cboolean
class _0RL_cd_812ed87905f9c760_7d000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_7d000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, CORBA::Boolean a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  CORBA::Boolean arg_0;
  
};

CORBA::ULong _0RL_cd_812ed87905f9c760_7d000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize += 1;
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_7d000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_8d000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_7d000000* tcd = (_0RL_cd_812ed87905f9c760_7d000000*) cd;
  _impl_TucanCalendarMessage* impl = (_impl_TucanCalendarMessage*) svnt->_ptrToInterface(TucanCalendarMessage::_PD_repoId);
  impl->setNotified(tcd->arg_0);
}

void _objref_TucanCalendarMessage::setNotified(CORBA::Boolean notified)
{
  _0RL_cd_812ed87905f9c760_7d000000 _call_desc(_0RL_lcfn_812ed87905f9c760_8d000000, "setNotified", 12, 0, notified);
  
  _invoke(_call_desc);
  
}

// Proxy call descriptor class. Mangled signature:
//  _cboolean
class _0RL_cd_812ed87905f9c760_9d000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_9d000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::Boolean result() { return pd_result; }
  
  CORBA::Boolean pd_result;
};

void _0RL_cd_812ed87905f9c760_9d000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result <<= giop_client;
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_ad000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_9d000000* tcd = (_0RL_cd_812ed87905f9c760_9d000000*) cd;
  _impl_TucanCalendarMessage* impl = (_impl_TucanCalendarMessage*) svnt->_ptrToInterface(TucanCalendarMessage::_PD_repoId);
  tcd->pd_result = impl->isNotified();
}

CORBA::Boolean _objref_TucanCalendarMessage::isNotified()
{
  _0RL_cd_812ed87905f9c760_9d000000 _call_desc(_0RL_lcfn_812ed87905f9c760_ad000000, "isNotified", 11, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_bd000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_bb000000* tcd = (_0RL_cd_812ed87905f9c760_bb000000*) cd;
  _impl_TucanCalendarMessage* impl = (_impl_TucanCalendarMessage*) svnt->_ptrToInterface(TucanCalendarMessage::_PD_repoId);
  tcd->pd_result = impl->getNotification();
}

char* _objref_TucanCalendarMessage::getNotification()
{
  _0RL_cd_812ed87905f9c760_bb000000 _call_desc(_0RL_lcfn_812ed87905f9c760_bd000000, "getNotification", 16, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_cd000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_db000000* tcd = (_0RL_cd_812ed87905f9c760_db000000*) cd;
  _impl_TucanCalendarMessage* impl = (_impl_TucanCalendarMessage*) svnt->_ptrToInterface(TucanCalendarMessage::_PD_repoId);
  impl->setNotification(tcd->arg_0);
}

void _objref_TucanCalendarMessage::setNotification(const char* notification)
{
  _0RL_cd_812ed87905f9c760_db000000 _call_desc(_0RL_lcfn_812ed87905f9c760_cd000000, "setNotification", 16, 0, notification);
  
  _invoke(_call_desc);
  
}

_pof_TucanCalendarMessage::~_pof_TucanCalendarMessage() {}

omniObjRef*
_pof_TucanCalendarMessage::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanCalendarMessage(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanCalendarMessage::is_a(const char* id) const
{
  if( !strcmp(id, TucanCalendarMessage::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanMessage::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanCalendarMessage _the_pof_TucanCalendarMessage;

_impl_TucanCalendarMessage::~_impl_TucanCalendarMessage() {}

CORBA::Boolean
_impl_TucanCalendarMessage::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "getTime") ) {
    
    giop_s.RequestReceived();
    CORBA::String_var result;
    
    result = this->getTime();
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      msgsize += ((const char*) result) ? strlen((const char*) result) + 1 : 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      {
        CORBA::ULong _len = (((const char*) result)? strlen((const char*) result) + 1 : 1);
        
        _len >>= giop_s;
        if (_len > 1)
          giop_s.put_char_array((const CORBA::Char *)((const char*)result),_len);
        else {
          if ((const char*) result == 0 && omniORB::traceLevel > 1)
            _CORBA_null_string_ptr(0);
          CORBA::Char('\0') >>= giop_s;
        }
      }
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setTime") ) {
    
    CORBA::String_var arg_time;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_time = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    
    this->setTime(arg_time.in());
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getNotifyDate") ) {
    
    giop_s.RequestReceived();
    CORBA::String_var result;
    
    result = this->getNotifyDate();
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      msgsize += ((const char*) result) ? strlen((const char*) result) + 1 : 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      {
        CORBA::ULong _len = (((const char*) result)? strlen((const char*) result) + 1 : 1);
        
        _len >>= giop_s;
        if (_len > 1)
          giop_s.put_char_array((const CORBA::Char *)((const char*)result),_len);
        else {
          if ((const char*) result == 0 && omniORB::traceLevel > 1)
            _CORBA_null_string_ptr(0);
          CORBA::Char('\0') >>= giop_s;
        }
      }
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setNotifyDate") ) {
    
    CORBA::String_var arg_date;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_date = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    
    this->setNotifyDate(arg_date.in());
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getNotifyTime") ) {
    
    giop_s.RequestReceived();
    CORBA::String_var result;
    
    result = this->getNotifyTime();
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      msgsize += ((const char*) result) ? strlen((const char*) result) + 1 : 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      {
        CORBA::ULong _len = (((const char*) result)? strlen((const char*) result) + 1 : 1);
        
        _len >>= giop_s;
        if (_len > 1)
          giop_s.put_char_array((const CORBA::Char *)((const char*)result),_len);
        else {
          if ((const char*) result == 0 && omniORB::traceLevel > 1)
            _CORBA_null_string_ptr(0);
          CORBA::Char('\0') >>= giop_s;
        }
      }
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setNotifyTime") ) {
    
    CORBA::String_var arg_time;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_time = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    
    this->setNotifyTime(arg_time.in());
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setNotified") ) {
    
    CORBA::Boolean arg_notified;
    
    arg_notified <<= giop_s;
    
    giop_s.RequestReceived();
    
    this->setNotified(arg_notified);
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "isNotified") ) {
    
    giop_s.RequestReceived();
    CORBA::Boolean result;
    
    result = this->isNotified();
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize += 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getNotification") ) {
    
    giop_s.RequestReceived();
    CORBA::String_var result;
    
    result = this->getNotification();
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      msgsize += ((const char*) result) ? strlen((const char*) result) + 1 : 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      {
        CORBA::ULong _len = (((const char*) result)? strlen((const char*) result) + 1 : 1);
        
        _len >>= giop_s;
        if (_len > 1)
          giop_s.put_char_array((const CORBA::Char *)((const char*)result),_len);
        else {
          if ((const char*) result == 0 && omniORB::traceLevel > 1)
            _CORBA_null_string_ptr(0);
          CORBA::Char('\0') >>= giop_s;
        }
      }
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setNotification") ) {
    
    CORBA::String_var arg_notification;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_notification = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    
    this->setNotification(arg_notification.in());
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( _impl_TucanMessage::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanCalendarMessage::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanCalendarMessage::_PD_repoId) )
    return (_impl_TucanCalendarMessage*) this;
  if( !strcmp(id, TucanMessage::_PD_repoId) )
    return (_impl_TucanMessage*) this;

  return 0;
}

const char*
_impl_TucanCalendarMessage::_mostDerivedRepoId()
{
  return TucanCalendarMessage::_PD_repoId;
}

TucanCalendarMessageFactory_ptr TucanCalendarMessageFactory_Helper::_nil() {
  return TucanCalendarMessageFactory::_nil();
}

CORBA::Boolean TucanCalendarMessageFactory_Helper::is_nil(TucanCalendarMessageFactory_ptr p) {
  return CORBA::is_nil(p);

}

void TucanCalendarMessageFactory_Helper::release(TucanCalendarMessageFactory_ptr p) {
  CORBA::release(p);
}

void TucanCalendarMessageFactory_Helper::duplicate(TucanCalendarMessageFactory_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanCalendarMessageFactory_Helper::NP_alignedSize(TucanCalendarMessageFactory_ptr obj, size_t offset) {
  return TucanCalendarMessageFactory::_alignedSize(obj, offset);
}

void TucanCalendarMessageFactory_Helper::marshalObjRef(TucanCalendarMessageFactory_ptr obj, NetBufferedStream& s) {
  TucanCalendarMessageFactory::_marshalObjRef(obj, s);
}

TucanCalendarMessageFactory_ptr TucanCalendarMessageFactory_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanCalendarMessageFactory::_unmarshalObjRef(s);
}

void TucanCalendarMessageFactory_Helper::marshalObjRef(TucanCalendarMessageFactory_ptr obj, MemBufferedStream& s) {
  TucanCalendarMessageFactory::_marshalObjRef(obj, s);
}

TucanCalendarMessageFactory_ptr TucanCalendarMessageFactory_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanCalendarMessageFactory::_unmarshalObjRef(s);
}

TucanCalendarMessageFactory_ptr
TucanCalendarMessageFactory::_duplicate(TucanCalendarMessageFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanCalendarMessageFactory_ptr
TucanCalendarMessageFactory::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanCalendarMessageFactory_ptr
TucanCalendarMessageFactory::_nil()
{
  static _objref_TucanCalendarMessageFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanCalendarMessageFactory;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanCalendarMessageFactory::_PD_repoId = "IDL:TucanCalendarMessageFactory:1.0";

_objref_TucanCalendarMessageFactory::~_objref_TucanCalendarMessageFactory() {}

_objref_TucanCalendarMessageFactory::_objref_TucanCalendarMessageFactory(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanMessageFactory(mdri, p, id, lid),
   
   omniObjRef(TucanCalendarMessageFactory::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanCalendarMessageFactory::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanCalendarMessageFactory::_PD_repoId) )
    return (TucanCalendarMessageFactory_ptr) this;
  if( !strcmp(id, TucanMessageFactory::_PD_repoId) )
    return (TucanMessageFactory_ptr) this;
  
  return 0;
}

_pof_TucanCalendarMessageFactory::~_pof_TucanCalendarMessageFactory() {}

omniObjRef*
_pof_TucanCalendarMessageFactory::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanCalendarMessageFactory(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanCalendarMessageFactory::is_a(const char* id) const
{
  if( !strcmp(id, TucanCalendarMessageFactory::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanMessageFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanCalendarMessageFactory _the_pof_TucanCalendarMessageFactory;

_impl_TucanCalendarMessageFactory::~_impl_TucanCalendarMessageFactory() {}

CORBA::Boolean
_impl_TucanCalendarMessageFactory::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanMessageFactory::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanCalendarMessageFactory::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanCalendarMessageFactory::_PD_repoId) )
    return (_impl_TucanCalendarMessageFactory*) this;
  if( !strcmp(id, TucanMessageFactory::_PD_repoId) )
    return (_impl_TucanMessageFactory*) this;

  return 0;
}

const char*
_impl_TucanCalendarMessageFactory::_mostDerivedRepoId()
{
  return TucanCalendarMessageFactory::_PD_repoId;
}

TucanCalendarStore_ptr TucanCalendarStore_Helper::_nil() {
  return TucanCalendarStore::_nil();
}

CORBA::Boolean TucanCalendarStore_Helper::is_nil(TucanCalendarStore_ptr p) {
  return CORBA::is_nil(p);

}

void TucanCalendarStore_Helper::release(TucanCalendarStore_ptr p) {
  CORBA::release(p);
}

void TucanCalendarStore_Helper::duplicate(TucanCalendarStore_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanCalendarStore_Helper::NP_alignedSize(TucanCalendarStore_ptr obj, size_t offset) {
  return TucanCalendarStore::_alignedSize(obj, offset);
}

void TucanCalendarStore_Helper::marshalObjRef(TucanCalendarStore_ptr obj, NetBufferedStream& s) {
  TucanCalendarStore::_marshalObjRef(obj, s);
}

TucanCalendarStore_ptr TucanCalendarStore_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanCalendarStore::_unmarshalObjRef(s);
}

void TucanCalendarStore_Helper::marshalObjRef(TucanCalendarStore_ptr obj, MemBufferedStream& s) {
  TucanCalendarStore::_marshalObjRef(obj, s);
}

TucanCalendarStore_ptr TucanCalendarStore_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanCalendarStore::_unmarshalObjRef(s);
}

TucanCalendarStore_ptr
TucanCalendarStore::_duplicate(TucanCalendarStore_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanCalendarStore_ptr
TucanCalendarStore::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanCalendarStore_ptr
TucanCalendarStore::_nil()
{
  static _objref_TucanCalendarStore* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanCalendarStore;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanCalendarStore::_PD_repoId = "IDL:TucanCalendarStore:1.0";

_objref_TucanCalendarStore::~_objref_TucanCalendarStore() {}

_objref_TucanCalendarStore::_objref_TucanCalendarStore(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanStore(mdri, p, id, lid),
   
   omniObjRef(TucanCalendarStore::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanCalendarStore::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanCalendarStore::_PD_repoId) )
    return (TucanCalendarStore_ptr) this;
  if( !strcmp(id, TucanStore::_PD_repoId) )
    return (TucanStore_ptr) this;
  
  return 0;
}

_pof_TucanCalendarStore::~_pof_TucanCalendarStore() {}

omniObjRef*
_pof_TucanCalendarStore::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanCalendarStore(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanCalendarStore::is_a(const char* id) const
{
  if( !strcmp(id, TucanCalendarStore::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanStore::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanCalendarStore _the_pof_TucanCalendarStore;

_impl_TucanCalendarStore::~_impl_TucanCalendarStore() {}

CORBA::Boolean
_impl_TucanCalendarStore::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanStore::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanCalendarStore::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanCalendarStore::_PD_repoId) )
    return (_impl_TucanCalendarStore*) this;
  if( !strcmp(id, TucanStore::_PD_repoId) )
    return (_impl_TucanStore*) this;

  return 0;
}

const char*
_impl_TucanCalendarStore::_mostDerivedRepoId()
{
  return TucanCalendarStore::_PD_repoId;
}

TucanCalendarStoreFactory_ptr TucanCalendarStoreFactory_Helper::_nil() {
  return TucanCalendarStoreFactory::_nil();
}

CORBA::Boolean TucanCalendarStoreFactory_Helper::is_nil(TucanCalendarStoreFactory_ptr p) {
  return CORBA::is_nil(p);

}

void TucanCalendarStoreFactory_Helper::release(TucanCalendarStoreFactory_ptr p) {
  CORBA::release(p);
}

void TucanCalendarStoreFactory_Helper::duplicate(TucanCalendarStoreFactory_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanCalendarStoreFactory_Helper::NP_alignedSize(TucanCalendarStoreFactory_ptr obj, size_t offset) {
  return TucanCalendarStoreFactory::_alignedSize(obj, offset);
}

void TucanCalendarStoreFactory_Helper::marshalObjRef(TucanCalendarStoreFactory_ptr obj, NetBufferedStream& s) {
  TucanCalendarStoreFactory::_marshalObjRef(obj, s);
}

TucanCalendarStoreFactory_ptr TucanCalendarStoreFactory_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanCalendarStoreFactory::_unmarshalObjRef(s);
}

void TucanCalendarStoreFactory_Helper::marshalObjRef(TucanCalendarStoreFactory_ptr obj, MemBufferedStream& s) {
  TucanCalendarStoreFactory::_marshalObjRef(obj, s);
}

TucanCalendarStoreFactory_ptr TucanCalendarStoreFactory_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanCalendarStoreFactory::_unmarshalObjRef(s);
}

TucanCalendarStoreFactory_ptr
TucanCalendarStoreFactory::_duplicate(TucanCalendarStoreFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanCalendarStoreFactory_ptr
TucanCalendarStoreFactory::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanCalendarStoreFactory_ptr
TucanCalendarStoreFactory::_nil()
{
  static _objref_TucanCalendarStoreFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanCalendarStoreFactory;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanCalendarStoreFactory::_PD_repoId = "IDL:TucanCalendarStoreFactory:1.0";

_objref_TucanCalendarStoreFactory::~_objref_TucanCalendarStoreFactory() {}

_objref_TucanCalendarStoreFactory::_objref_TucanCalendarStoreFactory(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanStoreFactory(mdri, p, id, lid),
   
   omniObjRef(TucanCalendarStoreFactory::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanCalendarStoreFactory::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanCalendarStoreFactory::_PD_repoId) )
    return (TucanCalendarStoreFactory_ptr) this;
  if( !strcmp(id, TucanStoreFactory::_PD_repoId) )
    return (TucanStoreFactory_ptr) this;
  
  return 0;
}

_pof_TucanCalendarStoreFactory::~_pof_TucanCalendarStoreFactory() {}

omniObjRef*
_pof_TucanCalendarStoreFactory::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanCalendarStoreFactory(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanCalendarStoreFactory::is_a(const char* id) const
{
  if( !strcmp(id, TucanCalendarStoreFactory::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanStoreFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanCalendarStoreFactory _the_pof_TucanCalendarStoreFactory;

_impl_TucanCalendarStoreFactory::~_impl_TucanCalendarStoreFactory() {}

CORBA::Boolean
_impl_TucanCalendarStoreFactory::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanStoreFactory::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanCalendarStoreFactory::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanCalendarStoreFactory::_PD_repoId) )
    return (_impl_TucanCalendarStoreFactory*) this;
  if( !strcmp(id, TucanStoreFactory::_PD_repoId) )
    return (_impl_TucanStoreFactory*) this;

  return 0;
}

const char*
_impl_TucanCalendarStoreFactory::_mostDerivedRepoId()
{
  return TucanCalendarStoreFactory::_PD_repoId;
}

TucanCalendarTransport_ptr TucanCalendarTransport_Helper::_nil() {
  return TucanCalendarTransport::_nil();
}

CORBA::Boolean TucanCalendarTransport_Helper::is_nil(TucanCalendarTransport_ptr p) {
  return CORBA::is_nil(p);

}

void TucanCalendarTransport_Helper::release(TucanCalendarTransport_ptr p) {
  CORBA::release(p);
}

void TucanCalendarTransport_Helper::duplicate(TucanCalendarTransport_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanCalendarTransport_Helper::NP_alignedSize(TucanCalendarTransport_ptr obj, size_t offset) {
  return TucanCalendarTransport::_alignedSize(obj, offset);
}

void TucanCalendarTransport_Helper::marshalObjRef(TucanCalendarTransport_ptr obj, NetBufferedStream& s) {
  TucanCalendarTransport::_marshalObjRef(obj, s);
}

TucanCalendarTransport_ptr TucanCalendarTransport_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanCalendarTransport::_unmarshalObjRef(s);
}

void TucanCalendarTransport_Helper::marshalObjRef(TucanCalendarTransport_ptr obj, MemBufferedStream& s) {
  TucanCalendarTransport::_marshalObjRef(obj, s);
}

TucanCalendarTransport_ptr TucanCalendarTransport_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanCalendarTransport::_unmarshalObjRef(s);
}

TucanCalendarTransport_ptr
TucanCalendarTransport::_duplicate(TucanCalendarTransport_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanCalendarTransport_ptr
TucanCalendarTransport::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanCalendarTransport_ptr
TucanCalendarTransport::_nil()
{
  static _objref_TucanCalendarTransport* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanCalendarTransport;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanCalendarTransport::_PD_repoId = "IDL:TucanCalendarTransport:1.0";

_objref_TucanCalendarTransport::~_objref_TucanCalendarTransport() {}

_objref_TucanCalendarTransport::_objref_TucanCalendarTransport(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanTransport(mdri, p, id, lid),
   
   omniObjRef(TucanCalendarTransport::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanCalendarTransport::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanCalendarTransport::_PD_repoId) )
    return (TucanCalendarTransport_ptr) this;
  if( !strcmp(id, TucanTransport::_PD_repoId) )
    return (TucanTransport_ptr) this;
  
  return 0;
}

_pof_TucanCalendarTransport::~_pof_TucanCalendarTransport() {}

omniObjRef*
_pof_TucanCalendarTransport::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanCalendarTransport(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanCalendarTransport::is_a(const char* id) const
{
  if( !strcmp(id, TucanCalendarTransport::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanTransport::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanCalendarTransport _the_pof_TucanCalendarTransport;

_impl_TucanCalendarTransport::~_impl_TucanCalendarTransport() {}

CORBA::Boolean
_impl_TucanCalendarTransport::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanTransport::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanCalendarTransport::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanCalendarTransport::_PD_repoId) )
    return (_impl_TucanCalendarTransport*) this;
  if( !strcmp(id, TucanTransport::_PD_repoId) )
    return (_impl_TucanTransport*) this;

  return 0;
}

const char*
_impl_TucanCalendarTransport::_mostDerivedRepoId()
{
  return TucanCalendarTransport::_PD_repoId;
}

TucanCalendarTransportFactory_ptr TucanCalendarTransportFactory_Helper::_nil() {
  return TucanCalendarTransportFactory::_nil();
}

CORBA::Boolean TucanCalendarTransportFactory_Helper::is_nil(TucanCalendarTransportFactory_ptr p) {
  return CORBA::is_nil(p);

}

void TucanCalendarTransportFactory_Helper::release(TucanCalendarTransportFactory_ptr p) {
  CORBA::release(p);
}

void TucanCalendarTransportFactory_Helper::duplicate(TucanCalendarTransportFactory_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanCalendarTransportFactory_Helper::NP_alignedSize(TucanCalendarTransportFactory_ptr obj, size_t offset) {
  return TucanCalendarTransportFactory::_alignedSize(obj, offset);
}

void TucanCalendarTransportFactory_Helper::marshalObjRef(TucanCalendarTransportFactory_ptr obj, NetBufferedStream& s) {
  TucanCalendarTransportFactory::_marshalObjRef(obj, s);
}

TucanCalendarTransportFactory_ptr TucanCalendarTransportFactory_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanCalendarTransportFactory::_unmarshalObjRef(s);
}

void TucanCalendarTransportFactory_Helper::marshalObjRef(TucanCalendarTransportFactory_ptr obj, MemBufferedStream& s) {
  TucanCalendarTransportFactory::_marshalObjRef(obj, s);
}

TucanCalendarTransportFactory_ptr TucanCalendarTransportFactory_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanCalendarTransportFactory::_unmarshalObjRef(s);
}

TucanCalendarTransportFactory_ptr
TucanCalendarTransportFactory::_duplicate(TucanCalendarTransportFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanCalendarTransportFactory_ptr
TucanCalendarTransportFactory::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanCalendarTransportFactory_ptr
TucanCalendarTransportFactory::_nil()
{
  static _objref_TucanCalendarTransportFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanCalendarTransportFactory;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanCalendarTransportFactory::_PD_repoId = "IDL:TucanCalendarTransportFactory:1.0";

_objref_TucanCalendarTransportFactory::~_objref_TucanCalendarTransportFactory() {}

_objref_TucanCalendarTransportFactory::_objref_TucanCalendarTransportFactory(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanTransportFactory(mdri, p, id, lid),
   
   omniObjRef(TucanCalendarTransportFactory::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanCalendarTransportFactory::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanCalendarTransportFactory::_PD_repoId) )
    return (TucanCalendarTransportFactory_ptr) this;
  if( !strcmp(id, TucanTransportFactory::_PD_repoId) )
    return (TucanTransportFactory_ptr) this;
  
  return 0;
}

_pof_TucanCalendarTransportFactory::~_pof_TucanCalendarTransportFactory() {}

omniObjRef*
_pof_TucanCalendarTransportFactory::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanCalendarTransportFactory(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanCalendarTransportFactory::is_a(const char* id) const
{
  if( !strcmp(id, TucanCalendarTransportFactory::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanTransportFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanCalendarTransportFactory _the_pof_TucanCalendarTransportFactory;

_impl_TucanCalendarTransportFactory::~_impl_TucanCalendarTransportFactory() {}

CORBA::Boolean
_impl_TucanCalendarTransportFactory::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanTransportFactory::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanCalendarTransportFactory::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanCalendarTransportFactory::_PD_repoId) )
    return (_impl_TucanCalendarTransportFactory*) this;
  if( !strcmp(id, TucanTransportFactory::_PD_repoId) )
    return (_impl_TucanTransportFactory*) this;

  return 0;
}

const char*
_impl_TucanCalendarTransportFactory::_mostDerivedRepoId()
{
  return TucanCalendarTransportFactory::_PD_repoId;
}

size_t
TucanDirectory::AddressCard::_NP_alignedSize(size_t _initialoffset) const
{
  CORBA::ULong _msgsize = _initialoffset;
  _msgsize = uid._NP_alignedSize(_msgsize);

  _msgsize = FirstName._NP_alignedSize(_msgsize);

  _msgsize = LastName._NP_alignedSize(_msgsize);

  _msgsize = NickName._NP_alignedSize(_msgsize);

  _msgsize = Title._NP_alignedSize(_msgsize);

  _msgsize = Email._NP_alignedSize(_msgsize);

  _msgsize = Street._NP_alignedSize(_msgsize);

  _msgsize = City._NP_alignedSize(_msgsize);

  _msgsize = State._NP_alignedSize(_msgsize);

  _msgsize = Zip._NP_alignedSize(_msgsize);

  _msgsize = Country._NP_alignedSize(_msgsize);

  _msgsize = Phone._NP_alignedSize(_msgsize);

  _msgsize = Homepage._NP_alignedSize(_msgsize);

  _msgsize = Org._NP_alignedSize(_msgsize);

  _msgsize = Other._NP_alignedSize(_msgsize);

  return _msgsize;
}

void
TucanDirectory::AddressCard::operator>>= (NetBufferedStream &_n) const
{
  uid >>= _n;
  FirstName >>= _n;
  LastName >>= _n;
  NickName >>= _n;
  Title >>= _n;
  Email >>= _n;
  Street >>= _n;
  City >>= _n;
  State >>= _n;
  Zip >>= _n;
  Country >>= _n;
  Phone >>= _n;
  Homepage >>= _n;
  Org >>= _n;
  Other >>= _n;
  
}

void
TucanDirectory::AddressCard::operator<<= (NetBufferedStream &_n)
{
  uid <<= _n;
  FirstName <<= _n;
  LastName <<= _n;
  NickName <<= _n;
  Title <<= _n;
  Email <<= _n;
  Street <<= _n;
  City <<= _n;
  State <<= _n;
  Zip <<= _n;
  Country <<= _n;
  Phone <<= _n;
  Homepage <<= _n;
  Org <<= _n;
  Other <<= _n;
  
}

void
TucanDirectory::AddressCard::operator>>= (MemBufferedStream &_n) const
{
  uid >>= _n;
  FirstName >>= _n;
  LastName >>= _n;
  NickName >>= _n;
  Title >>= _n;
  Email >>= _n;
  Street >>= _n;
  City >>= _n;
  State >>= _n;
  Zip >>= _n;
  Country >>= _n;
  Phone >>= _n;
  Homepage >>= _n;
  Org >>= _n;
  Other >>= _n;
  
}

void
TucanDirectory::AddressCard::operator<<= (MemBufferedStream &_n)
{
  uid <<= _n;
  FirstName <<= _n;
  LastName <<= _n;
  NickName <<= _n;
  Title <<= _n;
  Email <<= _n;
  Street <<= _n;
  City <<= _n;
  State <<= _n;
  Zip <<= _n;
  Country <<= _n;
  Phone <<= _n;
  Homepage <<= _n;
  Org <<= _n;
  Other <<= _n;
  
}

TucanDirectory_ptr TucanDirectory_Helper::_nil() {
  return TucanDirectory::_nil();
}

CORBA::Boolean TucanDirectory_Helper::is_nil(TucanDirectory_ptr p) {
  return CORBA::is_nil(p);

}

void TucanDirectory_Helper::release(TucanDirectory_ptr p) {
  CORBA::release(p);
}

void TucanDirectory_Helper::duplicate(TucanDirectory_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanDirectory_Helper::NP_alignedSize(TucanDirectory_ptr obj, size_t offset) {
  return TucanDirectory::_alignedSize(obj, offset);
}

void TucanDirectory_Helper::marshalObjRef(TucanDirectory_ptr obj, NetBufferedStream& s) {
  TucanDirectory::_marshalObjRef(obj, s);
}

TucanDirectory_ptr TucanDirectory_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanDirectory::_unmarshalObjRef(s);
}

void TucanDirectory_Helper::marshalObjRef(TucanDirectory_ptr obj, MemBufferedStream& s) {
  TucanDirectory::_marshalObjRef(obj, s);
}

TucanDirectory_ptr TucanDirectory_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanDirectory::_unmarshalObjRef(s);
}

TucanDirectory_ptr
TucanDirectory::_duplicate(TucanDirectory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanDirectory_ptr
TucanDirectory::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanDirectory_ptr
TucanDirectory::_nil()
{
  static _objref_TucanDirectory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanDirectory;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanDirectory::_PD_repoId = "IDL:TucanDirectory:1.0";

_objref_TucanDirectory::~_objref_TucanDirectory() {}

_objref_TucanDirectory::_objref_TucanDirectory(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   
   omniObjRef(TucanDirectory::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanDirectory::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanDirectory::_PD_repoId) )
    return (TucanDirectory_ptr) this;
  
  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cTucanAuth
class _0RL_cd_812ed87905f9c760_dd000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_dd000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, TucanAuth_ptr a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  TucanAuth_ptr arg_0;
  
};

CORBA::ULong _0RL_cd_812ed87905f9c760_dd000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = TucanAuth_Helper::NP_alignedSize(arg_0, msgsize);
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_dd000000::marshalArguments(GIOP_C& giop_client)
{
  TucanAuth_Helper::marshalObjRef(arg_0,giop_client);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_ed000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_dd000000* tcd = (_0RL_cd_812ed87905f9c760_dd000000*) cd;
  _impl_TucanDirectory* impl = (_impl_TucanDirectory*) svnt->_ptrToInterface(TucanDirectory::_PD_repoId);
  impl->setAuth(tcd->arg_0);
}

void _objref_TucanDirectory::setAuth(TucanAuth_ptr myAuth)
{
  _0RL_cd_812ed87905f9c760_dd000000 _call_desc(_0RL_lcfn_812ed87905f9c760_ed000000, "setAuth", 8, 0, myAuth);
  
  _invoke(_call_desc);
  
}

// Proxy call descriptor class. Mangled signature:
//  _cTucanAuth
class _0RL_cd_812ed87905f9c760_fd000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_fd000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline TucanAuth_ptr result() { return pd_result; }
  
  TucanAuth_ptr pd_result;
};

void _0RL_cd_812ed87905f9c760_fd000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = TucanAuth_Helper::unmarshalObjRef(giop_client);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_0e000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_fd000000* tcd = (_0RL_cd_812ed87905f9c760_fd000000*) cd;
  _impl_TucanDirectory* impl = (_impl_TucanDirectory*) svnt->_ptrToInterface(TucanDirectory::_PD_repoId);
  tcd->pd_result = impl->getAuth();
}

TucanAuth_ptr _objref_TucanDirectory::getAuth()
{
  _0RL_cd_812ed87905f9c760_fd000000 _call_desc(_0RL_lcfn_812ed87905f9c760_0e000000, "getAuth", 8, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_1e000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_9d000000* tcd = (_0RL_cd_812ed87905f9c760_9d000000*) cd;
  _impl_TucanDirectory* impl = (_impl_TucanDirectory*) svnt->_ptrToInterface(TucanDirectory::_PD_repoId);
  tcd->pd_result = impl->open();
}

CORBA::Boolean _objref_TucanDirectory::open()
{
  _0RL_cd_812ed87905f9c760_9d000000 _call_desc(_0RL_lcfn_812ed87905f9c760_1e000000, "open", 5, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_2e000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_9d000000* tcd = (_0RL_cd_812ed87905f9c760_9d000000*) cd;
  _impl_TucanDirectory* impl = (_impl_TucanDirectory*) svnt->_ptrToInterface(TucanDirectory::_PD_repoId);
  tcd->pd_result = impl->close();
}

CORBA::Boolean _objref_TucanDirectory::close()
{
  _0RL_cd_812ed87905f9c760_9d000000 _call_desc(_0RL_lcfn_812ed87905f9c760_2e000000, "close", 6, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_3e000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_db000000* tcd = (_0RL_cd_812ed87905f9c760_db000000*) cd;
  _impl_TucanDirectory* impl = (_impl_TucanDirectory*) svnt->_ptrToInterface(TucanDirectory::_PD_repoId);
  impl->setServerName(tcd->arg_0);
}

void _objref_TucanDirectory::setServerName(const char* name)
{
  _0RL_cd_812ed87905f9c760_db000000 _call_desc(_0RL_lcfn_812ed87905f9c760_3e000000, "setServerName", 14, 0, name);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_4e000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_bb000000* tcd = (_0RL_cd_812ed87905f9c760_bb000000*) cd;
  _impl_TucanDirectory* impl = (_impl_TucanDirectory*) svnt->_ptrToInterface(TucanDirectory::_PD_repoId);
  tcd->pd_result = impl->getServerName();
}

char* _objref_TucanDirectory::getServerName()
{
  _0RL_cd_812ed87905f9c760_bb000000 _call_desc(_0RL_lcfn_812ed87905f9c760_4e000000, "getServerName", 14, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_5e000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_5c000000* tcd = (_0RL_cd_812ed87905f9c760_5c000000*) cd;
  _impl_TucanDirectory* impl = (_impl_TucanDirectory*) svnt->_ptrToInterface(TucanDirectory::_PD_repoId);
  impl->setPort(tcd->arg_0);
}

void _objref_TucanDirectory::setPort(CORBA::Short port)
{
  _0RL_cd_812ed87905f9c760_5c000000 _call_desc(_0RL_lcfn_812ed87905f9c760_5e000000, "setPort", 8, 0, port);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_6e000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_3c000000* tcd = (_0RL_cd_812ed87905f9c760_3c000000*) cd;
  _impl_TucanDirectory* impl = (_impl_TucanDirectory*) svnt->_ptrToInterface(TucanDirectory::_PD_repoId);
  tcd->pd_result = impl->getPort();
}

CORBA::Short _objref_TucanDirectory::getPort()
{
  _0RL_cd_812ed87905f9c760_3c000000 _call_desc(_0RL_lcfn_812ed87905f9c760_6e000000, "getPort", 8, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_7e000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_db000000* tcd = (_0RL_cd_812ed87905f9c760_db000000*) cd;
  _impl_TucanDirectory* impl = (_impl_TucanDirectory*) svnt->_ptrToInterface(TucanDirectory::_PD_repoId);
  impl->setServerRoot(tcd->arg_0);
}

void _objref_TucanDirectory::setServerRoot(const char* root)
{
  _0RL_cd_812ed87905f9c760_db000000 _call_desc(_0RL_lcfn_812ed87905f9c760_7e000000, "setServerRoot", 14, 0, root);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_8e000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_bb000000* tcd = (_0RL_cd_812ed87905f9c760_bb000000*) cd;
  _impl_TucanDirectory* impl = (_impl_TucanDirectory*) svnt->_ptrToInterface(TucanDirectory::_PD_repoId);
  tcd->pd_result = impl->getServerRoot();
}

char* _objref_TucanDirectory::getServerRoot()
{
  _0RL_cd_812ed87905f9c760_bb000000 _call_desc(_0RL_lcfn_812ed87905f9c760_8e000000, "getServerRoot", 14, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_9e000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_5c000000* tcd = (_0RL_cd_812ed87905f9c760_5c000000*) cd;
  _impl_TucanDirectory* impl = (_impl_TucanDirectory*) svnt->_ptrToInterface(TucanDirectory::_PD_repoId);
  impl->setTimeLimit(tcd->arg_0);
}

void _objref_TucanDirectory::setTimeLimit(CORBA::Short limit)
{
  _0RL_cd_812ed87905f9c760_5c000000 _call_desc(_0RL_lcfn_812ed87905f9c760_9e000000, "setTimeLimit", 13, 0, limit);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_ae000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_3c000000* tcd = (_0RL_cd_812ed87905f9c760_3c000000*) cd;
  _impl_TucanDirectory* impl = (_impl_TucanDirectory*) svnt->_ptrToInterface(TucanDirectory::_PD_repoId);
  tcd->pd_result = impl->getTimeLimit();
}

CORBA::Short _objref_TucanDirectory::getTimeLimit()
{
  _0RL_cd_812ed87905f9c760_3c000000 _call_desc(_0RL_lcfn_812ed87905f9c760_ae000000, "getTimeLimit", 13, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_be000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_5c000000* tcd = (_0RL_cd_812ed87905f9c760_5c000000*) cd;
  _impl_TucanDirectory* impl = (_impl_TucanDirectory*) svnt->_ptrToInterface(TucanDirectory::_PD_repoId);
  impl->setSizeLimit(tcd->arg_0);
}

void _objref_TucanDirectory::setSizeLimit(CORBA::Short limit)
{
  _0RL_cd_812ed87905f9c760_5c000000 _call_desc(_0RL_lcfn_812ed87905f9c760_be000000, "setSizeLimit", 13, 0, limit);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_ce000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_3c000000* tcd = (_0RL_cd_812ed87905f9c760_3c000000*) cd;
  _impl_TucanDirectory* impl = (_impl_TucanDirectory*) svnt->_ptrToInterface(TucanDirectory::_PD_repoId);
  tcd->pd_result = impl->getSizeLimit();
}

CORBA::Short _objref_TucanDirectory::getSizeLimit()
{
  _0RL_cd_812ed87905f9c760_3c000000 _call_desc(_0RL_lcfn_812ed87905f9c760_ce000000, "getSizeLimit", 13, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring
class _0RL_cd_812ed87905f9c760_de000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_de000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const char* a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline CORBA::Boolean result() { return pd_result; }
  const char* arg_0;
  CORBA::Boolean pd_result;
};

CORBA::ULong _0RL_cd_812ed87905f9c760_de000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_0) ? strlen((const char*) arg_0) + 1 : 1;
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_de000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_0)? strlen((const char*) arg_0) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_0),_len);
    else {
      if ((const char*) arg_0 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  
}

void _0RL_cd_812ed87905f9c760_de000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result <<= giop_client;
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_ee000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_de000000* tcd = (_0RL_cd_812ed87905f9c760_de000000*) cd;
  _impl_TucanDirectory* impl = (_impl_TucanDirectory*) svnt->_ptrToInterface(TucanDirectory::_PD_repoId);
  tcd->pd_result = impl->search(tcd->arg_0);
}

CORBA::Boolean _objref_TucanDirectory::search(const char* searchstring)
{
  _0RL_cd_812ed87905f9c760_de000000 _call_desc(_0RL_lcfn_812ed87905f9c760_ee000000, "search", 7, 0, searchstring);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cTucanDirectory_mAddressCardSeq
class _0RL_cd_812ed87905f9c760_fe000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_fe000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline TucanDirectory::AddressCardSeq* result() { return pd_result; }
  
  TucanDirectory::AddressCardSeq* pd_result;
};

void _0RL_cd_812ed87905f9c760_fe000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = new TucanDirectory::AddressCardSeq;
  
  *pd_result <<= giop_client;
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_0f000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_fe000000* tcd = (_0RL_cd_812ed87905f9c760_fe000000*) cd;
  _impl_TucanDirectory* impl = (_impl_TucanDirectory*) svnt->_ptrToInterface(TucanDirectory::_PD_repoId);
  tcd->pd_result = impl->result();
}

TucanDirectory::AddressCardSeq* _objref_TucanDirectory::result()
{
  _0RL_cd_812ed87905f9c760_fe000000 _call_desc(_0RL_lcfn_812ed87905f9c760_0f000000, "result", 7, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cstring
class _0RL_cd_812ed87905f9c760_1f000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_1f000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const char* a_0, const char* a_1, const char* a_2):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0),
     arg_1(a_1),
     arg_2(a_2) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  const char* arg_0;
  const char* arg_1;
  const char* arg_2;
  
};

CORBA::ULong _0RL_cd_812ed87905f9c760_1f000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_0) ? strlen((const char*) arg_0) + 1 : 1;
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_1) ? strlen((const char*) arg_1) + 1 : 1;
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_2) ? strlen((const char*) arg_2) + 1 : 1;
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_1f000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_0)? strlen((const char*) arg_0) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_0),_len);
    else {
      if ((const char*) arg_0 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  {
    CORBA::ULong _len = (((const char*) arg_1)? strlen((const char*) arg_1) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_1),_len);
    else {
      if ((const char*) arg_1 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  {
    CORBA::ULong _len = (((const char*) arg_2)? strlen((const char*) arg_2) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_2),_len);
    else {
      if ((const char*) arg_2 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_2f000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_1f000000* tcd = (_0RL_cd_812ed87905f9c760_1f000000*) cd;
  _impl_TucanDirectory* impl = (_impl_TucanDirectory*) svnt->_ptrToInterface(TucanDirectory::_PD_repoId);
  impl->setField(tcd->arg_0, tcd->arg_1, tcd->arg_2);
}

void _objref_TucanDirectory::setField(const char* uid, const char* field, const char* value)
{
  _0RL_cd_812ed87905f9c760_1f000000 _call_desc(_0RL_lcfn_812ed87905f9c760_2f000000, "setField", 9, 0, uid, field, value);
  
  _invoke(_call_desc);
  
}

// Proxy call descriptor class. Mangled signature:
//  _cstring_i_cstring_i_cstring
class _0RL_cd_812ed87905f9c760_3f000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_3f000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const char* a_0, const char* a_1):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0),
     arg_1(a_1) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline char * result() { return pd_result; }
  const char* arg_0;
  const char* arg_1;
  char * pd_result;
};

CORBA::ULong _0RL_cd_812ed87905f9c760_3f000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_0) ? strlen((const char*) arg_0) + 1 : 1;
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_1) ? strlen((const char*) arg_1) + 1 : 1;
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_3f000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_0)? strlen((const char*) arg_0) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_0),_len);
    else {
      if ((const char*) arg_0 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  {
    CORBA::ULong _len = (((const char*) arg_1)? strlen((const char*) arg_1) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_1),_len);
    else {
      if ((const char*) arg_1 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  
}

void _0RL_cd_812ed87905f9c760_3f000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  {
    CORBA::String_member _0RL_str_tmp;
    _0RL_str_tmp <<=  giop_client;
    pd_result = _0RL_str_tmp._ptr;
    _0RL_str_tmp._ptr = 0;
  }
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_4f000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_3f000000* tcd = (_0RL_cd_812ed87905f9c760_3f000000*) cd;
  _impl_TucanDirectory* impl = (_impl_TucanDirectory*) svnt->_ptrToInterface(TucanDirectory::_PD_repoId);
  tcd->pd_result = impl->getField(tcd->arg_0, tcd->arg_1);
}

char* _objref_TucanDirectory::getField(const char* uid, const char* field)
{
  _0RL_cd_812ed87905f9c760_3f000000 _call_desc(_0RL_lcfn_812ed87905f9c760_4f000000, "getField", 9, 0, uid, field);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_5f000000(omniCallDescriptor* cd, omniServant* svnt)
{
  
  _impl_TucanDirectory* impl = (_impl_TucanDirectory*) svnt->_ptrToInterface(TucanDirectory::_PD_repoId);
  impl->destroy();
}

void _objref_TucanDirectory::destroy()
{
  omniStdCallDesc::void_call _call_desc(_0RL_lcfn_812ed87905f9c760_5f000000, "destroy", 8, 0);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_6f000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_3c000000* tcd = (_0RL_cd_812ed87905f9c760_3c000000*) cd;
  _impl_TucanDirectory* impl = (_impl_TucanDirectory*) svnt->_ptrToInterface(TucanDirectory::_PD_repoId);
  tcd->pd_result = impl->handle();
}

CORBA::Short _objref_TucanDirectory::handle()
{
  _0RL_cd_812ed87905f9c760_3c000000 _call_desc(_0RL_lcfn_812ed87905f9c760_6f000000, "_get_handle", 12, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_7f000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_3c000000* tcd = (_0RL_cd_812ed87905f9c760_3c000000*) cd;
  _impl_TucanDirectory* impl = (_impl_TucanDirectory*) svnt->_ptrToInterface(TucanDirectory::_PD_repoId);
  tcd->pd_result = impl->port();
}

CORBA::Short _objref_TucanDirectory::port()
{
  _0RL_cd_812ed87905f9c760_3c000000 _call_desc(_0RL_lcfn_812ed87905f9c760_7f000000, "_get_port", 10, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_8f000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_3c000000* tcd = (_0RL_cd_812ed87905f9c760_3c000000*) cd;
  _impl_TucanDirectory* impl = (_impl_TucanDirectory*) svnt->_ptrToInterface(TucanDirectory::_PD_repoId);
  tcd->pd_result = impl->jobnum();
}

CORBA::Short _objref_TucanDirectory::jobnum()
{
  _0RL_cd_812ed87905f9c760_3c000000 _call_desc(_0RL_lcfn_812ed87905f9c760_8f000000, "_get_jobnum", 12, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_9f000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_bb000000* tcd = (_0RL_cd_812ed87905f9c760_bb000000*) cd;
  _impl_TucanDirectory* impl = (_impl_TucanDirectory*) svnt->_ptrToInterface(TucanDirectory::_PD_repoId);
  tcd->pd_result = impl->myServerName();
}

char* _objref_TucanDirectory::myServerName()
{
  _0RL_cd_812ed87905f9c760_bb000000 _call_desc(_0RL_lcfn_812ed87905f9c760_9f000000, "_get_myServerName", 18, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_af000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_bb000000* tcd = (_0RL_cd_812ed87905f9c760_bb000000*) cd;
  _impl_TucanDirectory* impl = (_impl_TucanDirectory*) svnt->_ptrToInterface(TucanDirectory::_PD_repoId);
  tcd->pd_result = impl->myServerRoot();
}

char* _objref_TucanDirectory::myServerRoot()
{
  _0RL_cd_812ed87905f9c760_bb000000 _call_desc(_0RL_lcfn_812ed87905f9c760_af000000, "_get_myServerRoot", 18, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cTucanDirectory_mAddressCardSeq
class _0RL_cd_812ed87905f9c760_bf000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_bf000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const TucanDirectory::AddressCardSeq& a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong);
  virtual void marshalArguments(GIOP_C&);
  
  const TucanDirectory::AddressCardSeq& arg_0;
  
};

CORBA::ULong _0RL_cd_812ed87905f9c760_bf000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = arg_0._NP_alignedSize(msgsize);
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_bf000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_cf000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_fe000000* tcd = (_0RL_cd_812ed87905f9c760_fe000000*) cd;
  _impl_TucanDirectory* impl = (_impl_TucanDirectory*) svnt->_ptrToInterface(TucanDirectory::_PD_repoId);
  tcd->pd_result = impl->myResults();
}

TucanDirectory::AddressCardSeq* _objref_TucanDirectory::myResults()
{
  _0RL_cd_812ed87905f9c760_fe000000 _call_desc(_0RL_lcfn_812ed87905f9c760_cf000000, "_get_myResults", 15, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

_pof_TucanDirectory::~_pof_TucanDirectory() {}

omniObjRef*
_pof_TucanDirectory::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanDirectory(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanDirectory::is_a(const char* id) const
{
  if( !strcmp(id, TucanDirectory::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanDirectory _the_pof_TucanDirectory;

_impl_TucanDirectory::~_impl_TucanDirectory() {}

CORBA::Boolean
_impl_TucanDirectory::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "_get_handle") ) {    
    giop_s.RequestReceived();
    CORBA::Short result = this->handle();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_2) + 2;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_get_port") ) {    
    giop_s.RequestReceived();
    CORBA::Short result = this->port();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_2) + 2;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_get_jobnum") ) {    
    giop_s.RequestReceived();
    CORBA::Short result = this->jobnum();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_2) + 2;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_get_myServerName") ) {    
    giop_s.RequestReceived();
    CORBA::String_var result = this->myServerName();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      msgsize += ((const char*) result) ? strlen((const char*) result) + 1 : 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      {
        CORBA::ULong _len = (((const char*) result)? strlen((const char*) result) + 1 : 1);
        
        _len >>= giop_s;
        if (_len > 1)
          giop_s.put_char_array((const CORBA::Char *)((const char*)result),_len);
        else {
          if ((const char*) result == 0 && omniORB::traceLevel > 1)
            _CORBA_null_string_ptr(0);
          CORBA::Char('\0') >>= giop_s;
        }
      }
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_get_myServerRoot") ) {    
    giop_s.RequestReceived();
    CORBA::String_var result = this->myServerRoot();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      msgsize += ((const char*) result) ? strlen((const char*) result) + 1 : 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      {
        CORBA::ULong _len = (((const char*) result)? strlen((const char*) result) + 1 : 1);
        
        _len >>= giop_s;
        if (_len > 1)
          giop_s.put_char_array((const CORBA::Char *)((const char*)result),_len);
        else {
          if ((const char*) result == 0 && omniORB::traceLevel > 1)
            _CORBA_null_string_ptr(0);
          CORBA::Char('\0') >>= giop_s;
        }
      }
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "_get_myResults") ) {    
    giop_s.RequestReceived();
    TucanDirectory::AddressCardSeq_var result = this->myResults();
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      *(result.operator->()) >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setAuth") ) {
    
    TucanAuth_var arg_myAuth;
    
    arg_myAuth = TucanAuth_Helper::unmarshalObjRef(giop_s);
    
    giop_s.RequestReceived();
    
    this->setAuth(arg_myAuth.in());
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getAuth") ) {
    
    giop_s.RequestReceived();
    TucanAuth_var result;
    
    result = this->getAuth();
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = TucanAuth_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      TucanAuth_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "open") ) {
    
    giop_s.RequestReceived();
    CORBA::Boolean result;
    
    result = this->open();
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize += 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "close") ) {
    
    giop_s.RequestReceived();
    CORBA::Boolean result;
    
    result = this->close();
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize += 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setServerName") ) {
    
    CORBA::String_var arg_name;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_name = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    
    this->setServerName(arg_name.in());
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getServerName") ) {
    
    giop_s.RequestReceived();
    CORBA::String_var result;
    
    result = this->getServerName();
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      msgsize += ((const char*) result) ? strlen((const char*) result) + 1 : 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      {
        CORBA::ULong _len = (((const char*) result)? strlen((const char*) result) + 1 : 1);
        
        _len >>= giop_s;
        if (_len > 1)
          giop_s.put_char_array((const CORBA::Char *)((const char*)result),_len);
        else {
          if ((const char*) result == 0 && omniORB::traceLevel > 1)
            _CORBA_null_string_ptr(0);
          CORBA::Char('\0') >>= giop_s;
        }
      }
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setPort") ) {
    
    CORBA::Short arg_port;
    
    arg_port <<= giop_s;
    
    giop_s.RequestReceived();
    
    this->setPort(arg_port);
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getPort") ) {
    
    giop_s.RequestReceived();
    CORBA::Short result;
    
    result = this->getPort();
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_2) + 2;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setServerRoot") ) {
    
    CORBA::String_var arg_root;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_root = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    
    this->setServerRoot(arg_root.in());
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getServerRoot") ) {
    
    giop_s.RequestReceived();
    CORBA::String_var result;
    
    result = this->getServerRoot();
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      msgsize += ((const char*) result) ? strlen((const char*) result) + 1 : 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      {
        CORBA::ULong _len = (((const char*) result)? strlen((const char*) result) + 1 : 1);
        
        _len >>= giop_s;
        if (_len > 1)
          giop_s.put_char_array((const CORBA::Char *)((const char*)result),_len);
        else {
          if ((const char*) result == 0 && omniORB::traceLevel > 1)
            _CORBA_null_string_ptr(0);
          CORBA::Char('\0') >>= giop_s;
        }
      }
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setTimeLimit") ) {
    
    CORBA::Short arg_limit;
    
    arg_limit <<= giop_s;
    
    giop_s.RequestReceived();
    
    this->setTimeLimit(arg_limit);
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getTimeLimit") ) {
    
    giop_s.RequestReceived();
    CORBA::Short result;
    
    result = this->getTimeLimit();
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_2) + 2;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setSizeLimit") ) {
    
    CORBA::Short arg_limit;
    
    arg_limit <<= giop_s;
    
    giop_s.RequestReceived();
    
    this->setSizeLimit(arg_limit);
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getSizeLimit") ) {
    
    giop_s.RequestReceived();
    CORBA::Short result;
    
    result = this->getSizeLimit();
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_2) + 2;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "search") ) {
    
    CORBA::String_var arg_searchstring;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_searchstring = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    CORBA::Boolean result;
    
    result = this->search(arg_searchstring.in());
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize += 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "result") ) {
    
    giop_s.RequestReceived();
    TucanDirectory::AddressCardSeq_var result;
    
    result = this->result();
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      *(result.operator->()) >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setField") ) {
    
    CORBA::String_var arg_uid;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_uid = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::String_var arg_field;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_field = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::String_var arg_value;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_value = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    
    this->setField(arg_uid.in(), arg_field.in(), arg_value.in());
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getField") ) {
    
    CORBA::String_var arg_uid;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_uid = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::String_var arg_field;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_field = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    CORBA::String_var result;
    
    result = this->getField(arg_uid.in(), arg_field.in());
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      msgsize += ((const char*) result) ? strlen((const char*) result) + 1 : 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      {
        CORBA::ULong _len = (((const char*) result)? strlen((const char*) result) + 1 : 1);
        
        _len >>= giop_s;
        if (_len > 1)
          giop_s.put_char_array((const CORBA::Char *)((const char*)result),_len);
        else {
          if ((const char*) result == 0 && omniORB::traceLevel > 1)
            _CORBA_null_string_ptr(0);
          CORBA::Char('\0') >>= giop_s;
        }
      }
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "destroy") ) {
    
    giop_s.RequestReceived();
    
    this->destroy();
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  return 0;
}

void*
_impl_TucanDirectory::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanDirectory::_PD_repoId) )
    return (_impl_TucanDirectory*) this;
  
  return 0;
}

const char*
_impl_TucanDirectory::_mostDerivedRepoId()
{
  return TucanDirectory::_PD_repoId;
}

TucanDirectoryFactory_ptr TucanDirectoryFactory_Helper::_nil() {
  return TucanDirectoryFactory::_nil();
}

CORBA::Boolean TucanDirectoryFactory_Helper::is_nil(TucanDirectoryFactory_ptr p) {
  return CORBA::is_nil(p);

}

void TucanDirectoryFactory_Helper::release(TucanDirectoryFactory_ptr p) {
  CORBA::release(p);
}

void TucanDirectoryFactory_Helper::duplicate(TucanDirectoryFactory_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanDirectoryFactory_Helper::NP_alignedSize(TucanDirectoryFactory_ptr obj, size_t offset) {
  return TucanDirectoryFactory::_alignedSize(obj, offset);
}

void TucanDirectoryFactory_Helper::marshalObjRef(TucanDirectoryFactory_ptr obj, NetBufferedStream& s) {
  TucanDirectoryFactory::_marshalObjRef(obj, s);
}

TucanDirectoryFactory_ptr TucanDirectoryFactory_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanDirectoryFactory::_unmarshalObjRef(s);
}

void TucanDirectoryFactory_Helper::marshalObjRef(TucanDirectoryFactory_ptr obj, MemBufferedStream& s) {
  TucanDirectoryFactory::_marshalObjRef(obj, s);
}

TucanDirectoryFactory_ptr TucanDirectoryFactory_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanDirectoryFactory::_unmarshalObjRef(s);
}

TucanDirectoryFactory_ptr
TucanDirectoryFactory::_duplicate(TucanDirectoryFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanDirectoryFactory_ptr
TucanDirectoryFactory::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanDirectoryFactory_ptr
TucanDirectoryFactory::_nil()
{
  static _objref_TucanDirectoryFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanDirectoryFactory;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanDirectoryFactory::_PD_repoId = "IDL:TucanDirectoryFactory:1.0";

_objref_TucanDirectoryFactory::~_objref_TucanDirectoryFactory() {}

_objref_TucanDirectoryFactory::_objref_TucanDirectoryFactory(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   
   omniObjRef(TucanDirectoryFactory::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanDirectoryFactory::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanDirectoryFactory::_PD_repoId) )
    return (TucanDirectoryFactory_ptr) this;
  
  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cTucanDirectory
class _0RL_cd_812ed87905f9c760_df000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_df000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline TucanDirectory_ptr result() { return pd_result; }
  
  TucanDirectory_ptr pd_result;
};

void _0RL_cd_812ed87905f9c760_df000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = TucanDirectory_Helper::unmarshalObjRef(giop_client);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_ef000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_df000000* tcd = (_0RL_cd_812ed87905f9c760_df000000*) cd;
  _impl_TucanDirectoryFactory* impl = (_impl_TucanDirectoryFactory*) svnt->_ptrToInterface(TucanDirectoryFactory::_PD_repoId);
  tcd->pd_result = impl->create();
}

TucanDirectory_ptr _objref_TucanDirectoryFactory::create()
{
  _0RL_cd_812ed87905f9c760_df000000 _call_desc(_0RL_lcfn_812ed87905f9c760_ef000000, "create", 7, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

_pof_TucanDirectoryFactory::~_pof_TucanDirectoryFactory() {}

omniObjRef*
_pof_TucanDirectoryFactory::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanDirectoryFactory(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanDirectoryFactory::is_a(const char* id) const
{
  if( !strcmp(id, TucanDirectoryFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanDirectoryFactory _the_pof_TucanDirectoryFactory;

_impl_TucanDirectoryFactory::~_impl_TucanDirectoryFactory() {}

CORBA::Boolean
_impl_TucanDirectoryFactory::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "create") ) {
    
    giop_s.RequestReceived();
    TucanDirectory_var result;
    
    result = this->create();
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = TucanDirectory_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      TucanDirectory_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  return 0;
}

void*
_impl_TucanDirectoryFactory::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanDirectoryFactory::_PD_repoId) )
    return (_impl_TucanDirectoryFactory*) this;
  
  return 0;
}

const char*
_impl_TucanDirectoryFactory::_mostDerivedRepoId()
{
  return TucanDirectoryFactory::_PD_repoId;
}

TucanEmailAddress_ptr TucanEmailAddress_Helper::_nil() {
  return TucanEmailAddress::_nil();
}

CORBA::Boolean TucanEmailAddress_Helper::is_nil(TucanEmailAddress_ptr p) {
  return CORBA::is_nil(p);

}

void TucanEmailAddress_Helper::release(TucanEmailAddress_ptr p) {
  CORBA::release(p);
}

void TucanEmailAddress_Helper::duplicate(TucanEmailAddress_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanEmailAddress_Helper::NP_alignedSize(TucanEmailAddress_ptr obj, size_t offset) {
  return TucanEmailAddress::_alignedSize(obj, offset);
}

void TucanEmailAddress_Helper::marshalObjRef(TucanEmailAddress_ptr obj, NetBufferedStream& s) {
  TucanEmailAddress::_marshalObjRef(obj, s);
}

TucanEmailAddress_ptr TucanEmailAddress_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanEmailAddress::_unmarshalObjRef(s);
}

void TucanEmailAddress_Helper::marshalObjRef(TucanEmailAddress_ptr obj, MemBufferedStream& s) {
  TucanEmailAddress::_marshalObjRef(obj, s);
}

TucanEmailAddress_ptr TucanEmailAddress_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanEmailAddress::_unmarshalObjRef(s);
}

TucanEmailAddress_ptr
TucanEmailAddress::_duplicate(TucanEmailAddress_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanEmailAddress_ptr
TucanEmailAddress::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanEmailAddress_ptr
TucanEmailAddress::_nil()
{
  static _objref_TucanEmailAddress* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanEmailAddress;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanEmailAddress::_PD_repoId = "IDL:TucanEmailAddress:1.0";

_objref_TucanEmailAddress::~_objref_TucanEmailAddress() {}

_objref_TucanEmailAddress::_objref_TucanEmailAddress(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanAddress(mdri, p, id, lid),
   
   omniObjRef(TucanEmailAddress::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanEmailAddress::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanEmailAddress::_PD_repoId) )
    return (TucanEmailAddress_ptr) this;
  if( !strcmp(id, TucanAddress::_PD_repoId) )
    return (TucanAddress_ptr) this;
  
  return 0;
}

_pof_TucanEmailAddress::~_pof_TucanEmailAddress() {}

omniObjRef*
_pof_TucanEmailAddress::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanEmailAddress(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanEmailAddress::is_a(const char* id) const
{
  if( !strcmp(id, TucanEmailAddress::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanAddress::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanEmailAddress _the_pof_TucanEmailAddress;

_impl_TucanEmailAddress::~_impl_TucanEmailAddress() {}

CORBA::Boolean
_impl_TucanEmailAddress::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanAddress::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanEmailAddress::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanEmailAddress::_PD_repoId) )
    return (_impl_TucanEmailAddress*) this;
  if( !strcmp(id, TucanAddress::_PD_repoId) )
    return (_impl_TucanAddress*) this;

  return 0;
}

const char*
_impl_TucanEmailAddress::_mostDerivedRepoId()
{
  return TucanEmailAddress::_PD_repoId;
}

TucanEmailAddressFactory_ptr TucanEmailAddressFactory_Helper::_nil() {
  return TucanEmailAddressFactory::_nil();
}

CORBA::Boolean TucanEmailAddressFactory_Helper::is_nil(TucanEmailAddressFactory_ptr p) {
  return CORBA::is_nil(p);

}

void TucanEmailAddressFactory_Helper::release(TucanEmailAddressFactory_ptr p) {
  CORBA::release(p);
}

void TucanEmailAddressFactory_Helper::duplicate(TucanEmailAddressFactory_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanEmailAddressFactory_Helper::NP_alignedSize(TucanEmailAddressFactory_ptr obj, size_t offset) {
  return TucanEmailAddressFactory::_alignedSize(obj, offset);
}

void TucanEmailAddressFactory_Helper::marshalObjRef(TucanEmailAddressFactory_ptr obj, NetBufferedStream& s) {
  TucanEmailAddressFactory::_marshalObjRef(obj, s);
}

TucanEmailAddressFactory_ptr TucanEmailAddressFactory_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanEmailAddressFactory::_unmarshalObjRef(s);
}

void TucanEmailAddressFactory_Helper::marshalObjRef(TucanEmailAddressFactory_ptr obj, MemBufferedStream& s) {
  TucanEmailAddressFactory::_marshalObjRef(obj, s);
}

TucanEmailAddressFactory_ptr TucanEmailAddressFactory_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanEmailAddressFactory::_unmarshalObjRef(s);
}

TucanEmailAddressFactory_ptr
TucanEmailAddressFactory::_duplicate(TucanEmailAddressFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanEmailAddressFactory_ptr
TucanEmailAddressFactory::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanEmailAddressFactory_ptr
TucanEmailAddressFactory::_nil()
{
  static _objref_TucanEmailAddressFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanEmailAddressFactory;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanEmailAddressFactory::_PD_repoId = "IDL:TucanEmailAddressFactory:1.0";

_objref_TucanEmailAddressFactory::~_objref_TucanEmailAddressFactory() {}

_objref_TucanEmailAddressFactory::_objref_TucanEmailAddressFactory(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanAddressFactory(mdri, p, id, lid),
   
   omniObjRef(TucanEmailAddressFactory::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanEmailAddressFactory::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanEmailAddressFactory::_PD_repoId) )
    return (TucanEmailAddressFactory_ptr) this;
  if( !strcmp(id, TucanAddressFactory::_PD_repoId) )
    return (TucanAddressFactory_ptr) this;
  
  return 0;
}

_pof_TucanEmailAddressFactory::~_pof_TucanEmailAddressFactory() {}

omniObjRef*
_pof_TucanEmailAddressFactory::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanEmailAddressFactory(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanEmailAddressFactory::is_a(const char* id) const
{
  if( !strcmp(id, TucanEmailAddressFactory::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanAddressFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanEmailAddressFactory _the_pof_TucanEmailAddressFactory;

_impl_TucanEmailAddressFactory::~_impl_TucanEmailAddressFactory() {}

CORBA::Boolean
_impl_TucanEmailAddressFactory::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanAddressFactory::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanEmailAddressFactory::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanEmailAddressFactory::_PD_repoId) )
    return (_impl_TucanEmailAddressFactory*) this;
  if( !strcmp(id, TucanAddressFactory::_PD_repoId) )
    return (_impl_TucanAddressFactory*) this;

  return 0;
}

const char*
_impl_TucanEmailAddressFactory::_mostDerivedRepoId()
{
  return TucanEmailAddressFactory::_PD_repoId;
}

TucanEmailFolder_ptr TucanEmailFolder_Helper::_nil() {
  return TucanEmailFolder::_nil();
}

CORBA::Boolean TucanEmailFolder_Helper::is_nil(TucanEmailFolder_ptr p) {
  return CORBA::is_nil(p);

}

void TucanEmailFolder_Helper::release(TucanEmailFolder_ptr p) {
  CORBA::release(p);
}

void TucanEmailFolder_Helper::duplicate(TucanEmailFolder_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanEmailFolder_Helper::NP_alignedSize(TucanEmailFolder_ptr obj, size_t offset) {
  return TucanEmailFolder::_alignedSize(obj, offset);
}

void TucanEmailFolder_Helper::marshalObjRef(TucanEmailFolder_ptr obj, NetBufferedStream& s) {
  TucanEmailFolder::_marshalObjRef(obj, s);
}

TucanEmailFolder_ptr TucanEmailFolder_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanEmailFolder::_unmarshalObjRef(s);
}

void TucanEmailFolder_Helper::marshalObjRef(TucanEmailFolder_ptr obj, MemBufferedStream& s) {
  TucanEmailFolder::_marshalObjRef(obj, s);
}

TucanEmailFolder_ptr TucanEmailFolder_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanEmailFolder::_unmarshalObjRef(s);
}

TucanEmailFolder_ptr
TucanEmailFolder::_duplicate(TucanEmailFolder_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanEmailFolder_ptr
TucanEmailFolder::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanEmailFolder_ptr
TucanEmailFolder::_nil()
{
  static _objref_TucanEmailFolder* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanEmailFolder;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanEmailFolder::_PD_repoId = "IDL:TucanEmailFolder:1.0";

_objref_TucanEmailFolder::~_objref_TucanEmailFolder() {}

_objref_TucanEmailFolder::_objref_TucanEmailFolder(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanFolder(mdri, p, id, lid),
   
   omniObjRef(TucanEmailFolder::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanEmailFolder::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanEmailFolder::_PD_repoId) )
    return (TucanEmailFolder_ptr) this;
  if( !strcmp(id, TucanFolder::_PD_repoId) )
    return (TucanFolder_ptr) this;
  
  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cTucanMessageHeaderSeq
class _0RL_cd_812ed87905f9c760_ff000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_ff000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline TucanMessageHeaderSeq* result() { return pd_result; }
  
  TucanMessageHeaderSeq* pd_result;
};

void _0RL_cd_812ed87905f9c760_ff000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = new TucanMessageHeaderSeq;
  
  *pd_result <<= giop_client;
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_00100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_ff000000* tcd = (_0RL_cd_812ed87905f9c760_ff000000*) cd;
  _impl_TucanEmailFolder* impl = (_impl_TucanEmailFolder*) svnt->_ptrToInterface(TucanEmailFolder::_PD_repoId);
  tcd->pd_result = impl->getMessageHeaders();
}

TucanMessageHeaderSeq* _objref_TucanEmailFolder::getMessageHeaders()
{
  _0RL_cd_812ed87905f9c760_ff000000 _call_desc(_0RL_lcfn_812ed87905f9c760_00100000, "getMessageHeaders", 18, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

_pof_TucanEmailFolder::~_pof_TucanEmailFolder() {}

omniObjRef*
_pof_TucanEmailFolder::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanEmailFolder(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanEmailFolder::is_a(const char* id) const
{
  if( !strcmp(id, TucanEmailFolder::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanFolder::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanEmailFolder _the_pof_TucanEmailFolder;

_impl_TucanEmailFolder::~_impl_TucanEmailFolder() {}

CORBA::Boolean
_impl_TucanEmailFolder::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "getMessageHeaders") ) {
    
    giop_s.RequestReceived();
    TucanMessageHeaderSeq_var result;
    
    result = this->getMessageHeaders();
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      *(result.operator->()) >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( _impl_TucanFolder::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanEmailFolder::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanEmailFolder::_PD_repoId) )
    return (_impl_TucanEmailFolder*) this;
  if( !strcmp(id, TucanFolder::_PD_repoId) )
    return (_impl_TucanFolder*) this;

  return 0;
}

const char*
_impl_TucanEmailFolder::_mostDerivedRepoId()
{
  return TucanEmailFolder::_PD_repoId;
}

TucanEmailFolderFactory_ptr TucanEmailFolderFactory_Helper::_nil() {
  return TucanEmailFolderFactory::_nil();
}

CORBA::Boolean TucanEmailFolderFactory_Helper::is_nil(TucanEmailFolderFactory_ptr p) {
  return CORBA::is_nil(p);

}

void TucanEmailFolderFactory_Helper::release(TucanEmailFolderFactory_ptr p) {
  CORBA::release(p);
}

void TucanEmailFolderFactory_Helper::duplicate(TucanEmailFolderFactory_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanEmailFolderFactory_Helper::NP_alignedSize(TucanEmailFolderFactory_ptr obj, size_t offset) {
  return TucanEmailFolderFactory::_alignedSize(obj, offset);
}

void TucanEmailFolderFactory_Helper::marshalObjRef(TucanEmailFolderFactory_ptr obj, NetBufferedStream& s) {
  TucanEmailFolderFactory::_marshalObjRef(obj, s);
}

TucanEmailFolderFactory_ptr TucanEmailFolderFactory_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanEmailFolderFactory::_unmarshalObjRef(s);
}

void TucanEmailFolderFactory_Helper::marshalObjRef(TucanEmailFolderFactory_ptr obj, MemBufferedStream& s) {
  TucanEmailFolderFactory::_marshalObjRef(obj, s);
}

TucanEmailFolderFactory_ptr TucanEmailFolderFactory_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanEmailFolderFactory::_unmarshalObjRef(s);
}

TucanEmailFolderFactory_ptr
TucanEmailFolderFactory::_duplicate(TucanEmailFolderFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanEmailFolderFactory_ptr
TucanEmailFolderFactory::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanEmailFolderFactory_ptr
TucanEmailFolderFactory::_nil()
{
  static _objref_TucanEmailFolderFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanEmailFolderFactory;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanEmailFolderFactory::_PD_repoId = "IDL:TucanEmailFolderFactory:1.0";

_objref_TucanEmailFolderFactory::~_objref_TucanEmailFolderFactory() {}

_objref_TucanEmailFolderFactory::_objref_TucanEmailFolderFactory(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanFolderFactory(mdri, p, id, lid),
   
   omniObjRef(TucanEmailFolderFactory::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanEmailFolderFactory::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanEmailFolderFactory::_PD_repoId) )
    return (TucanEmailFolderFactory_ptr) this;
  if( !strcmp(id, TucanFolderFactory::_PD_repoId) )
    return (TucanFolderFactory_ptr) this;
  
  return 0;
}

_pof_TucanEmailFolderFactory::~_pof_TucanEmailFolderFactory() {}

omniObjRef*
_pof_TucanEmailFolderFactory::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanEmailFolderFactory(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanEmailFolderFactory::is_a(const char* id) const
{
  if( !strcmp(id, TucanEmailFolderFactory::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanFolderFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanEmailFolderFactory _the_pof_TucanEmailFolderFactory;

_impl_TucanEmailFolderFactory::~_impl_TucanEmailFolderFactory() {}

CORBA::Boolean
_impl_TucanEmailFolderFactory::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanFolderFactory::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanEmailFolderFactory::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanEmailFolderFactory::_PD_repoId) )
    return (_impl_TucanEmailFolderFactory*) this;
  if( !strcmp(id, TucanFolderFactory::_PD_repoId) )
    return (_impl_TucanFolderFactory*) this;

  return 0;
}

const char*
_impl_TucanEmailFolderFactory::_mostDerivedRepoId()
{
  return TucanEmailFolderFactory::_PD_repoId;
}

TucanEmailMessage_ptr TucanEmailMessage_Helper::_nil() {
  return TucanEmailMessage::_nil();
}

CORBA::Boolean TucanEmailMessage_Helper::is_nil(TucanEmailMessage_ptr p) {
  return CORBA::is_nil(p);

}

void TucanEmailMessage_Helper::release(TucanEmailMessage_ptr p) {
  CORBA::release(p);
}

void TucanEmailMessage_Helper::duplicate(TucanEmailMessage_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanEmailMessage_Helper::NP_alignedSize(TucanEmailMessage_ptr obj, size_t offset) {
  return TucanEmailMessage::_alignedSize(obj, offset);
}

void TucanEmailMessage_Helper::marshalObjRef(TucanEmailMessage_ptr obj, NetBufferedStream& s) {
  TucanEmailMessage::_marshalObjRef(obj, s);
}

TucanEmailMessage_ptr TucanEmailMessage_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanEmailMessage::_unmarshalObjRef(s);
}

void TucanEmailMessage_Helper::marshalObjRef(TucanEmailMessage_ptr obj, MemBufferedStream& s) {
  TucanEmailMessage::_marshalObjRef(obj, s);
}

TucanEmailMessage_ptr TucanEmailMessage_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanEmailMessage::_unmarshalObjRef(s);
}

TucanEmailMessage_ptr
TucanEmailMessage::_duplicate(TucanEmailMessage_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanEmailMessage_ptr
TucanEmailMessage::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanEmailMessage_ptr
TucanEmailMessage::_nil()
{
  static _objref_TucanEmailMessage* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanEmailMessage;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanEmailMessage::_PD_repoId = "IDL:TucanEmailMessage:1.0";

_objref_TucanEmailMessage::~_objref_TucanEmailMessage() {}

_objref_TucanEmailMessage::_objref_TucanEmailMessage(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanMessage(mdri, p, id, lid),
   
   omniObjRef(TucanEmailMessage::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanEmailMessage::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanEmailMessage::_PD_repoId) )
    return (TucanEmailMessage_ptr) this;
  if( !strcmp(id, TucanMessage::_PD_repoId) )
    return (TucanMessage_ptr) this;
  
  return 0;
}

_pof_TucanEmailMessage::~_pof_TucanEmailMessage() {}

omniObjRef*
_pof_TucanEmailMessage::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanEmailMessage(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanEmailMessage::is_a(const char* id) const
{
  if( !strcmp(id, TucanEmailMessage::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanMessage::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanEmailMessage _the_pof_TucanEmailMessage;

_impl_TucanEmailMessage::~_impl_TucanEmailMessage() {}

CORBA::Boolean
_impl_TucanEmailMessage::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanMessage::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanEmailMessage::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanEmailMessage::_PD_repoId) )
    return (_impl_TucanEmailMessage*) this;
  if( !strcmp(id, TucanMessage::_PD_repoId) )
    return (_impl_TucanMessage*) this;

  return 0;
}

const char*
_impl_TucanEmailMessage::_mostDerivedRepoId()
{
  return TucanEmailMessage::_PD_repoId;
}

TucanEmailMessageFactory_ptr TucanEmailMessageFactory_Helper::_nil() {
  return TucanEmailMessageFactory::_nil();
}

CORBA::Boolean TucanEmailMessageFactory_Helper::is_nil(TucanEmailMessageFactory_ptr p) {
  return CORBA::is_nil(p);

}

void TucanEmailMessageFactory_Helper::release(TucanEmailMessageFactory_ptr p) {
  CORBA::release(p);
}

void TucanEmailMessageFactory_Helper::duplicate(TucanEmailMessageFactory_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanEmailMessageFactory_Helper::NP_alignedSize(TucanEmailMessageFactory_ptr obj, size_t offset) {
  return TucanEmailMessageFactory::_alignedSize(obj, offset);
}

void TucanEmailMessageFactory_Helper::marshalObjRef(TucanEmailMessageFactory_ptr obj, NetBufferedStream& s) {
  TucanEmailMessageFactory::_marshalObjRef(obj, s);
}

TucanEmailMessageFactory_ptr TucanEmailMessageFactory_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanEmailMessageFactory::_unmarshalObjRef(s);
}

void TucanEmailMessageFactory_Helper::marshalObjRef(TucanEmailMessageFactory_ptr obj, MemBufferedStream& s) {
  TucanEmailMessageFactory::_marshalObjRef(obj, s);
}

TucanEmailMessageFactory_ptr TucanEmailMessageFactory_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanEmailMessageFactory::_unmarshalObjRef(s);
}

TucanEmailMessageFactory_ptr
TucanEmailMessageFactory::_duplicate(TucanEmailMessageFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanEmailMessageFactory_ptr
TucanEmailMessageFactory::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanEmailMessageFactory_ptr
TucanEmailMessageFactory::_nil()
{
  static _objref_TucanEmailMessageFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanEmailMessageFactory;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanEmailMessageFactory::_PD_repoId = "IDL:TucanEmailMessageFactory:1.0";

_objref_TucanEmailMessageFactory::~_objref_TucanEmailMessageFactory() {}

_objref_TucanEmailMessageFactory::_objref_TucanEmailMessageFactory(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanMessageFactory(mdri, p, id, lid),
   
   omniObjRef(TucanEmailMessageFactory::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanEmailMessageFactory::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanEmailMessageFactory::_PD_repoId) )
    return (TucanEmailMessageFactory_ptr) this;
  if( !strcmp(id, TucanMessageFactory::_PD_repoId) )
    return (TucanMessageFactory_ptr) this;
  
  return 0;
}

_pof_TucanEmailMessageFactory::~_pof_TucanEmailMessageFactory() {}

omniObjRef*
_pof_TucanEmailMessageFactory::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanEmailMessageFactory(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanEmailMessageFactory::is_a(const char* id) const
{
  if( !strcmp(id, TucanEmailMessageFactory::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanMessageFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanEmailMessageFactory _the_pof_TucanEmailMessageFactory;

_impl_TucanEmailMessageFactory::~_impl_TucanEmailMessageFactory() {}

CORBA::Boolean
_impl_TucanEmailMessageFactory::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanMessageFactory::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanEmailMessageFactory::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanEmailMessageFactory::_PD_repoId) )
    return (_impl_TucanEmailMessageFactory*) this;
  if( !strcmp(id, TucanMessageFactory::_PD_repoId) )
    return (_impl_TucanMessageFactory*) this;

  return 0;
}

const char*
_impl_TucanEmailMessageFactory::_mostDerivedRepoId()
{
  return TucanEmailMessageFactory::_PD_repoId;
}

TucanEmailStore_ptr TucanEmailStore_Helper::_nil() {
  return TucanEmailStore::_nil();
}

CORBA::Boolean TucanEmailStore_Helper::is_nil(TucanEmailStore_ptr p) {
  return CORBA::is_nil(p);

}

void TucanEmailStore_Helper::release(TucanEmailStore_ptr p) {
  CORBA::release(p);
}

void TucanEmailStore_Helper::duplicate(TucanEmailStore_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanEmailStore_Helper::NP_alignedSize(TucanEmailStore_ptr obj, size_t offset) {
  return TucanEmailStore::_alignedSize(obj, offset);
}

void TucanEmailStore_Helper::marshalObjRef(TucanEmailStore_ptr obj, NetBufferedStream& s) {
  TucanEmailStore::_marshalObjRef(obj, s);
}

TucanEmailStore_ptr TucanEmailStore_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanEmailStore::_unmarshalObjRef(s);
}

void TucanEmailStore_Helper::marshalObjRef(TucanEmailStore_ptr obj, MemBufferedStream& s) {
  TucanEmailStore::_marshalObjRef(obj, s);
}

TucanEmailStore_ptr TucanEmailStore_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanEmailStore::_unmarshalObjRef(s);
}

TucanEmailStore_ptr
TucanEmailStore::_duplicate(TucanEmailStore_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanEmailStore_ptr
TucanEmailStore::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanEmailStore_ptr
TucanEmailStore::_nil()
{
  static _objref_TucanEmailStore* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanEmailStore;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanEmailStore::_PD_repoId = "IDL:TucanEmailStore:1.0";

_objref_TucanEmailStore::~_objref_TucanEmailStore() {}

_objref_TucanEmailStore::_objref_TucanEmailStore(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanStore(mdri, p, id, lid),
   
   omniObjRef(TucanEmailStore::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanEmailStore::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanEmailStore::_PD_repoId) )
    return (TucanEmailStore_ptr) this;
  if( !strcmp(id, TucanStore::_PD_repoId) )
    return (TucanStore_ptr) this;
  
  return 0;
}

_pof_TucanEmailStore::~_pof_TucanEmailStore() {}

omniObjRef*
_pof_TucanEmailStore::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanEmailStore(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanEmailStore::is_a(const char* id) const
{
  if( !strcmp(id, TucanEmailStore::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanStore::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanEmailStore _the_pof_TucanEmailStore;

_impl_TucanEmailStore::~_impl_TucanEmailStore() {}

CORBA::Boolean
_impl_TucanEmailStore::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanStore::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanEmailStore::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanEmailStore::_PD_repoId) )
    return (_impl_TucanEmailStore*) this;
  if( !strcmp(id, TucanStore::_PD_repoId) )
    return (_impl_TucanStore*) this;

  return 0;
}

const char*
_impl_TucanEmailStore::_mostDerivedRepoId()
{
  return TucanEmailStore::_PD_repoId;
}

TucanEmailStoreFactory_ptr TucanEmailStoreFactory_Helper::_nil() {
  return TucanEmailStoreFactory::_nil();
}

CORBA::Boolean TucanEmailStoreFactory_Helper::is_nil(TucanEmailStoreFactory_ptr p) {
  return CORBA::is_nil(p);

}

void TucanEmailStoreFactory_Helper::release(TucanEmailStoreFactory_ptr p) {
  CORBA::release(p);
}

void TucanEmailStoreFactory_Helper::duplicate(TucanEmailStoreFactory_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanEmailStoreFactory_Helper::NP_alignedSize(TucanEmailStoreFactory_ptr obj, size_t offset) {
  return TucanEmailStoreFactory::_alignedSize(obj, offset);
}

void TucanEmailStoreFactory_Helper::marshalObjRef(TucanEmailStoreFactory_ptr obj, NetBufferedStream& s) {
  TucanEmailStoreFactory::_marshalObjRef(obj, s);
}

TucanEmailStoreFactory_ptr TucanEmailStoreFactory_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanEmailStoreFactory::_unmarshalObjRef(s);
}

void TucanEmailStoreFactory_Helper::marshalObjRef(TucanEmailStoreFactory_ptr obj, MemBufferedStream& s) {
  TucanEmailStoreFactory::_marshalObjRef(obj, s);
}

TucanEmailStoreFactory_ptr TucanEmailStoreFactory_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanEmailStoreFactory::_unmarshalObjRef(s);
}

TucanEmailStoreFactory_ptr
TucanEmailStoreFactory::_duplicate(TucanEmailStoreFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanEmailStoreFactory_ptr
TucanEmailStoreFactory::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanEmailStoreFactory_ptr
TucanEmailStoreFactory::_nil()
{
  static _objref_TucanEmailStoreFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanEmailStoreFactory;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanEmailStoreFactory::_PD_repoId = "IDL:TucanEmailStoreFactory:1.0";

_objref_TucanEmailStoreFactory::~_objref_TucanEmailStoreFactory() {}

_objref_TucanEmailStoreFactory::_objref_TucanEmailStoreFactory(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanStoreFactory(mdri, p, id, lid),
   
   omniObjRef(TucanEmailStoreFactory::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanEmailStoreFactory::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanEmailStoreFactory::_PD_repoId) )
    return (TucanEmailStoreFactory_ptr) this;
  if( !strcmp(id, TucanStoreFactory::_PD_repoId) )
    return (TucanStoreFactory_ptr) this;
  
  return 0;
}

_pof_TucanEmailStoreFactory::~_pof_TucanEmailStoreFactory() {}

omniObjRef*
_pof_TucanEmailStoreFactory::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanEmailStoreFactory(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanEmailStoreFactory::is_a(const char* id) const
{
  if( !strcmp(id, TucanEmailStoreFactory::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanStoreFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanEmailStoreFactory _the_pof_TucanEmailStoreFactory;

_impl_TucanEmailStoreFactory::~_impl_TucanEmailStoreFactory() {}

CORBA::Boolean
_impl_TucanEmailStoreFactory::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanStoreFactory::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanEmailStoreFactory::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanEmailStoreFactory::_PD_repoId) )
    return (_impl_TucanEmailStoreFactory*) this;
  if( !strcmp(id, TucanStoreFactory::_PD_repoId) )
    return (_impl_TucanStoreFactory*) this;

  return 0;
}

const char*
_impl_TucanEmailStoreFactory::_mostDerivedRepoId()
{
  return TucanEmailStoreFactory::_PD_repoId;
}

TucanEmailTransport_ptr TucanEmailTransport_Helper::_nil() {
  return TucanEmailTransport::_nil();
}

CORBA::Boolean TucanEmailTransport_Helper::is_nil(TucanEmailTransport_ptr p) {
  return CORBA::is_nil(p);

}

void TucanEmailTransport_Helper::release(TucanEmailTransport_ptr p) {
  CORBA::release(p);
}

void TucanEmailTransport_Helper::duplicate(TucanEmailTransport_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanEmailTransport_Helper::NP_alignedSize(TucanEmailTransport_ptr obj, size_t offset) {
  return TucanEmailTransport::_alignedSize(obj, offset);
}

void TucanEmailTransport_Helper::marshalObjRef(TucanEmailTransport_ptr obj, NetBufferedStream& s) {
  TucanEmailTransport::_marshalObjRef(obj, s);
}

TucanEmailTransport_ptr TucanEmailTransport_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanEmailTransport::_unmarshalObjRef(s);
}

void TucanEmailTransport_Helper::marshalObjRef(TucanEmailTransport_ptr obj, MemBufferedStream& s) {
  TucanEmailTransport::_marshalObjRef(obj, s);
}

TucanEmailTransport_ptr TucanEmailTransport_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanEmailTransport::_unmarshalObjRef(s);
}

TucanEmailTransport_ptr
TucanEmailTransport::_duplicate(TucanEmailTransport_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanEmailTransport_ptr
TucanEmailTransport::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanEmailTransport_ptr
TucanEmailTransport::_nil()
{
  static _objref_TucanEmailTransport* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanEmailTransport;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanEmailTransport::_PD_repoId = "IDL:TucanEmailTransport:1.0";

_objref_TucanEmailTransport::~_objref_TucanEmailTransport() {}

_objref_TucanEmailTransport::_objref_TucanEmailTransport(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanTransport(mdri, p, id, lid),
   
   omniObjRef(TucanEmailTransport::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanEmailTransport::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanEmailTransport::_PD_repoId) )
    return (TucanEmailTransport_ptr) this;
  if( !strcmp(id, TucanTransport::_PD_repoId) )
    return (TucanTransport_ptr) this;
  
  return 0;
}

_pof_TucanEmailTransport::~_pof_TucanEmailTransport() {}

omniObjRef*
_pof_TucanEmailTransport::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanEmailTransport(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanEmailTransport::is_a(const char* id) const
{
  if( !strcmp(id, TucanEmailTransport::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanTransport::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanEmailTransport _the_pof_TucanEmailTransport;

_impl_TucanEmailTransport::~_impl_TucanEmailTransport() {}

CORBA::Boolean
_impl_TucanEmailTransport::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanTransport::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanEmailTransport::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanEmailTransport::_PD_repoId) )
    return (_impl_TucanEmailTransport*) this;
  if( !strcmp(id, TucanTransport::_PD_repoId) )
    return (_impl_TucanTransport*) this;

  return 0;
}

const char*
_impl_TucanEmailTransport::_mostDerivedRepoId()
{
  return TucanEmailTransport::_PD_repoId;
}

TucanEmailTransportFactory_ptr TucanEmailTransportFactory_Helper::_nil() {
  return TucanEmailTransportFactory::_nil();
}

CORBA::Boolean TucanEmailTransportFactory_Helper::is_nil(TucanEmailTransportFactory_ptr p) {
  return CORBA::is_nil(p);

}

void TucanEmailTransportFactory_Helper::release(TucanEmailTransportFactory_ptr p) {
  CORBA::release(p);
}

void TucanEmailTransportFactory_Helper::duplicate(TucanEmailTransportFactory_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanEmailTransportFactory_Helper::NP_alignedSize(TucanEmailTransportFactory_ptr obj, size_t offset) {
  return TucanEmailTransportFactory::_alignedSize(obj, offset);
}

void TucanEmailTransportFactory_Helper::marshalObjRef(TucanEmailTransportFactory_ptr obj, NetBufferedStream& s) {
  TucanEmailTransportFactory::_marshalObjRef(obj, s);
}

TucanEmailTransportFactory_ptr TucanEmailTransportFactory_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanEmailTransportFactory::_unmarshalObjRef(s);
}

void TucanEmailTransportFactory_Helper::marshalObjRef(TucanEmailTransportFactory_ptr obj, MemBufferedStream& s) {
  TucanEmailTransportFactory::_marshalObjRef(obj, s);
}

TucanEmailTransportFactory_ptr TucanEmailTransportFactory_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanEmailTransportFactory::_unmarshalObjRef(s);
}

TucanEmailTransportFactory_ptr
TucanEmailTransportFactory::_duplicate(TucanEmailTransportFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanEmailTransportFactory_ptr
TucanEmailTransportFactory::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanEmailTransportFactory_ptr
TucanEmailTransportFactory::_nil()
{
  static _objref_TucanEmailTransportFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanEmailTransportFactory;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanEmailTransportFactory::_PD_repoId = "IDL:TucanEmailTransportFactory:1.0";

_objref_TucanEmailTransportFactory::~_objref_TucanEmailTransportFactory() {}

_objref_TucanEmailTransportFactory::_objref_TucanEmailTransportFactory(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanTransportFactory(mdri, p, id, lid),
   
   omniObjRef(TucanEmailTransportFactory::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanEmailTransportFactory::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanEmailTransportFactory::_PD_repoId) )
    return (TucanEmailTransportFactory_ptr) this;
  if( !strcmp(id, TucanTransportFactory::_PD_repoId) )
    return (TucanTransportFactory_ptr) this;
  
  return 0;
}

_pof_TucanEmailTransportFactory::~_pof_TucanEmailTransportFactory() {}

omniObjRef*
_pof_TucanEmailTransportFactory::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanEmailTransportFactory(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanEmailTransportFactory::is_a(const char* id) const
{
  if( !strcmp(id, TucanEmailTransportFactory::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanTransportFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanEmailTransportFactory _the_pof_TucanEmailTransportFactory;

_impl_TucanEmailTransportFactory::~_impl_TucanEmailTransportFactory() {}

CORBA::Boolean
_impl_TucanEmailTransportFactory::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanTransportFactory::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanEmailTransportFactory::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanEmailTransportFactory::_PD_repoId) )
    return (_impl_TucanEmailTransportFactory*) this;
  if( !strcmp(id, TucanTransportFactory::_PD_repoId) )
    return (_impl_TucanTransportFactory*) this;

  return 0;
}

const char*
_impl_TucanEmailTransportFactory::_mostDerivedRepoId()
{
  return TucanEmailTransportFactory::_PD_repoId;
}

TucanSMTPTransport_ptr TucanSMTPTransport_Helper::_nil() {
  return TucanSMTPTransport::_nil();
}

CORBA::Boolean TucanSMTPTransport_Helper::is_nil(TucanSMTPTransport_ptr p) {
  return CORBA::is_nil(p);

}

void TucanSMTPTransport_Helper::release(TucanSMTPTransport_ptr p) {
  CORBA::release(p);
}

void TucanSMTPTransport_Helper::duplicate(TucanSMTPTransport_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanSMTPTransport_Helper::NP_alignedSize(TucanSMTPTransport_ptr obj, size_t offset) {
  return TucanSMTPTransport::_alignedSize(obj, offset);
}

void TucanSMTPTransport_Helper::marshalObjRef(TucanSMTPTransport_ptr obj, NetBufferedStream& s) {
  TucanSMTPTransport::_marshalObjRef(obj, s);
}

TucanSMTPTransport_ptr TucanSMTPTransport_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanSMTPTransport::_unmarshalObjRef(s);
}

void TucanSMTPTransport_Helper::marshalObjRef(TucanSMTPTransport_ptr obj, MemBufferedStream& s) {
  TucanSMTPTransport::_marshalObjRef(obj, s);
}

TucanSMTPTransport_ptr TucanSMTPTransport_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanSMTPTransport::_unmarshalObjRef(s);
}

TucanSMTPTransport_ptr
TucanSMTPTransport::_duplicate(TucanSMTPTransport_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanSMTPTransport_ptr
TucanSMTPTransport::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanSMTPTransport_ptr
TucanSMTPTransport::_nil()
{
  static _objref_TucanSMTPTransport* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanSMTPTransport;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanSMTPTransport::_PD_repoId = "IDL:TucanSMTPTransport:1.0";

_objref_TucanSMTPTransport::~_objref_TucanSMTPTransport() {}

_objref_TucanSMTPTransport::_objref_TucanSMTPTransport(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanTransport(mdri, p, id, lid),
   
   omniObjRef(TucanSMTPTransport::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanSMTPTransport::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanSMTPTransport::_PD_repoId) )
    return (TucanSMTPTransport_ptr) this;
  if( !strcmp(id, TucanTransport::_PD_repoId) )
    return (TucanTransport_ptr) this;
  
  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_10100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_5c000000* tcd = (_0RL_cd_812ed87905f9c760_5c000000*) cd;
  _impl_TucanSMTPTransport* impl = (_impl_TucanSMTPTransport*) svnt->_ptrToInterface(TucanSMTPTransport::_PD_repoId);
  impl->setPort(tcd->arg_0);
}

void _objref_TucanSMTPTransport::setPort(CORBA::Short port)
{
  _0RL_cd_812ed87905f9c760_5c000000 _call_desc(_0RL_lcfn_812ed87905f9c760_10100000, "setPort", 8, 0, port);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_20100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_db000000* tcd = (_0RL_cd_812ed87905f9c760_db000000*) cd;
  _impl_TucanSMTPTransport* impl = (_impl_TucanSMTPTransport*) svnt->_ptrToInterface(TucanSMTPTransport::_PD_repoId);
  impl->setServer(tcd->arg_0);
}

void _objref_TucanSMTPTransport::setServer(const char* server)
{
  _0RL_cd_812ed87905f9c760_db000000 _call_desc(_0RL_lcfn_812ed87905f9c760_20100000, "setServer", 10, 0, server);
  
  _invoke(_call_desc);
  
}

_pof_TucanSMTPTransport::~_pof_TucanSMTPTransport() {}

omniObjRef*
_pof_TucanSMTPTransport::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanSMTPTransport(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanSMTPTransport::is_a(const char* id) const
{
  if( !strcmp(id, TucanSMTPTransport::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanTransport::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanSMTPTransport _the_pof_TucanSMTPTransport;

_impl_TucanSMTPTransport::~_impl_TucanSMTPTransport() {}

CORBA::Boolean
_impl_TucanSMTPTransport::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "setPort") ) {
    
    CORBA::Short arg_port;
    
    arg_port <<= giop_s;
    
    giop_s.RequestReceived();
    
    this->setPort(arg_port);
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setServer") ) {
    
    CORBA::String_var arg_server;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_server = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    
    this->setServer(arg_server.in());
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( _impl_TucanTransport::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanSMTPTransport::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanSMTPTransport::_PD_repoId) )
    return (_impl_TucanSMTPTransport*) this;
  if( !strcmp(id, TucanTransport::_PD_repoId) )
    return (_impl_TucanTransport*) this;

  return 0;
}

const char*
_impl_TucanSMTPTransport::_mostDerivedRepoId()
{
  return TucanSMTPTransport::_PD_repoId;
}

TucanSMTPTransportFactory_ptr TucanSMTPTransportFactory_Helper::_nil() {
  return TucanSMTPTransportFactory::_nil();
}

CORBA::Boolean TucanSMTPTransportFactory_Helper::is_nil(TucanSMTPTransportFactory_ptr p) {
  return CORBA::is_nil(p);

}

void TucanSMTPTransportFactory_Helper::release(TucanSMTPTransportFactory_ptr p) {
  CORBA::release(p);
}

void TucanSMTPTransportFactory_Helper::duplicate(TucanSMTPTransportFactory_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanSMTPTransportFactory_Helper::NP_alignedSize(TucanSMTPTransportFactory_ptr obj, size_t offset) {
  return TucanSMTPTransportFactory::_alignedSize(obj, offset);
}

void TucanSMTPTransportFactory_Helper::marshalObjRef(TucanSMTPTransportFactory_ptr obj, NetBufferedStream& s) {
  TucanSMTPTransportFactory::_marshalObjRef(obj, s);
}

TucanSMTPTransportFactory_ptr TucanSMTPTransportFactory_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanSMTPTransportFactory::_unmarshalObjRef(s);
}

void TucanSMTPTransportFactory_Helper::marshalObjRef(TucanSMTPTransportFactory_ptr obj, MemBufferedStream& s) {
  TucanSMTPTransportFactory::_marshalObjRef(obj, s);
}

TucanSMTPTransportFactory_ptr TucanSMTPTransportFactory_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanSMTPTransportFactory::_unmarshalObjRef(s);
}

TucanSMTPTransportFactory_ptr
TucanSMTPTransportFactory::_duplicate(TucanSMTPTransportFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanSMTPTransportFactory_ptr
TucanSMTPTransportFactory::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanSMTPTransportFactory_ptr
TucanSMTPTransportFactory::_nil()
{
  static _objref_TucanSMTPTransportFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanSMTPTransportFactory;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanSMTPTransportFactory::_PD_repoId = "IDL:TucanSMTPTransportFactory:1.0";

_objref_TucanSMTPTransportFactory::~_objref_TucanSMTPTransportFactory() {}

_objref_TucanSMTPTransportFactory::_objref_TucanSMTPTransportFactory(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanTransportFactory(mdri, p, id, lid),
   
   omniObjRef(TucanSMTPTransportFactory::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanSMTPTransportFactory::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanSMTPTransportFactory::_PD_repoId) )
    return (TucanSMTPTransportFactory_ptr) this;
  if( !strcmp(id, TucanTransportFactory::_PD_repoId) )
    return (TucanTransportFactory_ptr) this;
  
  return 0;
}

_pof_TucanSMTPTransportFactory::~_pof_TucanSMTPTransportFactory() {}

omniObjRef*
_pof_TucanSMTPTransportFactory::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanSMTPTransportFactory(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanSMTPTransportFactory::is_a(const char* id) const
{
  if( !strcmp(id, TucanSMTPTransportFactory::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanTransportFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanSMTPTransportFactory _the_pof_TucanSMTPTransportFactory;

_impl_TucanSMTPTransportFactory::~_impl_TucanSMTPTransportFactory() {}

CORBA::Boolean
_impl_TucanSMTPTransportFactory::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanTransportFactory::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanSMTPTransportFactory::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanSMTPTransportFactory::_PD_repoId) )
    return (_impl_TucanSMTPTransportFactory*) this;
  if( !strcmp(id, TucanTransportFactory::_PD_repoId) )
    return (_impl_TucanTransportFactory*) this;

  return 0;
}

const char*
_impl_TucanSMTPTransportFactory::_mostDerivedRepoId()
{
  return TucanSMTPTransportFactory::_PD_repoId;
}

TucanFaxAddress_ptr TucanFaxAddress_Helper::_nil() {
  return TucanFaxAddress::_nil();
}

CORBA::Boolean TucanFaxAddress_Helper::is_nil(TucanFaxAddress_ptr p) {
  return CORBA::is_nil(p);

}

void TucanFaxAddress_Helper::release(TucanFaxAddress_ptr p) {
  CORBA::release(p);
}

void TucanFaxAddress_Helper::duplicate(TucanFaxAddress_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanFaxAddress_Helper::NP_alignedSize(TucanFaxAddress_ptr obj, size_t offset) {
  return TucanFaxAddress::_alignedSize(obj, offset);
}

void TucanFaxAddress_Helper::marshalObjRef(TucanFaxAddress_ptr obj, NetBufferedStream& s) {
  TucanFaxAddress::_marshalObjRef(obj, s);
}

TucanFaxAddress_ptr TucanFaxAddress_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanFaxAddress::_unmarshalObjRef(s);
}

void TucanFaxAddress_Helper::marshalObjRef(TucanFaxAddress_ptr obj, MemBufferedStream& s) {
  TucanFaxAddress::_marshalObjRef(obj, s);
}

TucanFaxAddress_ptr TucanFaxAddress_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanFaxAddress::_unmarshalObjRef(s);
}

TucanFaxAddress_ptr
TucanFaxAddress::_duplicate(TucanFaxAddress_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanFaxAddress_ptr
TucanFaxAddress::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanFaxAddress_ptr
TucanFaxAddress::_nil()
{
  static _objref_TucanFaxAddress* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanFaxAddress;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanFaxAddress::_PD_repoId = "IDL:TucanFaxAddress:1.0";

_objref_TucanFaxAddress::~_objref_TucanFaxAddress() {}

_objref_TucanFaxAddress::_objref_TucanFaxAddress(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanAddress(mdri, p, id, lid),
   
   omniObjRef(TucanFaxAddress::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanFaxAddress::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanFaxAddress::_PD_repoId) )
    return (TucanFaxAddress_ptr) this;
  if( !strcmp(id, TucanAddress::_PD_repoId) )
    return (TucanAddress_ptr) this;
  
  return 0;
}

_pof_TucanFaxAddress::~_pof_TucanFaxAddress() {}

omniObjRef*
_pof_TucanFaxAddress::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanFaxAddress(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanFaxAddress::is_a(const char* id) const
{
  if( !strcmp(id, TucanFaxAddress::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanAddress::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanFaxAddress _the_pof_TucanFaxAddress;

_impl_TucanFaxAddress::~_impl_TucanFaxAddress() {}

CORBA::Boolean
_impl_TucanFaxAddress::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanAddress::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanFaxAddress::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanFaxAddress::_PD_repoId) )
    return (_impl_TucanFaxAddress*) this;
  if( !strcmp(id, TucanAddress::_PD_repoId) )
    return (_impl_TucanAddress*) this;

  return 0;
}

const char*
_impl_TucanFaxAddress::_mostDerivedRepoId()
{
  return TucanFaxAddress::_PD_repoId;
}

TucanFaxAddressFactory_ptr TucanFaxAddressFactory_Helper::_nil() {
  return TucanFaxAddressFactory::_nil();
}

CORBA::Boolean TucanFaxAddressFactory_Helper::is_nil(TucanFaxAddressFactory_ptr p) {
  return CORBA::is_nil(p);

}

void TucanFaxAddressFactory_Helper::release(TucanFaxAddressFactory_ptr p) {
  CORBA::release(p);
}

void TucanFaxAddressFactory_Helper::duplicate(TucanFaxAddressFactory_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanFaxAddressFactory_Helper::NP_alignedSize(TucanFaxAddressFactory_ptr obj, size_t offset) {
  return TucanFaxAddressFactory::_alignedSize(obj, offset);
}

void TucanFaxAddressFactory_Helper::marshalObjRef(TucanFaxAddressFactory_ptr obj, NetBufferedStream& s) {
  TucanFaxAddressFactory::_marshalObjRef(obj, s);
}

TucanFaxAddressFactory_ptr TucanFaxAddressFactory_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanFaxAddressFactory::_unmarshalObjRef(s);
}

void TucanFaxAddressFactory_Helper::marshalObjRef(TucanFaxAddressFactory_ptr obj, MemBufferedStream& s) {
  TucanFaxAddressFactory::_marshalObjRef(obj, s);
}

TucanFaxAddressFactory_ptr TucanFaxAddressFactory_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanFaxAddressFactory::_unmarshalObjRef(s);
}

TucanFaxAddressFactory_ptr
TucanFaxAddressFactory::_duplicate(TucanFaxAddressFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanFaxAddressFactory_ptr
TucanFaxAddressFactory::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanFaxAddressFactory_ptr
TucanFaxAddressFactory::_nil()
{
  static _objref_TucanFaxAddressFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanFaxAddressFactory;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanFaxAddressFactory::_PD_repoId = "IDL:TucanFaxAddressFactory:1.0";

_objref_TucanFaxAddressFactory::~_objref_TucanFaxAddressFactory() {}

_objref_TucanFaxAddressFactory::_objref_TucanFaxAddressFactory(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanAddressFactory(mdri, p, id, lid),
   
   omniObjRef(TucanFaxAddressFactory::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanFaxAddressFactory::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanFaxAddressFactory::_PD_repoId) )
    return (TucanFaxAddressFactory_ptr) this;
  if( !strcmp(id, TucanAddressFactory::_PD_repoId) )
    return (TucanAddressFactory_ptr) this;
  
  return 0;
}

_pof_TucanFaxAddressFactory::~_pof_TucanFaxAddressFactory() {}

omniObjRef*
_pof_TucanFaxAddressFactory::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanFaxAddressFactory(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanFaxAddressFactory::is_a(const char* id) const
{
  if( !strcmp(id, TucanFaxAddressFactory::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanAddressFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanFaxAddressFactory _the_pof_TucanFaxAddressFactory;

_impl_TucanFaxAddressFactory::~_impl_TucanFaxAddressFactory() {}

CORBA::Boolean
_impl_TucanFaxAddressFactory::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanAddressFactory::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanFaxAddressFactory::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanFaxAddressFactory::_PD_repoId) )
    return (_impl_TucanFaxAddressFactory*) this;
  if( !strcmp(id, TucanAddressFactory::_PD_repoId) )
    return (_impl_TucanAddressFactory*) this;

  return 0;
}

const char*
_impl_TucanFaxAddressFactory::_mostDerivedRepoId()
{
  return TucanFaxAddressFactory::_PD_repoId;
}

TucanFaxFolder_ptr TucanFaxFolder_Helper::_nil() {
  return TucanFaxFolder::_nil();
}

CORBA::Boolean TucanFaxFolder_Helper::is_nil(TucanFaxFolder_ptr p) {
  return CORBA::is_nil(p);

}

void TucanFaxFolder_Helper::release(TucanFaxFolder_ptr p) {
  CORBA::release(p);
}

void TucanFaxFolder_Helper::duplicate(TucanFaxFolder_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanFaxFolder_Helper::NP_alignedSize(TucanFaxFolder_ptr obj, size_t offset) {
  return TucanFaxFolder::_alignedSize(obj, offset);
}

void TucanFaxFolder_Helper::marshalObjRef(TucanFaxFolder_ptr obj, NetBufferedStream& s) {
  TucanFaxFolder::_marshalObjRef(obj, s);
}

TucanFaxFolder_ptr TucanFaxFolder_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanFaxFolder::_unmarshalObjRef(s);
}

void TucanFaxFolder_Helper::marshalObjRef(TucanFaxFolder_ptr obj, MemBufferedStream& s) {
  TucanFaxFolder::_marshalObjRef(obj, s);
}

TucanFaxFolder_ptr TucanFaxFolder_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanFaxFolder::_unmarshalObjRef(s);
}

TucanFaxFolder_ptr
TucanFaxFolder::_duplicate(TucanFaxFolder_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanFaxFolder_ptr
TucanFaxFolder::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanFaxFolder_ptr
TucanFaxFolder::_nil()
{
  static _objref_TucanFaxFolder* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanFaxFolder;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanFaxFolder::_PD_repoId = "IDL:TucanFaxFolder:1.0";

_objref_TucanFaxFolder::~_objref_TucanFaxFolder() {}

_objref_TucanFaxFolder::_objref_TucanFaxFolder(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanFolder(mdri, p, id, lid),
   
   omniObjRef(TucanFaxFolder::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanFaxFolder::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanFaxFolder::_PD_repoId) )
    return (TucanFaxFolder_ptr) this;
  if( !strcmp(id, TucanFolder::_PD_repoId) )
    return (TucanFolder_ptr) this;
  
  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_30100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_ff000000* tcd = (_0RL_cd_812ed87905f9c760_ff000000*) cd;
  _impl_TucanFaxFolder* impl = (_impl_TucanFaxFolder*) svnt->_ptrToInterface(TucanFaxFolder::_PD_repoId);
  tcd->pd_result = impl->getMessageHeaders();
}

TucanMessageHeaderSeq* _objref_TucanFaxFolder::getMessageHeaders()
{
  _0RL_cd_812ed87905f9c760_ff000000 _call_desc(_0RL_lcfn_812ed87905f9c760_30100000, "getMessageHeaders", 18, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

_pof_TucanFaxFolder::~_pof_TucanFaxFolder() {}

omniObjRef*
_pof_TucanFaxFolder::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanFaxFolder(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanFaxFolder::is_a(const char* id) const
{
  if( !strcmp(id, TucanFaxFolder::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanFolder::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanFaxFolder _the_pof_TucanFaxFolder;

_impl_TucanFaxFolder::~_impl_TucanFaxFolder() {}

CORBA::Boolean
_impl_TucanFaxFolder::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "getMessageHeaders") ) {
    
    giop_s.RequestReceived();
    TucanMessageHeaderSeq_var result;
    
    result = this->getMessageHeaders();
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      *(result.operator->()) >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( _impl_TucanFolder::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanFaxFolder::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanFaxFolder::_PD_repoId) )
    return (_impl_TucanFaxFolder*) this;
  if( !strcmp(id, TucanFolder::_PD_repoId) )
    return (_impl_TucanFolder*) this;

  return 0;
}

const char*
_impl_TucanFaxFolder::_mostDerivedRepoId()
{
  return TucanFaxFolder::_PD_repoId;
}

TucanFaxFolderFactory_ptr TucanFaxFolderFactory_Helper::_nil() {
  return TucanFaxFolderFactory::_nil();
}

CORBA::Boolean TucanFaxFolderFactory_Helper::is_nil(TucanFaxFolderFactory_ptr p) {
  return CORBA::is_nil(p);

}

void TucanFaxFolderFactory_Helper::release(TucanFaxFolderFactory_ptr p) {
  CORBA::release(p);
}

void TucanFaxFolderFactory_Helper::duplicate(TucanFaxFolderFactory_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanFaxFolderFactory_Helper::NP_alignedSize(TucanFaxFolderFactory_ptr obj, size_t offset) {
  return TucanFaxFolderFactory::_alignedSize(obj, offset);
}

void TucanFaxFolderFactory_Helper::marshalObjRef(TucanFaxFolderFactory_ptr obj, NetBufferedStream& s) {
  TucanFaxFolderFactory::_marshalObjRef(obj, s);
}

TucanFaxFolderFactory_ptr TucanFaxFolderFactory_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanFaxFolderFactory::_unmarshalObjRef(s);
}

void TucanFaxFolderFactory_Helper::marshalObjRef(TucanFaxFolderFactory_ptr obj, MemBufferedStream& s) {
  TucanFaxFolderFactory::_marshalObjRef(obj, s);
}

TucanFaxFolderFactory_ptr TucanFaxFolderFactory_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanFaxFolderFactory::_unmarshalObjRef(s);
}

TucanFaxFolderFactory_ptr
TucanFaxFolderFactory::_duplicate(TucanFaxFolderFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanFaxFolderFactory_ptr
TucanFaxFolderFactory::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanFaxFolderFactory_ptr
TucanFaxFolderFactory::_nil()
{
  static _objref_TucanFaxFolderFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanFaxFolderFactory;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanFaxFolderFactory::_PD_repoId = "IDL:TucanFaxFolderFactory:1.0";

_objref_TucanFaxFolderFactory::~_objref_TucanFaxFolderFactory() {}

_objref_TucanFaxFolderFactory::_objref_TucanFaxFolderFactory(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanFolderFactory(mdri, p, id, lid),
   
   omniObjRef(TucanFaxFolderFactory::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanFaxFolderFactory::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanFaxFolderFactory::_PD_repoId) )
    return (TucanFaxFolderFactory_ptr) this;
  if( !strcmp(id, TucanFolderFactory::_PD_repoId) )
    return (TucanFolderFactory_ptr) this;
  
  return 0;
}

_pof_TucanFaxFolderFactory::~_pof_TucanFaxFolderFactory() {}

omniObjRef*
_pof_TucanFaxFolderFactory::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanFaxFolderFactory(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanFaxFolderFactory::is_a(const char* id) const
{
  if( !strcmp(id, TucanFaxFolderFactory::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanFolderFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanFaxFolderFactory _the_pof_TucanFaxFolderFactory;

_impl_TucanFaxFolderFactory::~_impl_TucanFaxFolderFactory() {}

CORBA::Boolean
_impl_TucanFaxFolderFactory::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanFolderFactory::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanFaxFolderFactory::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanFaxFolderFactory::_PD_repoId) )
    return (_impl_TucanFaxFolderFactory*) this;
  if( !strcmp(id, TucanFolderFactory::_PD_repoId) )
    return (_impl_TucanFolderFactory*) this;

  return 0;
}

const char*
_impl_TucanFaxFolderFactory::_mostDerivedRepoId()
{
  return TucanFaxFolderFactory::_PD_repoId;
}

TucanFaxMessage_ptr TucanFaxMessage_Helper::_nil() {
  return TucanFaxMessage::_nil();
}

CORBA::Boolean TucanFaxMessage_Helper::is_nil(TucanFaxMessage_ptr p) {
  return CORBA::is_nil(p);

}

void TucanFaxMessage_Helper::release(TucanFaxMessage_ptr p) {
  CORBA::release(p);
}

void TucanFaxMessage_Helper::duplicate(TucanFaxMessage_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanFaxMessage_Helper::NP_alignedSize(TucanFaxMessage_ptr obj, size_t offset) {
  return TucanFaxMessage::_alignedSize(obj, offset);
}

void TucanFaxMessage_Helper::marshalObjRef(TucanFaxMessage_ptr obj, NetBufferedStream& s) {
  TucanFaxMessage::_marshalObjRef(obj, s);
}

TucanFaxMessage_ptr TucanFaxMessage_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanFaxMessage::_unmarshalObjRef(s);
}

void TucanFaxMessage_Helper::marshalObjRef(TucanFaxMessage_ptr obj, MemBufferedStream& s) {
  TucanFaxMessage::_marshalObjRef(obj, s);
}

TucanFaxMessage_ptr TucanFaxMessage_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanFaxMessage::_unmarshalObjRef(s);
}

TucanFaxMessage_ptr
TucanFaxMessage::_duplicate(TucanFaxMessage_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanFaxMessage_ptr
TucanFaxMessage::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanFaxMessage_ptr
TucanFaxMessage::_nil()
{
  static _objref_TucanFaxMessage* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanFaxMessage;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanFaxMessage::_PD_repoId = "IDL:TucanFaxMessage:1.0";

_objref_TucanFaxMessage::~_objref_TucanFaxMessage() {}

_objref_TucanFaxMessage::_objref_TucanFaxMessage(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanMessage(mdri, p, id, lid),
   
   omniObjRef(TucanFaxMessage::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanFaxMessage::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanFaxMessage::_PD_repoId) )
    return (TucanFaxMessage_ptr) this;
  if( !strcmp(id, TucanMessage::_PD_repoId) )
    return (TucanMessage_ptr) this;
  
  return 0;
}

_pof_TucanFaxMessage::~_pof_TucanFaxMessage() {}

omniObjRef*
_pof_TucanFaxMessage::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanFaxMessage(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanFaxMessage::is_a(const char* id) const
{
  if( !strcmp(id, TucanFaxMessage::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanMessage::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanFaxMessage _the_pof_TucanFaxMessage;

_impl_TucanFaxMessage::~_impl_TucanFaxMessage() {}

CORBA::Boolean
_impl_TucanFaxMessage::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanMessage::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanFaxMessage::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanFaxMessage::_PD_repoId) )
    return (_impl_TucanFaxMessage*) this;
  if( !strcmp(id, TucanMessage::_PD_repoId) )
    return (_impl_TucanMessage*) this;

  return 0;
}

const char*
_impl_TucanFaxMessage::_mostDerivedRepoId()
{
  return TucanFaxMessage::_PD_repoId;
}

TucanFaxMessageFactory_ptr TucanFaxMessageFactory_Helper::_nil() {
  return TucanFaxMessageFactory::_nil();
}

CORBA::Boolean TucanFaxMessageFactory_Helper::is_nil(TucanFaxMessageFactory_ptr p) {
  return CORBA::is_nil(p);

}

void TucanFaxMessageFactory_Helper::release(TucanFaxMessageFactory_ptr p) {
  CORBA::release(p);
}

void TucanFaxMessageFactory_Helper::duplicate(TucanFaxMessageFactory_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanFaxMessageFactory_Helper::NP_alignedSize(TucanFaxMessageFactory_ptr obj, size_t offset) {
  return TucanFaxMessageFactory::_alignedSize(obj, offset);
}

void TucanFaxMessageFactory_Helper::marshalObjRef(TucanFaxMessageFactory_ptr obj, NetBufferedStream& s) {
  TucanFaxMessageFactory::_marshalObjRef(obj, s);
}

TucanFaxMessageFactory_ptr TucanFaxMessageFactory_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanFaxMessageFactory::_unmarshalObjRef(s);
}

void TucanFaxMessageFactory_Helper::marshalObjRef(TucanFaxMessageFactory_ptr obj, MemBufferedStream& s) {
  TucanFaxMessageFactory::_marshalObjRef(obj, s);
}

TucanFaxMessageFactory_ptr TucanFaxMessageFactory_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanFaxMessageFactory::_unmarshalObjRef(s);
}

TucanFaxMessageFactory_ptr
TucanFaxMessageFactory::_duplicate(TucanFaxMessageFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanFaxMessageFactory_ptr
TucanFaxMessageFactory::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanFaxMessageFactory_ptr
TucanFaxMessageFactory::_nil()
{
  static _objref_TucanFaxMessageFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanFaxMessageFactory;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanFaxMessageFactory::_PD_repoId = "IDL:TucanFaxMessageFactory:1.0";

_objref_TucanFaxMessageFactory::~_objref_TucanFaxMessageFactory() {}

_objref_TucanFaxMessageFactory::_objref_TucanFaxMessageFactory(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanMessageFactory(mdri, p, id, lid),
   
   omniObjRef(TucanFaxMessageFactory::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanFaxMessageFactory::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanFaxMessageFactory::_PD_repoId) )
    return (TucanFaxMessageFactory_ptr) this;
  if( !strcmp(id, TucanMessageFactory::_PD_repoId) )
    return (TucanMessageFactory_ptr) this;
  
  return 0;
}

_pof_TucanFaxMessageFactory::~_pof_TucanFaxMessageFactory() {}

omniObjRef*
_pof_TucanFaxMessageFactory::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanFaxMessageFactory(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanFaxMessageFactory::is_a(const char* id) const
{
  if( !strcmp(id, TucanFaxMessageFactory::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanMessageFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanFaxMessageFactory _the_pof_TucanFaxMessageFactory;

_impl_TucanFaxMessageFactory::~_impl_TucanFaxMessageFactory() {}

CORBA::Boolean
_impl_TucanFaxMessageFactory::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanMessageFactory::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanFaxMessageFactory::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanFaxMessageFactory::_PD_repoId) )
    return (_impl_TucanFaxMessageFactory*) this;
  if( !strcmp(id, TucanMessageFactory::_PD_repoId) )
    return (_impl_TucanMessageFactory*) this;

  return 0;
}

const char*
_impl_TucanFaxMessageFactory::_mostDerivedRepoId()
{
  return TucanFaxMessageFactory::_PD_repoId;
}

TucanFaxStore_ptr TucanFaxStore_Helper::_nil() {
  return TucanFaxStore::_nil();
}

CORBA::Boolean TucanFaxStore_Helper::is_nil(TucanFaxStore_ptr p) {
  return CORBA::is_nil(p);

}

void TucanFaxStore_Helper::release(TucanFaxStore_ptr p) {
  CORBA::release(p);
}

void TucanFaxStore_Helper::duplicate(TucanFaxStore_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanFaxStore_Helper::NP_alignedSize(TucanFaxStore_ptr obj, size_t offset) {
  return TucanFaxStore::_alignedSize(obj, offset);
}

void TucanFaxStore_Helper::marshalObjRef(TucanFaxStore_ptr obj, NetBufferedStream& s) {
  TucanFaxStore::_marshalObjRef(obj, s);
}

TucanFaxStore_ptr TucanFaxStore_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanFaxStore::_unmarshalObjRef(s);
}

void TucanFaxStore_Helper::marshalObjRef(TucanFaxStore_ptr obj, MemBufferedStream& s) {
  TucanFaxStore::_marshalObjRef(obj, s);
}

TucanFaxStore_ptr TucanFaxStore_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanFaxStore::_unmarshalObjRef(s);
}

TucanFaxStore_ptr
TucanFaxStore::_duplicate(TucanFaxStore_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanFaxStore_ptr
TucanFaxStore::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanFaxStore_ptr
TucanFaxStore::_nil()
{
  static _objref_TucanFaxStore* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanFaxStore;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanFaxStore::_PD_repoId = "IDL:TucanFaxStore:1.0";

_objref_TucanFaxStore::~_objref_TucanFaxStore() {}

_objref_TucanFaxStore::_objref_TucanFaxStore(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanStore(mdri, p, id, lid),
   
   omniObjRef(TucanFaxStore::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanFaxStore::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanFaxStore::_PD_repoId) )
    return (TucanFaxStore_ptr) this;
  if( !strcmp(id, TucanStore::_PD_repoId) )
    return (TucanStore_ptr) this;
  
  return 0;
}

_pof_TucanFaxStore::~_pof_TucanFaxStore() {}

omniObjRef*
_pof_TucanFaxStore::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanFaxStore(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanFaxStore::is_a(const char* id) const
{
  if( !strcmp(id, TucanFaxStore::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanStore::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanFaxStore _the_pof_TucanFaxStore;

_impl_TucanFaxStore::~_impl_TucanFaxStore() {}

CORBA::Boolean
_impl_TucanFaxStore::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanStore::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanFaxStore::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanFaxStore::_PD_repoId) )
    return (_impl_TucanFaxStore*) this;
  if( !strcmp(id, TucanStore::_PD_repoId) )
    return (_impl_TucanStore*) this;

  return 0;
}

const char*
_impl_TucanFaxStore::_mostDerivedRepoId()
{
  return TucanFaxStore::_PD_repoId;
}

TucanFaxStoreFactory_ptr TucanFaxStoreFactory_Helper::_nil() {
  return TucanFaxStoreFactory::_nil();
}

CORBA::Boolean TucanFaxStoreFactory_Helper::is_nil(TucanFaxStoreFactory_ptr p) {
  return CORBA::is_nil(p);

}

void TucanFaxStoreFactory_Helper::release(TucanFaxStoreFactory_ptr p) {
  CORBA::release(p);
}

void TucanFaxStoreFactory_Helper::duplicate(TucanFaxStoreFactory_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanFaxStoreFactory_Helper::NP_alignedSize(TucanFaxStoreFactory_ptr obj, size_t offset) {
  return TucanFaxStoreFactory::_alignedSize(obj, offset);
}

void TucanFaxStoreFactory_Helper::marshalObjRef(TucanFaxStoreFactory_ptr obj, NetBufferedStream& s) {
  TucanFaxStoreFactory::_marshalObjRef(obj, s);
}

TucanFaxStoreFactory_ptr TucanFaxStoreFactory_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanFaxStoreFactory::_unmarshalObjRef(s);
}

void TucanFaxStoreFactory_Helper::marshalObjRef(TucanFaxStoreFactory_ptr obj, MemBufferedStream& s) {
  TucanFaxStoreFactory::_marshalObjRef(obj, s);
}

TucanFaxStoreFactory_ptr TucanFaxStoreFactory_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanFaxStoreFactory::_unmarshalObjRef(s);
}

TucanFaxStoreFactory_ptr
TucanFaxStoreFactory::_duplicate(TucanFaxStoreFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanFaxStoreFactory_ptr
TucanFaxStoreFactory::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanFaxStoreFactory_ptr
TucanFaxStoreFactory::_nil()
{
  static _objref_TucanFaxStoreFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanFaxStoreFactory;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanFaxStoreFactory::_PD_repoId = "IDL:TucanFaxStoreFactory:1.0";

_objref_TucanFaxStoreFactory::~_objref_TucanFaxStoreFactory() {}

_objref_TucanFaxStoreFactory::_objref_TucanFaxStoreFactory(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanStoreFactory(mdri, p, id, lid),
   
   omniObjRef(TucanFaxStoreFactory::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanFaxStoreFactory::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanFaxStoreFactory::_PD_repoId) )
    return (TucanFaxStoreFactory_ptr) this;
  if( !strcmp(id, TucanStoreFactory::_PD_repoId) )
    return (TucanStoreFactory_ptr) this;
  
  return 0;
}

_pof_TucanFaxStoreFactory::~_pof_TucanFaxStoreFactory() {}

omniObjRef*
_pof_TucanFaxStoreFactory::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanFaxStoreFactory(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanFaxStoreFactory::is_a(const char* id) const
{
  if( !strcmp(id, TucanFaxStoreFactory::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanStoreFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanFaxStoreFactory _the_pof_TucanFaxStoreFactory;

_impl_TucanFaxStoreFactory::~_impl_TucanFaxStoreFactory() {}

CORBA::Boolean
_impl_TucanFaxStoreFactory::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanStoreFactory::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanFaxStoreFactory::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanFaxStoreFactory::_PD_repoId) )
    return (_impl_TucanFaxStoreFactory*) this;
  if( !strcmp(id, TucanStoreFactory::_PD_repoId) )
    return (_impl_TucanStoreFactory*) this;

  return 0;
}

const char*
_impl_TucanFaxStoreFactory::_mostDerivedRepoId()
{
  return TucanFaxStoreFactory::_PD_repoId;
}

TucanFaxTransport_ptr TucanFaxTransport_Helper::_nil() {
  return TucanFaxTransport::_nil();
}

CORBA::Boolean TucanFaxTransport_Helper::is_nil(TucanFaxTransport_ptr p) {
  return CORBA::is_nil(p);

}

void TucanFaxTransport_Helper::release(TucanFaxTransport_ptr p) {
  CORBA::release(p);
}

void TucanFaxTransport_Helper::duplicate(TucanFaxTransport_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanFaxTransport_Helper::NP_alignedSize(TucanFaxTransport_ptr obj, size_t offset) {
  return TucanFaxTransport::_alignedSize(obj, offset);
}

void TucanFaxTransport_Helper::marshalObjRef(TucanFaxTransport_ptr obj, NetBufferedStream& s) {
  TucanFaxTransport::_marshalObjRef(obj, s);
}

TucanFaxTransport_ptr TucanFaxTransport_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanFaxTransport::_unmarshalObjRef(s);
}

void TucanFaxTransport_Helper::marshalObjRef(TucanFaxTransport_ptr obj, MemBufferedStream& s) {
  TucanFaxTransport::_marshalObjRef(obj, s);
}

TucanFaxTransport_ptr TucanFaxTransport_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanFaxTransport::_unmarshalObjRef(s);
}

TucanFaxTransport_ptr
TucanFaxTransport::_duplicate(TucanFaxTransport_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanFaxTransport_ptr
TucanFaxTransport::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanFaxTransport_ptr
TucanFaxTransport::_nil()
{
  static _objref_TucanFaxTransport* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanFaxTransport;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanFaxTransport::_PD_repoId = "IDL:TucanFaxTransport:1.0";

_objref_TucanFaxTransport::~_objref_TucanFaxTransport() {}

_objref_TucanFaxTransport::_objref_TucanFaxTransport(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanTransport(mdri, p, id, lid),
   
   omniObjRef(TucanFaxTransport::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanFaxTransport::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanFaxTransport::_PD_repoId) )
    return (TucanFaxTransport_ptr) this;
  if( !strcmp(id, TucanTransport::_PD_repoId) )
    return (TucanTransport_ptr) this;
  
  return 0;
}

_pof_TucanFaxTransport::~_pof_TucanFaxTransport() {}

omniObjRef*
_pof_TucanFaxTransport::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanFaxTransport(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanFaxTransport::is_a(const char* id) const
{
  if( !strcmp(id, TucanFaxTransport::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanTransport::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanFaxTransport _the_pof_TucanFaxTransport;

_impl_TucanFaxTransport::~_impl_TucanFaxTransport() {}

CORBA::Boolean
_impl_TucanFaxTransport::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanTransport::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanFaxTransport::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanFaxTransport::_PD_repoId) )
    return (_impl_TucanFaxTransport*) this;
  if( !strcmp(id, TucanTransport::_PD_repoId) )
    return (_impl_TucanTransport*) this;

  return 0;
}

const char*
_impl_TucanFaxTransport::_mostDerivedRepoId()
{
  return TucanFaxTransport::_PD_repoId;
}

TucanFaxTransportFactory_ptr TucanFaxTransportFactory_Helper::_nil() {
  return TucanFaxTransportFactory::_nil();
}

CORBA::Boolean TucanFaxTransportFactory_Helper::is_nil(TucanFaxTransportFactory_ptr p) {
  return CORBA::is_nil(p);

}

void TucanFaxTransportFactory_Helper::release(TucanFaxTransportFactory_ptr p) {
  CORBA::release(p);
}

void TucanFaxTransportFactory_Helper::duplicate(TucanFaxTransportFactory_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanFaxTransportFactory_Helper::NP_alignedSize(TucanFaxTransportFactory_ptr obj, size_t offset) {
  return TucanFaxTransportFactory::_alignedSize(obj, offset);
}

void TucanFaxTransportFactory_Helper::marshalObjRef(TucanFaxTransportFactory_ptr obj, NetBufferedStream& s) {
  TucanFaxTransportFactory::_marshalObjRef(obj, s);
}

TucanFaxTransportFactory_ptr TucanFaxTransportFactory_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanFaxTransportFactory::_unmarshalObjRef(s);
}

void TucanFaxTransportFactory_Helper::marshalObjRef(TucanFaxTransportFactory_ptr obj, MemBufferedStream& s) {
  TucanFaxTransportFactory::_marshalObjRef(obj, s);
}

TucanFaxTransportFactory_ptr TucanFaxTransportFactory_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanFaxTransportFactory::_unmarshalObjRef(s);
}

TucanFaxTransportFactory_ptr
TucanFaxTransportFactory::_duplicate(TucanFaxTransportFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanFaxTransportFactory_ptr
TucanFaxTransportFactory::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanFaxTransportFactory_ptr
TucanFaxTransportFactory::_nil()
{
  static _objref_TucanFaxTransportFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanFaxTransportFactory;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanFaxTransportFactory::_PD_repoId = "IDL:TucanFaxTransportFactory:1.0";

_objref_TucanFaxTransportFactory::~_objref_TucanFaxTransportFactory() {}

_objref_TucanFaxTransportFactory::_objref_TucanFaxTransportFactory(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanTransportFactory(mdri, p, id, lid),
   
   omniObjRef(TucanFaxTransportFactory::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanFaxTransportFactory::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanFaxTransportFactory::_PD_repoId) )
    return (TucanFaxTransportFactory_ptr) this;
  if( !strcmp(id, TucanTransportFactory::_PD_repoId) )
    return (TucanTransportFactory_ptr) this;
  
  return 0;
}

_pof_TucanFaxTransportFactory::~_pof_TucanFaxTransportFactory() {}

omniObjRef*
_pof_TucanFaxTransportFactory::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanFaxTransportFactory(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanFaxTransportFactory::is_a(const char* id) const
{
  if( !strcmp(id, TucanFaxTransportFactory::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanTransportFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanFaxTransportFactory _the_pof_TucanFaxTransportFactory;

_impl_TucanFaxTransportFactory::~_impl_TucanFaxTransportFactory() {}

CORBA::Boolean
_impl_TucanFaxTransportFactory::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanTransportFactory::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanFaxTransportFactory::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanFaxTransportFactory::_PD_repoId) )
    return (_impl_TucanFaxTransportFactory*) this;
  if( !strcmp(id, TucanTransportFactory::_PD_repoId) )
    return (_impl_TucanTransportFactory*) this;

  return 0;
}

const char*
_impl_TucanFaxTransportFactory::_mostDerivedRepoId()
{
  return TucanFaxTransportFactory::_PD_repoId;
}

TucanVoiceAddress_ptr TucanVoiceAddress_Helper::_nil() {
  return TucanVoiceAddress::_nil();
}

CORBA::Boolean TucanVoiceAddress_Helper::is_nil(TucanVoiceAddress_ptr p) {
  return CORBA::is_nil(p);

}

void TucanVoiceAddress_Helper::release(TucanVoiceAddress_ptr p) {
  CORBA::release(p);
}

void TucanVoiceAddress_Helper::duplicate(TucanVoiceAddress_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanVoiceAddress_Helper::NP_alignedSize(TucanVoiceAddress_ptr obj, size_t offset) {
  return TucanVoiceAddress::_alignedSize(obj, offset);
}

void TucanVoiceAddress_Helper::marshalObjRef(TucanVoiceAddress_ptr obj, NetBufferedStream& s) {
  TucanVoiceAddress::_marshalObjRef(obj, s);
}

TucanVoiceAddress_ptr TucanVoiceAddress_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanVoiceAddress::_unmarshalObjRef(s);
}

void TucanVoiceAddress_Helper::marshalObjRef(TucanVoiceAddress_ptr obj, MemBufferedStream& s) {
  TucanVoiceAddress::_marshalObjRef(obj, s);
}

TucanVoiceAddress_ptr TucanVoiceAddress_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanVoiceAddress::_unmarshalObjRef(s);
}

TucanVoiceAddress_ptr
TucanVoiceAddress::_duplicate(TucanVoiceAddress_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanVoiceAddress_ptr
TucanVoiceAddress::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanVoiceAddress_ptr
TucanVoiceAddress::_nil()
{
  static _objref_TucanVoiceAddress* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanVoiceAddress;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanVoiceAddress::_PD_repoId = "IDL:TucanVoiceAddress:1.0";

_objref_TucanVoiceAddress::~_objref_TucanVoiceAddress() {}

_objref_TucanVoiceAddress::_objref_TucanVoiceAddress(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanAddress(mdri, p, id, lid),
   
   omniObjRef(TucanVoiceAddress::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanVoiceAddress::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanVoiceAddress::_PD_repoId) )
    return (TucanVoiceAddress_ptr) this;
  if( !strcmp(id, TucanAddress::_PD_repoId) )
    return (TucanAddress_ptr) this;
  
  return 0;
}

_pof_TucanVoiceAddress::~_pof_TucanVoiceAddress() {}

omniObjRef*
_pof_TucanVoiceAddress::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanVoiceAddress(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanVoiceAddress::is_a(const char* id) const
{
  if( !strcmp(id, TucanVoiceAddress::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanAddress::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanVoiceAddress _the_pof_TucanVoiceAddress;

_impl_TucanVoiceAddress::~_impl_TucanVoiceAddress() {}

CORBA::Boolean
_impl_TucanVoiceAddress::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanAddress::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanVoiceAddress::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanVoiceAddress::_PD_repoId) )
    return (_impl_TucanVoiceAddress*) this;
  if( !strcmp(id, TucanAddress::_PD_repoId) )
    return (_impl_TucanAddress*) this;

  return 0;
}

const char*
_impl_TucanVoiceAddress::_mostDerivedRepoId()
{
  return TucanVoiceAddress::_PD_repoId;
}

TucanVoiceAddressFactory_ptr TucanVoiceAddressFactory_Helper::_nil() {
  return TucanVoiceAddressFactory::_nil();
}

CORBA::Boolean TucanVoiceAddressFactory_Helper::is_nil(TucanVoiceAddressFactory_ptr p) {
  return CORBA::is_nil(p);

}

void TucanVoiceAddressFactory_Helper::release(TucanVoiceAddressFactory_ptr p) {
  CORBA::release(p);
}

void TucanVoiceAddressFactory_Helper::duplicate(TucanVoiceAddressFactory_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanVoiceAddressFactory_Helper::NP_alignedSize(TucanVoiceAddressFactory_ptr obj, size_t offset) {
  return TucanVoiceAddressFactory::_alignedSize(obj, offset);
}

void TucanVoiceAddressFactory_Helper::marshalObjRef(TucanVoiceAddressFactory_ptr obj, NetBufferedStream& s) {
  TucanVoiceAddressFactory::_marshalObjRef(obj, s);
}

TucanVoiceAddressFactory_ptr TucanVoiceAddressFactory_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanVoiceAddressFactory::_unmarshalObjRef(s);
}

void TucanVoiceAddressFactory_Helper::marshalObjRef(TucanVoiceAddressFactory_ptr obj, MemBufferedStream& s) {
  TucanVoiceAddressFactory::_marshalObjRef(obj, s);
}

TucanVoiceAddressFactory_ptr TucanVoiceAddressFactory_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanVoiceAddressFactory::_unmarshalObjRef(s);
}

TucanVoiceAddressFactory_ptr
TucanVoiceAddressFactory::_duplicate(TucanVoiceAddressFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanVoiceAddressFactory_ptr
TucanVoiceAddressFactory::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanVoiceAddressFactory_ptr
TucanVoiceAddressFactory::_nil()
{
  static _objref_TucanVoiceAddressFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanVoiceAddressFactory;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanVoiceAddressFactory::_PD_repoId = "IDL:TucanVoiceAddressFactory:1.0";

_objref_TucanVoiceAddressFactory::~_objref_TucanVoiceAddressFactory() {}

_objref_TucanVoiceAddressFactory::_objref_TucanVoiceAddressFactory(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanAddressFactory(mdri, p, id, lid),
   
   omniObjRef(TucanVoiceAddressFactory::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanVoiceAddressFactory::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanVoiceAddressFactory::_PD_repoId) )
    return (TucanVoiceAddressFactory_ptr) this;
  if( !strcmp(id, TucanAddressFactory::_PD_repoId) )
    return (TucanAddressFactory_ptr) this;
  
  return 0;
}

_pof_TucanVoiceAddressFactory::~_pof_TucanVoiceAddressFactory() {}

omniObjRef*
_pof_TucanVoiceAddressFactory::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanVoiceAddressFactory(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanVoiceAddressFactory::is_a(const char* id) const
{
  if( !strcmp(id, TucanVoiceAddressFactory::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanAddressFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanVoiceAddressFactory _the_pof_TucanVoiceAddressFactory;

_impl_TucanVoiceAddressFactory::~_impl_TucanVoiceAddressFactory() {}

CORBA::Boolean
_impl_TucanVoiceAddressFactory::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanAddressFactory::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanVoiceAddressFactory::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanVoiceAddressFactory::_PD_repoId) )
    return (_impl_TucanVoiceAddressFactory*) this;
  if( !strcmp(id, TucanAddressFactory::_PD_repoId) )
    return (_impl_TucanAddressFactory*) this;

  return 0;
}

const char*
_impl_TucanVoiceAddressFactory::_mostDerivedRepoId()
{
  return TucanVoiceAddressFactory::_PD_repoId;
}

TucanVoiceFolder_ptr TucanVoiceFolder_Helper::_nil() {
  return TucanVoiceFolder::_nil();
}

CORBA::Boolean TucanVoiceFolder_Helper::is_nil(TucanVoiceFolder_ptr p) {
  return CORBA::is_nil(p);

}

void TucanVoiceFolder_Helper::release(TucanVoiceFolder_ptr p) {
  CORBA::release(p);
}

void TucanVoiceFolder_Helper::duplicate(TucanVoiceFolder_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanVoiceFolder_Helper::NP_alignedSize(TucanVoiceFolder_ptr obj, size_t offset) {
  return TucanVoiceFolder::_alignedSize(obj, offset);
}

void TucanVoiceFolder_Helper::marshalObjRef(TucanVoiceFolder_ptr obj, NetBufferedStream& s) {
  TucanVoiceFolder::_marshalObjRef(obj, s);
}

TucanVoiceFolder_ptr TucanVoiceFolder_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanVoiceFolder::_unmarshalObjRef(s);
}

void TucanVoiceFolder_Helper::marshalObjRef(TucanVoiceFolder_ptr obj, MemBufferedStream& s) {
  TucanVoiceFolder::_marshalObjRef(obj, s);
}

TucanVoiceFolder_ptr TucanVoiceFolder_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanVoiceFolder::_unmarshalObjRef(s);
}

TucanVoiceFolder_ptr
TucanVoiceFolder::_duplicate(TucanVoiceFolder_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanVoiceFolder_ptr
TucanVoiceFolder::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanVoiceFolder_ptr
TucanVoiceFolder::_nil()
{
  static _objref_TucanVoiceFolder* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanVoiceFolder;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanVoiceFolder::_PD_repoId = "IDL:TucanVoiceFolder:1.0";

_objref_TucanVoiceFolder::~_objref_TucanVoiceFolder() {}

_objref_TucanVoiceFolder::_objref_TucanVoiceFolder(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanFolder(mdri, p, id, lid),
   
   omniObjRef(TucanVoiceFolder::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanVoiceFolder::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanVoiceFolder::_PD_repoId) )
    return (TucanVoiceFolder_ptr) this;
  if( !strcmp(id, TucanFolder::_PD_repoId) )
    return (TucanFolder_ptr) this;
  
  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_40100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_ff000000* tcd = (_0RL_cd_812ed87905f9c760_ff000000*) cd;
  _impl_TucanVoiceFolder* impl = (_impl_TucanVoiceFolder*) svnt->_ptrToInterface(TucanVoiceFolder::_PD_repoId);
  tcd->pd_result = impl->getMessageHeaders();
}

TucanMessageHeaderSeq* _objref_TucanVoiceFolder::getMessageHeaders()
{
  _0RL_cd_812ed87905f9c760_ff000000 _call_desc(_0RL_lcfn_812ed87905f9c760_40100000, "getMessageHeaders", 18, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

_pof_TucanVoiceFolder::~_pof_TucanVoiceFolder() {}

omniObjRef*
_pof_TucanVoiceFolder::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanVoiceFolder(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanVoiceFolder::is_a(const char* id) const
{
  if( !strcmp(id, TucanVoiceFolder::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanFolder::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanVoiceFolder _the_pof_TucanVoiceFolder;

_impl_TucanVoiceFolder::~_impl_TucanVoiceFolder() {}

CORBA::Boolean
_impl_TucanVoiceFolder::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "getMessageHeaders") ) {
    
    giop_s.RequestReceived();
    TucanMessageHeaderSeq_var result;
    
    result = this->getMessageHeaders();
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      *(result.operator->()) >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( _impl_TucanFolder::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanVoiceFolder::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanVoiceFolder::_PD_repoId) )
    return (_impl_TucanVoiceFolder*) this;
  if( !strcmp(id, TucanFolder::_PD_repoId) )
    return (_impl_TucanFolder*) this;

  return 0;
}

const char*
_impl_TucanVoiceFolder::_mostDerivedRepoId()
{
  return TucanVoiceFolder::_PD_repoId;
}

TucanVoiceFolderFactory_ptr TucanVoiceFolderFactory_Helper::_nil() {
  return TucanVoiceFolderFactory::_nil();
}

CORBA::Boolean TucanVoiceFolderFactory_Helper::is_nil(TucanVoiceFolderFactory_ptr p) {
  return CORBA::is_nil(p);

}

void TucanVoiceFolderFactory_Helper::release(TucanVoiceFolderFactory_ptr p) {
  CORBA::release(p);
}

void TucanVoiceFolderFactory_Helper::duplicate(TucanVoiceFolderFactory_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanVoiceFolderFactory_Helper::NP_alignedSize(TucanVoiceFolderFactory_ptr obj, size_t offset) {
  return TucanVoiceFolderFactory::_alignedSize(obj, offset);
}

void TucanVoiceFolderFactory_Helper::marshalObjRef(TucanVoiceFolderFactory_ptr obj, NetBufferedStream& s) {
  TucanVoiceFolderFactory::_marshalObjRef(obj, s);
}

TucanVoiceFolderFactory_ptr TucanVoiceFolderFactory_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanVoiceFolderFactory::_unmarshalObjRef(s);
}

void TucanVoiceFolderFactory_Helper::marshalObjRef(TucanVoiceFolderFactory_ptr obj, MemBufferedStream& s) {
  TucanVoiceFolderFactory::_marshalObjRef(obj, s);
}

TucanVoiceFolderFactory_ptr TucanVoiceFolderFactory_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanVoiceFolderFactory::_unmarshalObjRef(s);
}

TucanVoiceFolderFactory_ptr
TucanVoiceFolderFactory::_duplicate(TucanVoiceFolderFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanVoiceFolderFactory_ptr
TucanVoiceFolderFactory::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanVoiceFolderFactory_ptr
TucanVoiceFolderFactory::_nil()
{
  static _objref_TucanVoiceFolderFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanVoiceFolderFactory;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanVoiceFolderFactory::_PD_repoId = "IDL:TucanVoiceFolderFactory:1.0";

_objref_TucanVoiceFolderFactory::~_objref_TucanVoiceFolderFactory() {}

_objref_TucanVoiceFolderFactory::_objref_TucanVoiceFolderFactory(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanFolderFactory(mdri, p, id, lid),
   
   omniObjRef(TucanVoiceFolderFactory::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanVoiceFolderFactory::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanVoiceFolderFactory::_PD_repoId) )
    return (TucanVoiceFolderFactory_ptr) this;
  if( !strcmp(id, TucanFolderFactory::_PD_repoId) )
    return (TucanFolderFactory_ptr) this;
  
  return 0;
}

_pof_TucanVoiceFolderFactory::~_pof_TucanVoiceFolderFactory() {}

omniObjRef*
_pof_TucanVoiceFolderFactory::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanVoiceFolderFactory(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanVoiceFolderFactory::is_a(const char* id) const
{
  if( !strcmp(id, TucanVoiceFolderFactory::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanFolderFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanVoiceFolderFactory _the_pof_TucanVoiceFolderFactory;

_impl_TucanVoiceFolderFactory::~_impl_TucanVoiceFolderFactory() {}

CORBA::Boolean
_impl_TucanVoiceFolderFactory::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanFolderFactory::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanVoiceFolderFactory::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanVoiceFolderFactory::_PD_repoId) )
    return (_impl_TucanVoiceFolderFactory*) this;
  if( !strcmp(id, TucanFolderFactory::_PD_repoId) )
    return (_impl_TucanFolderFactory*) this;

  return 0;
}

const char*
_impl_TucanVoiceFolderFactory::_mostDerivedRepoId()
{
  return TucanVoiceFolderFactory::_PD_repoId;
}

TucanVoiceMessage_ptr TucanVoiceMessage_Helper::_nil() {
  return TucanVoiceMessage::_nil();
}

CORBA::Boolean TucanVoiceMessage_Helper::is_nil(TucanVoiceMessage_ptr p) {
  return CORBA::is_nil(p);

}

void TucanVoiceMessage_Helper::release(TucanVoiceMessage_ptr p) {
  CORBA::release(p);
}

void TucanVoiceMessage_Helper::duplicate(TucanVoiceMessage_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanVoiceMessage_Helper::NP_alignedSize(TucanVoiceMessage_ptr obj, size_t offset) {
  return TucanVoiceMessage::_alignedSize(obj, offset);
}

void TucanVoiceMessage_Helper::marshalObjRef(TucanVoiceMessage_ptr obj, NetBufferedStream& s) {
  TucanVoiceMessage::_marshalObjRef(obj, s);
}

TucanVoiceMessage_ptr TucanVoiceMessage_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanVoiceMessage::_unmarshalObjRef(s);
}

void TucanVoiceMessage_Helper::marshalObjRef(TucanVoiceMessage_ptr obj, MemBufferedStream& s) {
  TucanVoiceMessage::_marshalObjRef(obj, s);
}

TucanVoiceMessage_ptr TucanVoiceMessage_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanVoiceMessage::_unmarshalObjRef(s);
}

TucanVoiceMessage_ptr
TucanVoiceMessage::_duplicate(TucanVoiceMessage_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanVoiceMessage_ptr
TucanVoiceMessage::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanVoiceMessage_ptr
TucanVoiceMessage::_nil()
{
  static _objref_TucanVoiceMessage* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanVoiceMessage;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanVoiceMessage::_PD_repoId = "IDL:TucanVoiceMessage:1.0";

_objref_TucanVoiceMessage::~_objref_TucanVoiceMessage() {}

_objref_TucanVoiceMessage::_objref_TucanVoiceMessage(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanMessage(mdri, p, id, lid),
   
   omniObjRef(TucanVoiceMessage::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanVoiceMessage::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanVoiceMessage::_PD_repoId) )
    return (TucanVoiceMessage_ptr) this;
  if( !strcmp(id, TucanMessage::_PD_repoId) )
    return (TucanMessage_ptr) this;
  
  return 0;
}

_pof_TucanVoiceMessage::~_pof_TucanVoiceMessage() {}

omniObjRef*
_pof_TucanVoiceMessage::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanVoiceMessage(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanVoiceMessage::is_a(const char* id) const
{
  if( !strcmp(id, TucanVoiceMessage::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanMessage::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanVoiceMessage _the_pof_TucanVoiceMessage;

_impl_TucanVoiceMessage::~_impl_TucanVoiceMessage() {}

CORBA::Boolean
_impl_TucanVoiceMessage::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanMessage::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanVoiceMessage::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanVoiceMessage::_PD_repoId) )
    return (_impl_TucanVoiceMessage*) this;
  if( !strcmp(id, TucanMessage::_PD_repoId) )
    return (_impl_TucanMessage*) this;

  return 0;
}

const char*
_impl_TucanVoiceMessage::_mostDerivedRepoId()
{
  return TucanVoiceMessage::_PD_repoId;
}

TucanVoiceMessageFactory_ptr TucanVoiceMessageFactory_Helper::_nil() {
  return TucanVoiceMessageFactory::_nil();
}

CORBA::Boolean TucanVoiceMessageFactory_Helper::is_nil(TucanVoiceMessageFactory_ptr p) {
  return CORBA::is_nil(p);

}

void TucanVoiceMessageFactory_Helper::release(TucanVoiceMessageFactory_ptr p) {
  CORBA::release(p);
}

void TucanVoiceMessageFactory_Helper::duplicate(TucanVoiceMessageFactory_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanVoiceMessageFactory_Helper::NP_alignedSize(TucanVoiceMessageFactory_ptr obj, size_t offset) {
  return TucanVoiceMessageFactory::_alignedSize(obj, offset);
}

void TucanVoiceMessageFactory_Helper::marshalObjRef(TucanVoiceMessageFactory_ptr obj, NetBufferedStream& s) {
  TucanVoiceMessageFactory::_marshalObjRef(obj, s);
}

TucanVoiceMessageFactory_ptr TucanVoiceMessageFactory_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanVoiceMessageFactory::_unmarshalObjRef(s);
}

void TucanVoiceMessageFactory_Helper::marshalObjRef(TucanVoiceMessageFactory_ptr obj, MemBufferedStream& s) {
  TucanVoiceMessageFactory::_marshalObjRef(obj, s);
}

TucanVoiceMessageFactory_ptr TucanVoiceMessageFactory_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanVoiceMessageFactory::_unmarshalObjRef(s);
}

TucanVoiceMessageFactory_ptr
TucanVoiceMessageFactory::_duplicate(TucanVoiceMessageFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanVoiceMessageFactory_ptr
TucanVoiceMessageFactory::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanVoiceMessageFactory_ptr
TucanVoiceMessageFactory::_nil()
{
  static _objref_TucanVoiceMessageFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanVoiceMessageFactory;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanVoiceMessageFactory::_PD_repoId = "IDL:TucanVoiceMessageFactory:1.0";

_objref_TucanVoiceMessageFactory::~_objref_TucanVoiceMessageFactory() {}

_objref_TucanVoiceMessageFactory::_objref_TucanVoiceMessageFactory(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanMessageFactory(mdri, p, id, lid),
   
   omniObjRef(TucanVoiceMessageFactory::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanVoiceMessageFactory::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanVoiceMessageFactory::_PD_repoId) )
    return (TucanVoiceMessageFactory_ptr) this;
  if( !strcmp(id, TucanMessageFactory::_PD_repoId) )
    return (TucanMessageFactory_ptr) this;
  
  return 0;
}

_pof_TucanVoiceMessageFactory::~_pof_TucanVoiceMessageFactory() {}

omniObjRef*
_pof_TucanVoiceMessageFactory::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanVoiceMessageFactory(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanVoiceMessageFactory::is_a(const char* id) const
{
  if( !strcmp(id, TucanVoiceMessageFactory::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanMessageFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanVoiceMessageFactory _the_pof_TucanVoiceMessageFactory;

_impl_TucanVoiceMessageFactory::~_impl_TucanVoiceMessageFactory() {}

CORBA::Boolean
_impl_TucanVoiceMessageFactory::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanMessageFactory::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanVoiceMessageFactory::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanVoiceMessageFactory::_PD_repoId) )
    return (_impl_TucanVoiceMessageFactory*) this;
  if( !strcmp(id, TucanMessageFactory::_PD_repoId) )
    return (_impl_TucanMessageFactory*) this;

  return 0;
}

const char*
_impl_TucanVoiceMessageFactory::_mostDerivedRepoId()
{
  return TucanVoiceMessageFactory::_PD_repoId;
}

TucanVoiceStore_ptr TucanVoiceStore_Helper::_nil() {
  return TucanVoiceStore::_nil();
}

CORBA::Boolean TucanVoiceStore_Helper::is_nil(TucanVoiceStore_ptr p) {
  return CORBA::is_nil(p);

}

void TucanVoiceStore_Helper::release(TucanVoiceStore_ptr p) {
  CORBA::release(p);
}

void TucanVoiceStore_Helper::duplicate(TucanVoiceStore_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanVoiceStore_Helper::NP_alignedSize(TucanVoiceStore_ptr obj, size_t offset) {
  return TucanVoiceStore::_alignedSize(obj, offset);
}

void TucanVoiceStore_Helper::marshalObjRef(TucanVoiceStore_ptr obj, NetBufferedStream& s) {
  TucanVoiceStore::_marshalObjRef(obj, s);
}

TucanVoiceStore_ptr TucanVoiceStore_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanVoiceStore::_unmarshalObjRef(s);
}

void TucanVoiceStore_Helper::marshalObjRef(TucanVoiceStore_ptr obj, MemBufferedStream& s) {
  TucanVoiceStore::_marshalObjRef(obj, s);
}

TucanVoiceStore_ptr TucanVoiceStore_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanVoiceStore::_unmarshalObjRef(s);
}

TucanVoiceStore_ptr
TucanVoiceStore::_duplicate(TucanVoiceStore_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanVoiceStore_ptr
TucanVoiceStore::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanVoiceStore_ptr
TucanVoiceStore::_nil()
{
  static _objref_TucanVoiceStore* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanVoiceStore;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanVoiceStore::_PD_repoId = "IDL:TucanVoiceStore:1.0";

_objref_TucanVoiceStore::~_objref_TucanVoiceStore() {}

_objref_TucanVoiceStore::_objref_TucanVoiceStore(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanStore(mdri, p, id, lid),
   
   omniObjRef(TucanVoiceStore::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanVoiceStore::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanVoiceStore::_PD_repoId) )
    return (TucanVoiceStore_ptr) this;
  if( !strcmp(id, TucanStore::_PD_repoId) )
    return (TucanStore_ptr) this;
  
  return 0;
}

_pof_TucanVoiceStore::~_pof_TucanVoiceStore() {}

omniObjRef*
_pof_TucanVoiceStore::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanVoiceStore(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanVoiceStore::is_a(const char* id) const
{
  if( !strcmp(id, TucanVoiceStore::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanStore::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanVoiceStore _the_pof_TucanVoiceStore;

_impl_TucanVoiceStore::~_impl_TucanVoiceStore() {}

CORBA::Boolean
_impl_TucanVoiceStore::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanStore::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanVoiceStore::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanVoiceStore::_PD_repoId) )
    return (_impl_TucanVoiceStore*) this;
  if( !strcmp(id, TucanStore::_PD_repoId) )
    return (_impl_TucanStore*) this;

  return 0;
}

const char*
_impl_TucanVoiceStore::_mostDerivedRepoId()
{
  return TucanVoiceStore::_PD_repoId;
}

TucanVoiceStoreFactory_ptr TucanVoiceStoreFactory_Helper::_nil() {
  return TucanVoiceStoreFactory::_nil();
}

CORBA::Boolean TucanVoiceStoreFactory_Helper::is_nil(TucanVoiceStoreFactory_ptr p) {
  return CORBA::is_nil(p);

}

void TucanVoiceStoreFactory_Helper::release(TucanVoiceStoreFactory_ptr p) {
  CORBA::release(p);
}

void TucanVoiceStoreFactory_Helper::duplicate(TucanVoiceStoreFactory_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanVoiceStoreFactory_Helper::NP_alignedSize(TucanVoiceStoreFactory_ptr obj, size_t offset) {
  return TucanVoiceStoreFactory::_alignedSize(obj, offset);
}

void TucanVoiceStoreFactory_Helper::marshalObjRef(TucanVoiceStoreFactory_ptr obj, NetBufferedStream& s) {
  TucanVoiceStoreFactory::_marshalObjRef(obj, s);
}

TucanVoiceStoreFactory_ptr TucanVoiceStoreFactory_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanVoiceStoreFactory::_unmarshalObjRef(s);
}

void TucanVoiceStoreFactory_Helper::marshalObjRef(TucanVoiceStoreFactory_ptr obj, MemBufferedStream& s) {
  TucanVoiceStoreFactory::_marshalObjRef(obj, s);
}

TucanVoiceStoreFactory_ptr TucanVoiceStoreFactory_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanVoiceStoreFactory::_unmarshalObjRef(s);
}

TucanVoiceStoreFactory_ptr
TucanVoiceStoreFactory::_duplicate(TucanVoiceStoreFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanVoiceStoreFactory_ptr
TucanVoiceStoreFactory::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanVoiceStoreFactory_ptr
TucanVoiceStoreFactory::_nil()
{
  static _objref_TucanVoiceStoreFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanVoiceStoreFactory;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanVoiceStoreFactory::_PD_repoId = "IDL:TucanVoiceStoreFactory:1.0";

_objref_TucanVoiceStoreFactory::~_objref_TucanVoiceStoreFactory() {}

_objref_TucanVoiceStoreFactory::_objref_TucanVoiceStoreFactory(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanStoreFactory(mdri, p, id, lid),
   
   omniObjRef(TucanVoiceStoreFactory::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanVoiceStoreFactory::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanVoiceStoreFactory::_PD_repoId) )
    return (TucanVoiceStoreFactory_ptr) this;
  if( !strcmp(id, TucanStoreFactory::_PD_repoId) )
    return (TucanStoreFactory_ptr) this;
  
  return 0;
}

_pof_TucanVoiceStoreFactory::~_pof_TucanVoiceStoreFactory() {}

omniObjRef*
_pof_TucanVoiceStoreFactory::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanVoiceStoreFactory(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanVoiceStoreFactory::is_a(const char* id) const
{
  if( !strcmp(id, TucanVoiceStoreFactory::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanStoreFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanVoiceStoreFactory _the_pof_TucanVoiceStoreFactory;

_impl_TucanVoiceStoreFactory::~_impl_TucanVoiceStoreFactory() {}

CORBA::Boolean
_impl_TucanVoiceStoreFactory::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanStoreFactory::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanVoiceStoreFactory::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanVoiceStoreFactory::_PD_repoId) )
    return (_impl_TucanVoiceStoreFactory*) this;
  if( !strcmp(id, TucanStoreFactory::_PD_repoId) )
    return (_impl_TucanStoreFactory*) this;

  return 0;
}

const char*
_impl_TucanVoiceStoreFactory::_mostDerivedRepoId()
{
  return TucanVoiceStoreFactory::_PD_repoId;
}

TucanVoiceTransport_ptr TucanVoiceTransport_Helper::_nil() {
  return TucanVoiceTransport::_nil();
}

CORBA::Boolean TucanVoiceTransport_Helper::is_nil(TucanVoiceTransport_ptr p) {
  return CORBA::is_nil(p);

}

void TucanVoiceTransport_Helper::release(TucanVoiceTransport_ptr p) {
  CORBA::release(p);
}

void TucanVoiceTransport_Helper::duplicate(TucanVoiceTransport_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanVoiceTransport_Helper::NP_alignedSize(TucanVoiceTransport_ptr obj, size_t offset) {
  return TucanVoiceTransport::_alignedSize(obj, offset);
}

void TucanVoiceTransport_Helper::marshalObjRef(TucanVoiceTransport_ptr obj, NetBufferedStream& s) {
  TucanVoiceTransport::_marshalObjRef(obj, s);
}

TucanVoiceTransport_ptr TucanVoiceTransport_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanVoiceTransport::_unmarshalObjRef(s);
}

void TucanVoiceTransport_Helper::marshalObjRef(TucanVoiceTransport_ptr obj, MemBufferedStream& s) {
  TucanVoiceTransport::_marshalObjRef(obj, s);
}

TucanVoiceTransport_ptr TucanVoiceTransport_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanVoiceTransport::_unmarshalObjRef(s);
}

TucanVoiceTransport_ptr
TucanVoiceTransport::_duplicate(TucanVoiceTransport_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanVoiceTransport_ptr
TucanVoiceTransport::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanVoiceTransport_ptr
TucanVoiceTransport::_nil()
{
  static _objref_TucanVoiceTransport* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanVoiceTransport;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanVoiceTransport::_PD_repoId = "IDL:TucanVoiceTransport:1.0";

_objref_TucanVoiceTransport::~_objref_TucanVoiceTransport() {}

_objref_TucanVoiceTransport::_objref_TucanVoiceTransport(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanTransport(mdri, p, id, lid),
   
   omniObjRef(TucanVoiceTransport::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanVoiceTransport::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanVoiceTransport::_PD_repoId) )
    return (TucanVoiceTransport_ptr) this;
  if( !strcmp(id, TucanTransport::_PD_repoId) )
    return (TucanTransport_ptr) this;
  
  return 0;
}

_pof_TucanVoiceTransport::~_pof_TucanVoiceTransport() {}

omniObjRef*
_pof_TucanVoiceTransport::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanVoiceTransport(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanVoiceTransport::is_a(const char* id) const
{
  if( !strcmp(id, TucanVoiceTransport::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanTransport::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanVoiceTransport _the_pof_TucanVoiceTransport;

_impl_TucanVoiceTransport::~_impl_TucanVoiceTransport() {}

CORBA::Boolean
_impl_TucanVoiceTransport::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanTransport::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanVoiceTransport::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanVoiceTransport::_PD_repoId) )
    return (_impl_TucanVoiceTransport*) this;
  if( !strcmp(id, TucanTransport::_PD_repoId) )
    return (_impl_TucanTransport*) this;

  return 0;
}

const char*
_impl_TucanVoiceTransport::_mostDerivedRepoId()
{
  return TucanVoiceTransport::_PD_repoId;
}

TucanVoiceTransportFactory_ptr TucanVoiceTransportFactory_Helper::_nil() {
  return TucanVoiceTransportFactory::_nil();
}

CORBA::Boolean TucanVoiceTransportFactory_Helper::is_nil(TucanVoiceTransportFactory_ptr p) {
  return CORBA::is_nil(p);

}

void TucanVoiceTransportFactory_Helper::release(TucanVoiceTransportFactory_ptr p) {
  CORBA::release(p);
}

void TucanVoiceTransportFactory_Helper::duplicate(TucanVoiceTransportFactory_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanVoiceTransportFactory_Helper::NP_alignedSize(TucanVoiceTransportFactory_ptr obj, size_t offset) {
  return TucanVoiceTransportFactory::_alignedSize(obj, offset);
}

void TucanVoiceTransportFactory_Helper::marshalObjRef(TucanVoiceTransportFactory_ptr obj, NetBufferedStream& s) {
  TucanVoiceTransportFactory::_marshalObjRef(obj, s);
}

TucanVoiceTransportFactory_ptr TucanVoiceTransportFactory_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanVoiceTransportFactory::_unmarshalObjRef(s);
}

void TucanVoiceTransportFactory_Helper::marshalObjRef(TucanVoiceTransportFactory_ptr obj, MemBufferedStream& s) {
  TucanVoiceTransportFactory::_marshalObjRef(obj, s);
}

TucanVoiceTransportFactory_ptr TucanVoiceTransportFactory_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanVoiceTransportFactory::_unmarshalObjRef(s);
}

TucanVoiceTransportFactory_ptr
TucanVoiceTransportFactory::_duplicate(TucanVoiceTransportFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanVoiceTransportFactory_ptr
TucanVoiceTransportFactory::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanVoiceTransportFactory_ptr
TucanVoiceTransportFactory::_nil()
{
  static _objref_TucanVoiceTransportFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanVoiceTransportFactory;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanVoiceTransportFactory::_PD_repoId = "IDL:TucanVoiceTransportFactory:1.0";

_objref_TucanVoiceTransportFactory::~_objref_TucanVoiceTransportFactory() {}

_objref_TucanVoiceTransportFactory::_objref_TucanVoiceTransportFactory(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   _objref_TucanTransportFactory(mdri, p, id, lid),
   
   omniObjRef(TucanVoiceTransportFactory::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanVoiceTransportFactory::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanVoiceTransportFactory::_PD_repoId) )
    return (TucanVoiceTransportFactory_ptr) this;
  if( !strcmp(id, TucanTransportFactory::_PD_repoId) )
    return (TucanTransportFactory_ptr) this;
  
  return 0;
}

_pof_TucanVoiceTransportFactory::~_pof_TucanVoiceTransportFactory() {}

omniObjRef*
_pof_TucanVoiceTransportFactory::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanVoiceTransportFactory(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanVoiceTransportFactory::is_a(const char* id) const
{
  if( !strcmp(id, TucanVoiceTransportFactory::_PD_repoId) )
    return 1;
  if( !strcmp(id, TucanTransportFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanVoiceTransportFactory _the_pof_TucanVoiceTransportFactory;

_impl_TucanVoiceTransportFactory::~_impl_TucanVoiceTransportFactory() {}

CORBA::Boolean
_impl_TucanVoiceTransportFactory::_dispatch(GIOP_S& giop_s)
{
  
  if( _impl_TucanTransportFactory::_dispatch(giop_s) ) {
    return 1;
  }

  return 0;
}

void*
_impl_TucanVoiceTransportFactory::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanVoiceTransportFactory::_PD_repoId) )
    return (_impl_TucanVoiceTransportFactory*) this;
  if( !strcmp(id, TucanTransportFactory::_PD_repoId) )
    return (_impl_TucanTransportFactory*) this;

  return 0;
}

const char*
_impl_TucanVoiceTransportFactory::_mostDerivedRepoId()
{
  return TucanVoiceTransportFactory::_PD_repoId;
}

TucanEmailFetcher_ptr TucanEmailFetcher_Helper::_nil() {
  return TucanEmailFetcher::_nil();
}

CORBA::Boolean TucanEmailFetcher_Helper::is_nil(TucanEmailFetcher_ptr p) {
  return CORBA::is_nil(p);

}

void TucanEmailFetcher_Helper::release(TucanEmailFetcher_ptr p) {
  CORBA::release(p);
}

void TucanEmailFetcher_Helper::duplicate(TucanEmailFetcher_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanEmailFetcher_Helper::NP_alignedSize(TucanEmailFetcher_ptr obj, size_t offset) {
  return TucanEmailFetcher::_alignedSize(obj, offset);
}

void TucanEmailFetcher_Helper::marshalObjRef(TucanEmailFetcher_ptr obj, NetBufferedStream& s) {
  TucanEmailFetcher::_marshalObjRef(obj, s);
}

TucanEmailFetcher_ptr TucanEmailFetcher_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanEmailFetcher::_unmarshalObjRef(s);
}

void TucanEmailFetcher_Helper::marshalObjRef(TucanEmailFetcher_ptr obj, MemBufferedStream& s) {
  TucanEmailFetcher::_marshalObjRef(obj, s);
}

TucanEmailFetcher_ptr TucanEmailFetcher_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanEmailFetcher::_unmarshalObjRef(s);
}

TucanEmailFetcher_ptr
TucanEmailFetcher::_duplicate(TucanEmailFetcher_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanEmailFetcher_ptr
TucanEmailFetcher::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanEmailFetcher_ptr
TucanEmailFetcher::_nil()
{
  static _objref_TucanEmailFetcher* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanEmailFetcher;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanEmailFetcher::_PD_repoId = "IDL:TucanEmailFetcher:1.0";

_objref_TucanEmailFetcher::~_objref_TucanEmailFetcher() {}

_objref_TucanEmailFetcher::_objref_TucanEmailFetcher(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   
   omniObjRef(TucanEmailFetcher::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanEmailFetcher::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanEmailFetcher::_PD_repoId) )
    return (TucanEmailFetcher_ptr) this;
  
  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_50100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_71000000* tcd = (_0RL_cd_812ed87905f9c760_71000000*) cd;
  _impl_TucanEmailFetcher* impl = (_impl_TucanEmailFetcher*) svnt->_ptrToInterface(TucanEmailFetcher::_PD_repoId);
  tcd->pd_result = impl->getAuth();
}

TucanAuth_ptr _objref_TucanEmailFetcher::getAuth()
{
  _0RL_cd_812ed87905f9c760_71000000 _call_desc(_0RL_lcfn_812ed87905f9c760_50100000, "getAuth", 8, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_60100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_26000000* tcd = (_0RL_cd_812ed87905f9c760_26000000*) cd;
  _impl_TucanEmailFetcher* impl = (_impl_TucanEmailFetcher*) svnt->_ptrToInterface(TucanEmailFetcher::_PD_repoId);
  impl->setAuth(tcd->arg_0);
}

void _objref_TucanEmailFetcher::setAuth(TucanAuth_ptr myAuth)
{
  _0RL_cd_812ed87905f9c760_26000000 _call_desc(_0RL_lcfn_812ed87905f9c760_60100000, "setAuth", 8, 0, myAuth);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_70100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_20000000* tcd = (_0RL_cd_812ed87905f9c760_20000000*) cd;
  _impl_TucanEmailFetcher* impl = (_impl_TucanEmailFetcher*) svnt->_ptrToInterface(TucanEmailFetcher::_PD_repoId);
  impl->setServer(tcd->arg_0);
}

void _objref_TucanEmailFetcher::setServer(const char* server)
{
  _0RL_cd_812ed87905f9c760_20000000 _call_desc(_0RL_lcfn_812ed87905f9c760_70100000, "setServer", 10, 0, server);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_80100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_00000000* tcd = (_0RL_cd_812ed87905f9c760_00000000*) cd;
  _impl_TucanEmailFetcher* impl = (_impl_TucanEmailFetcher*) svnt->_ptrToInterface(TucanEmailFetcher::_PD_repoId);
  tcd->pd_result = impl->getServer();
}

char* _objref_TucanEmailFetcher::getServer()
{
  _0RL_cd_812ed87905f9c760_00000000 _call_desc(_0RL_lcfn_812ed87905f9c760_80100000, "getServer", 10, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cshort_e_cTucanException
class _0RL_cd_812ed87905f9c760_90100000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_90100000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, CORBA::Short a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void userException(GIOP_C&, const char*);
  
  CORBA::Short arg_0;
  
};

CORBA::ULong _0RL_cd_812ed87905f9c760_90100000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_2) + 2;
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_90100000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  
}

void _0RL_cd_812ed87905f9c760_90100000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_a0100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_90100000* tcd = (_0RL_cd_812ed87905f9c760_90100000*) cd;
  _impl_TucanEmailFetcher* impl = (_impl_TucanEmailFetcher*) svnt->_ptrToInterface(TucanEmailFetcher::_PD_repoId);
  impl->setPort(tcd->arg_0);
}

void _objref_TucanEmailFetcher::setPort(CORBA::Short port)
{
  _0RL_cd_812ed87905f9c760_90100000 _call_desc(_0RL_lcfn_812ed87905f9c760_a0100000, "setPort", 8, 0, port);
  
  _invoke(_call_desc);
  
}

// Proxy call descriptor class. Mangled signature:
//  _cshort_e_cTucanException
class _0RL_cd_812ed87905f9c760_b0100000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_b0100000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  virtual void userException(GIOP_C&, const char*);
  
  inline CORBA::Short result() { return pd_result; }
  
  CORBA::Short pd_result;
};

void _0RL_cd_812ed87905f9c760_b0100000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result <<= giop_client;
  
}

void _0RL_cd_812ed87905f9c760_b0100000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_c0100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_b0100000* tcd = (_0RL_cd_812ed87905f9c760_b0100000*) cd;
  _impl_TucanEmailFetcher* impl = (_impl_TucanEmailFetcher*) svnt->_ptrToInterface(TucanEmailFetcher::_PD_repoId);
  tcd->pd_result = impl->getPort();
}

CORBA::Short _objref_TucanEmailFetcher::getPort()
{
  _0RL_cd_812ed87905f9c760_b0100000 _call_desc(_0RL_lcfn_812ed87905f9c760_c0100000, "getPort", 8, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_d0100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_20000000* tcd = (_0RL_cd_812ed87905f9c760_20000000*) cd;
  _impl_TucanEmailFetcher* impl = (_impl_TucanEmailFetcher*) svnt->_ptrToInterface(TucanEmailFetcher::_PD_repoId);
  impl->setProtocol(tcd->arg_0);
}

void _objref_TucanEmailFetcher::setProtocol(const char* proto)
{
  _0RL_cd_812ed87905f9c760_20000000 _call_desc(_0RL_lcfn_812ed87905f9c760_d0100000, "setProtocol", 12, 0, proto);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_e0100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_00000000* tcd = (_0RL_cd_812ed87905f9c760_00000000*) cd;
  _impl_TucanEmailFetcher* impl = (_impl_TucanEmailFetcher*) svnt->_ptrToInterface(TucanEmailFetcher::_PD_repoId);
  tcd->pd_result = impl->getProtocol();
}

char* _objref_TucanEmailFetcher::getProtocol()
{
  _0RL_cd_812ed87905f9c760_00000000 _call_desc(_0RL_lcfn_812ed87905f9c760_e0100000, "getProtocol", 12, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_f0100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_20000000* tcd = (_0RL_cd_812ed87905f9c760_20000000*) cd;
  _impl_TucanEmailFetcher* impl = (_impl_TucanEmailFetcher*) svnt->_ptrToInterface(TucanEmailFetcher::_PD_repoId);
  impl->setName(tcd->arg_0);
}

void _objref_TucanEmailFetcher::setName(const char* name)
{
  _0RL_cd_812ed87905f9c760_20000000 _call_desc(_0RL_lcfn_812ed87905f9c760_f0100000, "setName", 8, 0, name);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_01100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_00000000* tcd = (_0RL_cd_812ed87905f9c760_00000000*) cd;
  _impl_TucanEmailFetcher* impl = (_impl_TucanEmailFetcher*) svnt->_ptrToInterface(TucanEmailFetcher::_PD_repoId);
  tcd->pd_result = impl->getName();
}

char* _objref_TucanEmailFetcher::getName()
{
  _0RL_cd_812ed87905f9c760_00000000 _call_desc(_0RL_lcfn_812ed87905f9c760_01100000, "getName", 8, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_11100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_20000000* tcd = (_0RL_cd_812ed87905f9c760_20000000*) cd;
  _impl_TucanEmailFetcher* impl = (_impl_TucanEmailFetcher*) svnt->_ptrToInterface(TucanEmailFetcher::_PD_repoId);
  impl->setPassword(tcd->arg_0);
}

void _objref_TucanEmailFetcher::setPassword(const char* password)
{
  _0RL_cd_812ed87905f9c760_20000000 _call_desc(_0RL_lcfn_812ed87905f9c760_11100000, "setPassword", 12, 0, password);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_21100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_00000000* tcd = (_0RL_cd_812ed87905f9c760_00000000*) cd;
  _impl_TucanEmailFetcher* impl = (_impl_TucanEmailFetcher*) svnt->_ptrToInterface(TucanEmailFetcher::_PD_repoId);
  tcd->pd_result = impl->getPassword();
}

char* _objref_TucanEmailFetcher::getPassword()
{
  _0RL_cd_812ed87905f9c760_00000000 _call_desc(_0RL_lcfn_812ed87905f9c760_21100000, "getPassword", 12, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_31100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_b0100000* tcd = (_0RL_cd_812ed87905f9c760_b0100000*) cd;
  _impl_TucanEmailFetcher* impl = (_impl_TucanEmailFetcher*) svnt->_ptrToInterface(TucanEmailFetcher::_PD_repoId);
  tcd->pd_result = impl->getMessageCount();
}

CORBA::Short _objref_TucanEmailFetcher::getMessageCount()
{
  _0RL_cd_812ed87905f9c760_b0100000 _call_desc(_0RL_lcfn_812ed87905f9c760_31100000, "getMessageCount", 16, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cshort_i_cshort_e_cTucanException
class _0RL_cd_812ed87905f9c760_41100000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_41100000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, CORBA::Short a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  virtual void userException(GIOP_C&, const char*);
  
  inline CORBA::Short result() { return pd_result; }
  CORBA::Short arg_0;
  CORBA::Short pd_result;
};

CORBA::ULong _0RL_cd_812ed87905f9c760_41100000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_2) + 2;
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_41100000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  
}

void _0RL_cd_812ed87905f9c760_41100000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result <<= giop_client;
  
}

void _0RL_cd_812ed87905f9c760_41100000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_51100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_41100000* tcd = (_0RL_cd_812ed87905f9c760_41100000*) cd;
  _impl_TucanEmailFetcher* impl = (_impl_TucanEmailFetcher*) svnt->_ptrToInterface(TucanEmailFetcher::_PD_repoId);
  tcd->pd_result = impl->getMessageSize(tcd->arg_0);
}

CORBA::Short _objref_TucanEmailFetcher::getMessageSize(CORBA::Short num)
{
  _0RL_cd_812ed87905f9c760_41100000 _call_desc(_0RL_lcfn_812ed87905f9c760_51100000, "getMessageSize", 15, 0, num);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cstring_i_cshort_e_cTucanException
class _0RL_cd_812ed87905f9c760_61100000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_61100000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, CORBA::Short a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  virtual void userException(GIOP_C&, const char*);
  
  inline char * result() { return pd_result; }
  CORBA::Short arg_0;
  char * pd_result;
};

CORBA::ULong _0RL_cd_812ed87905f9c760_61100000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_2) + 2;
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_61100000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  
}

void _0RL_cd_812ed87905f9c760_61100000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  {
    CORBA::String_member _0RL_str_tmp;
    _0RL_str_tmp <<=  giop_client;
    pd_result = _0RL_str_tmp._ptr;
    _0RL_str_tmp._ptr = 0;
  }
  
}

void _0RL_cd_812ed87905f9c760_61100000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_71100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_61100000* tcd = (_0RL_cd_812ed87905f9c760_61100000*) cd;
  _impl_TucanEmailFetcher* impl = (_impl_TucanEmailFetcher*) svnt->_ptrToInterface(TucanEmailFetcher::_PD_repoId);
  tcd->pd_result = impl->getMessageId(tcd->arg_0);
}

char* _objref_TucanEmailFetcher::getMessageId(CORBA::Short num)
{
  _0RL_cd_812ed87905f9c760_61100000 _call_desc(_0RL_lcfn_812ed87905f9c760_71100000, "getMessageId", 13, 0, num);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_81100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_41100000* tcd = (_0RL_cd_812ed87905f9c760_41100000*) cd;
  _impl_TucanEmailFetcher* impl = (_impl_TucanEmailFetcher*) svnt->_ptrToInterface(TucanEmailFetcher::_PD_repoId);
  tcd->pd_result = impl->isRead(tcd->arg_0);
}

CORBA::Short _objref_TucanEmailFetcher::isRead(CORBA::Short num)
{
  _0RL_cd_812ed87905f9c760_41100000 _call_desc(_0RL_lcfn_812ed87905f9c760_81100000, "isRead", 7, 0, num);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_91100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_41100000* tcd = (_0RL_cd_812ed87905f9c760_41100000*) cd;
  _impl_TucanEmailFetcher* impl = (_impl_TucanEmailFetcher*) svnt->_ptrToInterface(TucanEmailFetcher::_PD_repoId);
  tcd->pd_result = impl->transfer(tcd->arg_0);
}

CORBA::Short _objref_TucanEmailFetcher::transfer(CORBA::Short num)
{
  _0RL_cd_812ed87905f9c760_41100000 _call_desc(_0RL_lcfn_812ed87905f9c760_91100000, "transfer", 9, 0, num);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_a1100000(omniCallDescriptor* cd, omniServant* svnt)
{
  
  _impl_TucanEmailFetcher* impl = (_impl_TucanEmailFetcher*) svnt->_ptrToInterface(TucanEmailFetcher::_PD_repoId);
  impl->transferAll();
}

void _objref_TucanEmailFetcher::transferAll()
{
  _0RL_cd_812ed87905f9c760_60000000 _call_desc(_0RL_lcfn_812ed87905f9c760_a1100000, "transferAll", 12, 0);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_b1100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_90100000* tcd = (_0RL_cd_812ed87905f9c760_90100000*) cd;
  _impl_TucanEmailFetcher* impl = (_impl_TucanEmailFetcher*) svnt->_ptrToInterface(TucanEmailFetcher::_PD_repoId);
  impl->deleteMessage(tcd->arg_0);
}

void _objref_TucanEmailFetcher::deleteMessage(CORBA::Short num)
{
  _0RL_cd_812ed87905f9c760_90100000 _call_desc(_0RL_lcfn_812ed87905f9c760_b1100000, "deleteMessage", 14, 0, num);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_c1100000(omniCallDescriptor* cd, omniServant* svnt)
{
  
  _impl_TucanEmailFetcher* impl = (_impl_TucanEmailFetcher*) svnt->_ptrToInterface(TucanEmailFetcher::_PD_repoId);
  impl->deleteAllMessages();
}

void _objref_TucanEmailFetcher::deleteAllMessages()
{
  _0RL_cd_812ed87905f9c760_60000000 _call_desc(_0RL_lcfn_812ed87905f9c760_c1100000, "deleteAllMessages", 18, 0);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_d1100000(omniCallDescriptor* cd, omniServant* svnt)
{
  
  _impl_TucanEmailFetcher* impl = (_impl_TucanEmailFetcher*) svnt->_ptrToInterface(TucanEmailFetcher::_PD_repoId);
  impl->open();
}

void _objref_TucanEmailFetcher::open()
{
  _0RL_cd_812ed87905f9c760_60000000 _call_desc(_0RL_lcfn_812ed87905f9c760_d1100000, "open", 5, 0);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_e1100000(omniCallDescriptor* cd, omniServant* svnt)
{
  
  _impl_TucanEmailFetcher* impl = (_impl_TucanEmailFetcher*) svnt->_ptrToInterface(TucanEmailFetcher::_PD_repoId);
  impl->close();
}

void _objref_TucanEmailFetcher::close()
{
  _0RL_cd_812ed87905f9c760_60000000 _call_desc(_0RL_lcfn_812ed87905f9c760_e1100000, "close", 6, 0);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_f1100000(omniCallDescriptor* cd, omniServant* svnt)
{
  
  _impl_TucanEmailFetcher* impl = (_impl_TucanEmailFetcher*) svnt->_ptrToInterface(TucanEmailFetcher::_PD_repoId);
  impl->destroy();
}

void _objref_TucanEmailFetcher::destroy()
{
  _0RL_cd_812ed87905f9c760_60000000 _call_desc(_0RL_lcfn_812ed87905f9c760_f1100000, "destroy", 8, 0);
  
  _invoke(_call_desc);
  
}

_pof_TucanEmailFetcher::~_pof_TucanEmailFetcher() {}

omniObjRef*
_pof_TucanEmailFetcher::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanEmailFetcher(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanEmailFetcher::is_a(const char* id) const
{
  if( !strcmp(id, TucanEmailFetcher::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanEmailFetcher _the_pof_TucanEmailFetcher;

_impl_TucanEmailFetcher::~_impl_TucanEmailFetcher() {}

CORBA::Boolean
_impl_TucanEmailFetcher::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "getAuth") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    TucanAuth_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getAuth();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = TucanAuth_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      TucanAuth_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setAuth") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    TucanAuth_var arg_myAuth;
    
    arg_myAuth = TucanAuth_Helper::unmarshalObjRef(giop_s);
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->setAuth(arg_myAuth.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setServer") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::String_var arg_server;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_server = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->setServer(arg_server.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getServer") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    CORBA::String_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getServer();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      msgsize += ((const char*) result) ? strlen((const char*) result) + 1 : 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      {
        CORBA::ULong _len = (((const char*) result)? strlen((const char*) result) + 1 : 1);
        
        _len >>= giop_s;
        if (_len > 1)
          giop_s.put_char_array((const CORBA::Char *)((const char*)result),_len);
        else {
          if ((const char*) result == 0 && omniORB::traceLevel > 1)
            _CORBA_null_string_ptr(0);
          CORBA::Char('\0') >>= giop_s;
        }
      }
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setPort") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::Short arg_port;
    
    arg_port <<= giop_s;
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->setPort(arg_port);
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getPort") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    CORBA::Short result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getPort();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_2) + 2;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setProtocol") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::String_var arg_proto;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_proto = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->setProtocol(arg_proto.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getProtocol") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    CORBA::String_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getProtocol();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      msgsize += ((const char*) result) ? strlen((const char*) result) + 1 : 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      {
        CORBA::ULong _len = (((const char*) result)? strlen((const char*) result) + 1 : 1);
        
        _len >>= giop_s;
        if (_len > 1)
          giop_s.put_char_array((const CORBA::Char *)((const char*)result),_len);
        else {
          if ((const char*) result == 0 && omniORB::traceLevel > 1)
            _CORBA_null_string_ptr(0);
          CORBA::Char('\0') >>= giop_s;
        }
      }
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setName") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::String_var arg_name;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_name = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->setName(arg_name.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getName") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    CORBA::String_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getName();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      msgsize += ((const char*) result) ? strlen((const char*) result) + 1 : 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      {
        CORBA::ULong _len = (((const char*) result)? strlen((const char*) result) + 1 : 1);
        
        _len >>= giop_s;
        if (_len > 1)
          giop_s.put_char_array((const CORBA::Char *)((const char*)result),_len);
        else {
          if ((const char*) result == 0 && omniORB::traceLevel > 1)
            _CORBA_null_string_ptr(0);
          CORBA::Char('\0') >>= giop_s;
        }
      }
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setPassword") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::String_var arg_password;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_password = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->setPassword(arg_password.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getPassword") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    CORBA::String_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getPassword();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      msgsize += ((const char*) result) ? strlen((const char*) result) + 1 : 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      {
        CORBA::ULong _len = (((const char*) result)? strlen((const char*) result) + 1 : 1);
        
        _len >>= giop_s;
        if (_len > 1)
          giop_s.put_char_array((const CORBA::Char *)((const char*)result),_len);
        else {
          if ((const char*) result == 0 && omniORB::traceLevel > 1)
            _CORBA_null_string_ptr(0);
          CORBA::Char('\0') >>= giop_s;
        }
      }
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getMessageCount") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    CORBA::Short result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getMessageCount();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_2) + 2;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getMessageSize") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::Short arg_num;
    
    arg_num <<= giop_s;
    
    giop_s.RequestReceived();
    CORBA::Short result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getMessageSize(arg_num);
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_2) + 2;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getMessageId") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::Short arg_num;
    
    arg_num <<= giop_s;
    
    giop_s.RequestReceived();
    CORBA::String_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getMessageId(arg_num);
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      msgsize += ((const char*) result) ? strlen((const char*) result) + 1 : 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      {
        CORBA::ULong _len = (((const char*) result)? strlen((const char*) result) + 1 : 1);
        
        _len >>= giop_s;
        if (_len > 1)
          giop_s.put_char_array((const CORBA::Char *)((const char*)result),_len);
        else {
          if ((const char*) result == 0 && omniORB::traceLevel > 1)
            _CORBA_null_string_ptr(0);
          CORBA::Char('\0') >>= giop_s;
        }
      }
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "isRead") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::Short arg_num;
    
    arg_num <<= giop_s;
    
    giop_s.RequestReceived();
    CORBA::Short result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->isRead(arg_num);
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_2) + 2;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "transfer") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::Short arg_num;
    
    arg_num <<= giop_s;
    
    giop_s.RequestReceived();
    CORBA::Short result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->transfer(arg_num);
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_2) + 2;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "transferAll") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->transferAll();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "deleteMessage") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::Short arg_num;
    
    arg_num <<= giop_s;
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->deleteMessage(arg_num);
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "deleteAllMessages") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->deleteAllMessages();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "open") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->open();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "close") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->close();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "destroy") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->destroy();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  return 0;
}

void*
_impl_TucanEmailFetcher::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanEmailFetcher::_PD_repoId) )
    return (_impl_TucanEmailFetcher*) this;
  
  return 0;
}

const char*
_impl_TucanEmailFetcher::_mostDerivedRepoId()
{
  return TucanEmailFetcher::_PD_repoId;
}

TucanEmailFetcherFactory_ptr TucanEmailFetcherFactory_Helper::_nil() {
  return TucanEmailFetcherFactory::_nil();
}

CORBA::Boolean TucanEmailFetcherFactory_Helper::is_nil(TucanEmailFetcherFactory_ptr p) {
  return CORBA::is_nil(p);

}

void TucanEmailFetcherFactory_Helper::release(TucanEmailFetcherFactory_ptr p) {
  CORBA::release(p);
}

void TucanEmailFetcherFactory_Helper::duplicate(TucanEmailFetcherFactory_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanEmailFetcherFactory_Helper::NP_alignedSize(TucanEmailFetcherFactory_ptr obj, size_t offset) {
  return TucanEmailFetcherFactory::_alignedSize(obj, offset);
}

void TucanEmailFetcherFactory_Helper::marshalObjRef(TucanEmailFetcherFactory_ptr obj, NetBufferedStream& s) {
  TucanEmailFetcherFactory::_marshalObjRef(obj, s);
}

TucanEmailFetcherFactory_ptr TucanEmailFetcherFactory_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanEmailFetcherFactory::_unmarshalObjRef(s);
}

void TucanEmailFetcherFactory_Helper::marshalObjRef(TucanEmailFetcherFactory_ptr obj, MemBufferedStream& s) {
  TucanEmailFetcherFactory::_marshalObjRef(obj, s);
}

TucanEmailFetcherFactory_ptr TucanEmailFetcherFactory_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanEmailFetcherFactory::_unmarshalObjRef(s);
}

TucanEmailFetcherFactory_ptr
TucanEmailFetcherFactory::_duplicate(TucanEmailFetcherFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanEmailFetcherFactory_ptr
TucanEmailFetcherFactory::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanEmailFetcherFactory_ptr
TucanEmailFetcherFactory::_nil()
{
  static _objref_TucanEmailFetcherFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanEmailFetcherFactory;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanEmailFetcherFactory::_PD_repoId = "IDL:TucanEmailFetcherFactory:1.0";

_objref_TucanEmailFetcherFactory::~_objref_TucanEmailFetcherFactory() {}

_objref_TucanEmailFetcherFactory::_objref_TucanEmailFetcherFactory(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   
   omniObjRef(TucanEmailFetcherFactory::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanEmailFetcherFactory::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanEmailFetcherFactory::_PD_repoId) )
    return (TucanEmailFetcherFactory_ptr) this;
  
  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cTucanEmailFetcher_e_cTucanException
class _0RL_cd_812ed87905f9c760_02100000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_02100000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  virtual void userException(GIOP_C&, const char*);
  
  inline TucanEmailFetcher_ptr result() { return pd_result; }
  
  TucanEmailFetcher_ptr pd_result;
};

void _0RL_cd_812ed87905f9c760_02100000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = TucanEmailFetcher_Helper::unmarshalObjRef(giop_client);
  
}

void _0RL_cd_812ed87905f9c760_02100000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_12100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_02100000* tcd = (_0RL_cd_812ed87905f9c760_02100000*) cd;
  _impl_TucanEmailFetcherFactory* impl = (_impl_TucanEmailFetcherFactory*) svnt->_ptrToInterface(TucanEmailFetcherFactory::_PD_repoId);
  tcd->pd_result = impl->create();
}

TucanEmailFetcher_ptr _objref_TucanEmailFetcherFactory::create()
{
  _0RL_cd_812ed87905f9c760_02100000 _call_desc(_0RL_lcfn_812ed87905f9c760_12100000, "create", 7, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

_pof_TucanEmailFetcherFactory::~_pof_TucanEmailFetcherFactory() {}

omniObjRef*
_pof_TucanEmailFetcherFactory::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanEmailFetcherFactory(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanEmailFetcherFactory::is_a(const char* id) const
{
  if( !strcmp(id, TucanEmailFetcherFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanEmailFetcherFactory _the_pof_TucanEmailFetcherFactory;

_impl_TucanEmailFetcherFactory::~_impl_TucanEmailFetcherFactory() {}

CORBA::Boolean
_impl_TucanEmailFetcherFactory::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "create") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    TucanEmailFetcher_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->create();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = TucanEmailFetcher_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      TucanEmailFetcher_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  return 0;
}

void*
_impl_TucanEmailFetcherFactory::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanEmailFetcherFactory::_PD_repoId) )
    return (_impl_TucanEmailFetcherFactory*) this;
  
  return 0;
}

const char*
_impl_TucanEmailFetcherFactory::_mostDerivedRepoId()
{
  return TucanEmailFetcherFactory::_PD_repoId;
}

TucanUserPrefs_ptr TucanUserPrefs_Helper::_nil() {
  return TucanUserPrefs::_nil();
}

CORBA::Boolean TucanUserPrefs_Helper::is_nil(TucanUserPrefs_ptr p) {
  return CORBA::is_nil(p);

}

void TucanUserPrefs_Helper::release(TucanUserPrefs_ptr p) {
  CORBA::release(p);
}

void TucanUserPrefs_Helper::duplicate(TucanUserPrefs_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanUserPrefs_Helper::NP_alignedSize(TucanUserPrefs_ptr obj, size_t offset) {
  return TucanUserPrefs::_alignedSize(obj, offset);
}

void TucanUserPrefs_Helper::marshalObjRef(TucanUserPrefs_ptr obj, NetBufferedStream& s) {
  TucanUserPrefs::_marshalObjRef(obj, s);
}

TucanUserPrefs_ptr TucanUserPrefs_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanUserPrefs::_unmarshalObjRef(s);
}

void TucanUserPrefs_Helper::marshalObjRef(TucanUserPrefs_ptr obj, MemBufferedStream& s) {
  TucanUserPrefs::_marshalObjRef(obj, s);
}

TucanUserPrefs_ptr TucanUserPrefs_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanUserPrefs::_unmarshalObjRef(s);
}

TucanUserPrefs_ptr
TucanUserPrefs::_duplicate(TucanUserPrefs_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanUserPrefs_ptr
TucanUserPrefs::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanUserPrefs_ptr
TucanUserPrefs::_nil()
{
  static _objref_TucanUserPrefs* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanUserPrefs;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanUserPrefs::_PD_repoId = "IDL:TucanUserPrefs:1.0";

_objref_TucanUserPrefs::~_objref_TucanUserPrefs() {}

_objref_TucanUserPrefs::_objref_TucanUserPrefs(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   
   omniObjRef(TucanUserPrefs::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanUserPrefs::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanUserPrefs::_PD_repoId) )
    return (TucanUserPrefs_ptr) this;
  
  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cTucanAttributeSeq_e_cTucanException
class _0RL_cd_812ed87905f9c760_22100000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_22100000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  virtual void userException(GIOP_C&, const char*);
  
  inline TucanAttributeSeq* result() { return pd_result; }
  
  TucanAttributeSeq* pd_result;
};

void _0RL_cd_812ed87905f9c760_22100000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = new TucanAttributeSeq;
  
  *pd_result <<= giop_client;
  
}

void _0RL_cd_812ed87905f9c760_22100000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_32100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_22100000* tcd = (_0RL_cd_812ed87905f9c760_22100000*) cd;
  _impl_TucanUserPrefs* impl = (_impl_TucanUserPrefs*) svnt->_ptrToInterface(TucanUserPrefs::_PD_repoId);
  tcd->pd_result = impl->getAllAttributes();
}

TucanAttributeSeq* _objref_TucanUserPrefs::getAllAttributes()
{
  _0RL_cd_812ed87905f9c760_22100000 _call_desc(_0RL_lcfn_812ed87905f9c760_32100000, "getAllAttributes", 17, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_42100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_38000000* tcd = (_0RL_cd_812ed87905f9c760_38000000*) cd;
  _impl_TucanUserPrefs* impl = (_impl_TucanUserPrefs*) svnt->_ptrToInterface(TucanUserPrefs::_PD_repoId);
  tcd->pd_result = impl->getAttribute(tcd->arg_0);
}

char* _objref_TucanUserPrefs::getAttribute(const char* key)
{
  _0RL_cd_812ed87905f9c760_38000000 _call_desc(_0RL_lcfn_812ed87905f9c760_42100000, "getAttribute", 13, 0, key);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_e_cTucanException
class _0RL_cd_812ed87905f9c760_52100000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_52100000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const char* a_0, const char* a_1):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0),
     arg_1(a_1) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void userException(GIOP_C&, const char*);
  
  const char* arg_0;
  const char* arg_1;
  
};

CORBA::ULong _0RL_cd_812ed87905f9c760_52100000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_0) ? strlen((const char*) arg_0) + 1 : 1;
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  msgsize += ((const char*) arg_1) ? strlen((const char*) arg_1) + 1 : 1;
  
  return msgsize;
}

void _0RL_cd_812ed87905f9c760_52100000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_0)? strlen((const char*) arg_0) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_0),_len);
    else {
      if ((const char*) arg_0 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  {
    CORBA::ULong _len = (((const char*) arg_1)? strlen((const char*) arg_1) + 1 : 1);
    
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*)arg_1),_len);
    else {
      if ((const char*) arg_1 == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  
}

void _0RL_cd_812ed87905f9c760_52100000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, TucanException::_PD_repoId) == 0 ) {
    TucanException _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_62100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_52100000* tcd = (_0RL_cd_812ed87905f9c760_52100000*) cd;
  _impl_TucanUserPrefs* impl = (_impl_TucanUserPrefs*) svnt->_ptrToInterface(TucanUserPrefs::_PD_repoId);
  impl->setAttribute(tcd->arg_0, tcd->arg_1);
}

void _objref_TucanUserPrefs::setAttribute(const char* key, const char* value)
{
  _0RL_cd_812ed87905f9c760_52100000 _call_desc(_0RL_lcfn_812ed87905f9c760_62100000, "setAttribute", 13, 0, key, value);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_72100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_20000000* tcd = (_0RL_cd_812ed87905f9c760_20000000*) cd;
  _impl_TucanUserPrefs* impl = (_impl_TucanUserPrefs*) svnt->_ptrToInterface(TucanUserPrefs::_PD_repoId);
  impl->deleteAttribute(tcd->arg_0);
}

void _objref_TucanUserPrefs::deleteAttribute(const char* key)
{
  _0RL_cd_812ed87905f9c760_20000000 _call_desc(_0RL_lcfn_812ed87905f9c760_72100000, "deleteAttribute", 16, 0, key);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_82100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_26000000* tcd = (_0RL_cd_812ed87905f9c760_26000000*) cd;
  _impl_TucanUserPrefs* impl = (_impl_TucanUserPrefs*) svnt->_ptrToInterface(TucanUserPrefs::_PD_repoId);
  impl->setAuth(tcd->arg_0);
}

void _objref_TucanUserPrefs::setAuth(TucanAuth_ptr myAuth)
{
  _0RL_cd_812ed87905f9c760_26000000 _call_desc(_0RL_lcfn_812ed87905f9c760_82100000, "setAuth", 8, 0, myAuth);
  
  _invoke(_call_desc);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_92100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_71000000* tcd = (_0RL_cd_812ed87905f9c760_71000000*) cd;
  _impl_TucanUserPrefs* impl = (_impl_TucanUserPrefs*) svnt->_ptrToInterface(TucanUserPrefs::_PD_repoId);
  tcd->pd_result = impl->getAuth();
}

TucanAuth_ptr _objref_TucanUserPrefs::getAuth()
{
  _0RL_cd_812ed87905f9c760_71000000 _call_desc(_0RL_lcfn_812ed87905f9c760_92100000, "getAuth", 8, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_a2100000(omniCallDescriptor* cd, omniServant* svnt)
{
  
  _impl_TucanUserPrefs* impl = (_impl_TucanUserPrefs*) svnt->_ptrToInterface(TucanUserPrefs::_PD_repoId);
  impl->destroy();
}

void _objref_TucanUserPrefs::destroy()
{
  omniStdCallDesc::void_call _call_desc(_0RL_lcfn_812ed87905f9c760_a2100000, "destroy", 8, 0);
  
  _invoke(_call_desc);
  
}

_pof_TucanUserPrefs::~_pof_TucanUserPrefs() {}

omniObjRef*
_pof_TucanUserPrefs::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanUserPrefs(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanUserPrefs::is_a(const char* id) const
{
  if( !strcmp(id, TucanUserPrefs::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanUserPrefs _the_pof_TucanUserPrefs;

_impl_TucanUserPrefs::~_impl_TucanUserPrefs() {}

CORBA::Boolean
_impl_TucanUserPrefs::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "getAllAttributes") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    TucanAttributeSeq_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getAllAttributes();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      *(result.operator->()) >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getAttribute") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::String_var arg_key;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_key = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    CORBA::String_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getAttribute(arg_key.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      msgsize += ((const char*) result) ? strlen((const char*) result) + 1 : 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      {
        CORBA::ULong _len = (((const char*) result)? strlen((const char*) result) + 1 : 1);
        
        _len >>= giop_s;
        if (_len > 1)
          giop_s.put_char_array((const CORBA::Char *)((const char*)result),_len);
        else {
          if ((const char*) result == 0 && omniORB::traceLevel > 1)
            _CORBA_null_string_ptr(0);
          CORBA::Char('\0') >>= giop_s;
        }
      }
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setAttribute") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::String_var arg_key;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_key = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::String_var arg_value;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_value = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->setAttribute(arg_key.in(), arg_value.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "deleteAttribute") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    CORBA::String_var arg_key;
    
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<=  giop_s;
      arg_key = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->deleteAttribute(arg_key.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "setAuth") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    TucanAuth_var arg_myAuth;
    
    arg_myAuth = TucanAuth_Helper::unmarshalObjRef(giop_s);
    
    giop_s.RequestReceived();
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    this->setAuth(arg_myAuth.in());
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getAuth") ) {
    static const char* const _user_exns[] = {
      "IDL:TucanException:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    TucanAuth_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getAuth();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(TucanException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = TucanAuth_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      TucanAuth_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "destroy") ) {
    
    giop_s.RequestReceived();
    
    this->destroy();
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  return 0;
}

void*
_impl_TucanUserPrefs::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanUserPrefs::_PD_repoId) )
    return (_impl_TucanUserPrefs*) this;
  
  return 0;
}

const char*
_impl_TucanUserPrefs::_mostDerivedRepoId()
{
  return TucanUserPrefs::_PD_repoId;
}

TucanUserPrefsFactory_ptr TucanUserPrefsFactory_Helper::_nil() {
  return TucanUserPrefsFactory::_nil();
}

CORBA::Boolean TucanUserPrefsFactory_Helper::is_nil(TucanUserPrefsFactory_ptr p) {
  return CORBA::is_nil(p);

}

void TucanUserPrefsFactory_Helper::release(TucanUserPrefsFactory_ptr p) {
  CORBA::release(p);
}

void TucanUserPrefsFactory_Helper::duplicate(TucanUserPrefsFactory_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t TucanUserPrefsFactory_Helper::NP_alignedSize(TucanUserPrefsFactory_ptr obj, size_t offset) {
  return TucanUserPrefsFactory::_alignedSize(obj, offset);
}

void TucanUserPrefsFactory_Helper::marshalObjRef(TucanUserPrefsFactory_ptr obj, NetBufferedStream& s) {
  TucanUserPrefsFactory::_marshalObjRef(obj, s);
}

TucanUserPrefsFactory_ptr TucanUserPrefsFactory_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return TucanUserPrefsFactory::_unmarshalObjRef(s);
}

void TucanUserPrefsFactory_Helper::marshalObjRef(TucanUserPrefsFactory_ptr obj, MemBufferedStream& s) {
  TucanUserPrefsFactory::_marshalObjRef(obj, s);
}

TucanUserPrefsFactory_ptr TucanUserPrefsFactory_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return TucanUserPrefsFactory::_unmarshalObjRef(s);
}

TucanUserPrefsFactory_ptr
TucanUserPrefsFactory::_duplicate(TucanUserPrefsFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

TucanUserPrefsFactory_ptr
TucanUserPrefsFactory::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

TucanUserPrefsFactory_ptr
TucanUserPrefsFactory::_nil()
{
  static _objref_TucanUserPrefsFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_TucanUserPrefsFactory;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* TucanUserPrefsFactory::_PD_repoId = "IDL:TucanUserPrefsFactory:1.0";

_objref_TucanUserPrefsFactory::~_objref_TucanUserPrefsFactory() {}

_objref_TucanUserPrefsFactory::_objref_TucanUserPrefsFactory(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   
   omniObjRef(TucanUserPrefsFactory::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_TucanUserPrefsFactory::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, TucanUserPrefsFactory::_PD_repoId) )
    return (TucanUserPrefsFactory_ptr) this;
  
  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cTucanUserPrefs
class _0RL_cd_812ed87905f9c760_b2100000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_812ed87905f9c760_b2100000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  inline TucanUserPrefs_ptr result() { return pd_result; }
  
  TucanUserPrefs_ptr pd_result;
};

void _0RL_cd_812ed87905f9c760_b2100000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = TucanUserPrefs_Helper::unmarshalObjRef(giop_client);
  
}

// Local call call-back function.
static void
_0RL_lcfn_812ed87905f9c760_c2100000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_812ed87905f9c760_b2100000* tcd = (_0RL_cd_812ed87905f9c760_b2100000*) cd;
  _impl_TucanUserPrefsFactory* impl = (_impl_TucanUserPrefsFactory*) svnt->_ptrToInterface(TucanUserPrefsFactory::_PD_repoId);
  tcd->pd_result = impl->create();
}

TucanUserPrefs_ptr _objref_TucanUserPrefsFactory::create()
{
  _0RL_cd_812ed87905f9c760_b2100000 _call_desc(_0RL_lcfn_812ed87905f9c760_c2100000, "create", 7, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

_pof_TucanUserPrefsFactory::~_pof_TucanUserPrefsFactory() {}

omniObjRef*
_pof_TucanUserPrefsFactory::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_TucanUserPrefsFactory(mdri, p, id, lid);
}

CORBA::Boolean
_pof_TucanUserPrefsFactory::is_a(const char* id) const
{
  if( !strcmp(id, TucanUserPrefsFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_TucanUserPrefsFactory _the_pof_TucanUserPrefsFactory;

_impl_TucanUserPrefsFactory::~_impl_TucanUserPrefsFactory() {}

CORBA::Boolean
_impl_TucanUserPrefsFactory::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "create") ) {
    
    giop_s.RequestReceived();
    TucanUserPrefs_var result;
    
    result = this->create();
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = TucanUserPrefs_Helper::NP_alignedSize((result.operator->()), msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      TucanUserPrefs_Helper::marshalObjRef((result.operator->()),giop_s);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  return 0;
}

void*
_impl_TucanUserPrefsFactory::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, TucanUserPrefsFactory::_PD_repoId) )
    return (_impl_TucanUserPrefsFactory*) this;
  
  return 0;
}

const char*
_impl_TucanUserPrefsFactory::_mostDerivedRepoId()
{
  return TucanUserPrefsFactory::_PD_repoId;
}

POA_TucanAddress::~POA_TucanAddress() {}

POA_TucanAddressFactory::~POA_TucanAddressFactory() {}

POA_TucanAuth::~POA_TucanAuth() {}

POA_TucanAuthFactory::~POA_TucanAuthFactory() {}

POA_TucanData::~POA_TucanData() {}

POA_TucanDataFactory::~POA_TucanDataFactory() {}

POA_TucanFolder::~POA_TucanFolder() {}

POA_TucanFolderFactory::~POA_TucanFolderFactory() {}

POA_TucanMessage::~POA_TucanMessage() {}

POA_TucanMessageFactory::~POA_TucanMessageFactory() {}

POA_TucanStore::~POA_TucanStore() {}

POA_TucanStoreFactory::~POA_TucanStoreFactory() {}

POA_TucanTransport::~POA_TucanTransport() {}

POA_TucanTransportFactory::~POA_TucanTransportFactory() {}

POA_TucanSession::~POA_TucanSession() {}

POA_TucanSessionFactory::~POA_TucanSessionFactory() {}

POA_TucanAddressBookAddress::~POA_TucanAddressBookAddress() {}

POA_TucanAddressBookAddressFactory::~POA_TucanAddressBookAddressFactory() {}

POA_TucanAddressBookFolder::~POA_TucanAddressBookFolder() {}

POA_TucanAddressBookFolderFactory::~POA_TucanAddressBookFolderFactory() {}

POA_TucanAddressBookMessage::~POA_TucanAddressBookMessage() {}

POA_TucanAddressBookMessageFactory::~POA_TucanAddressBookMessageFactory() {}

POA_TucanAddressBookStore::~POA_TucanAddressBookStore() {}

POA_TucanAddressBookStoreFactory::~POA_TucanAddressBookStoreFactory() {}

POA_TucanAddressBookTransport::~POA_TucanAddressBookTransport() {}

POA_TucanAddressBookTransportFactory::~POA_TucanAddressBookTransportFactory() {}

POA_TucanBbsAddress::~POA_TucanBbsAddress() {}

POA_TucanBbsAddressFactory::~POA_TucanBbsAddressFactory() {}

POA_TucanBbsFolder::~POA_TucanBbsFolder() {}

POA_TucanBbsFolderFactory::~POA_TucanBbsFolderFactory() {}

POA_TucanBbsMessage::~POA_TucanBbsMessage() {}

POA_TucanBbsMessageFactory::~POA_TucanBbsMessageFactory() {}

POA_TucanBbsStore::~POA_TucanBbsStore() {}

POA_TucanBbsStoreFactory::~POA_TucanBbsStoreFactory() {}

POA_TucanBbsTransport::~POA_TucanBbsTransport() {}

POA_TucanBbsTransportFactory::~POA_TucanBbsTransportFactory() {}

POA_TucanCalendarAddress::~POA_TucanCalendarAddress() {}

POA_TucanCalendarAddressFactory::~POA_TucanCalendarAddressFactory() {}

POA_TucanCalendarFolder::~POA_TucanCalendarFolder() {}

POA_TucanCalendarFolderFactory::~POA_TucanCalendarFolderFactory() {}

POA_TucanCalendarMessage::~POA_TucanCalendarMessage() {}

POA_TucanCalendarMessageFactory::~POA_TucanCalendarMessageFactory() {}

POA_TucanCalendarStore::~POA_TucanCalendarStore() {}

POA_TucanCalendarStoreFactory::~POA_TucanCalendarStoreFactory() {}

POA_TucanCalendarTransport::~POA_TucanCalendarTransport() {}

POA_TucanCalendarTransportFactory::~POA_TucanCalendarTransportFactory() {}

POA_TucanDirectory::~POA_TucanDirectory() {}

POA_TucanDirectoryFactory::~POA_TucanDirectoryFactory() {}

POA_TucanEmailAddress::~POA_TucanEmailAddress() {}

POA_TucanEmailAddressFactory::~POA_TucanEmailAddressFactory() {}

POA_TucanEmailFolder::~POA_TucanEmailFolder() {}

POA_TucanEmailFolderFactory::~POA_TucanEmailFolderFactory() {}

POA_TucanEmailMessage::~POA_TucanEmailMessage() {}

POA_TucanEmailMessageFactory::~POA_TucanEmailMessageFactory() {}

POA_TucanEmailStore::~POA_TucanEmailStore() {}

POA_TucanEmailStoreFactory::~POA_TucanEmailStoreFactory() {}

POA_TucanEmailTransport::~POA_TucanEmailTransport() {}

POA_TucanEmailTransportFactory::~POA_TucanEmailTransportFactory() {}

POA_TucanSMTPTransport::~POA_TucanSMTPTransport() {}

POA_TucanSMTPTransportFactory::~POA_TucanSMTPTransportFactory() {}

POA_TucanFaxAddress::~POA_TucanFaxAddress() {}

POA_TucanFaxAddressFactory::~POA_TucanFaxAddressFactory() {}

POA_TucanFaxFolder::~POA_TucanFaxFolder() {}

POA_TucanFaxFolderFactory::~POA_TucanFaxFolderFactory() {}

POA_TucanFaxMessage::~POA_TucanFaxMessage() {}

POA_TucanFaxMessageFactory::~POA_TucanFaxMessageFactory() {}

POA_TucanFaxStore::~POA_TucanFaxStore() {}

POA_TucanFaxStoreFactory::~POA_TucanFaxStoreFactory() {}

POA_TucanFaxTransport::~POA_TucanFaxTransport() {}

POA_TucanFaxTransportFactory::~POA_TucanFaxTransportFactory() {}

POA_TucanVoiceAddress::~POA_TucanVoiceAddress() {}

POA_TucanVoiceAddressFactory::~POA_TucanVoiceAddressFactory() {}

POA_TucanVoiceFolder::~POA_TucanVoiceFolder() {}

POA_TucanVoiceFolderFactory::~POA_TucanVoiceFolderFactory() {}

POA_TucanVoiceMessage::~POA_TucanVoiceMessage() {}

POA_TucanVoiceMessageFactory::~POA_TucanVoiceMessageFactory() {}

POA_TucanVoiceStore::~POA_TucanVoiceStore() {}

POA_TucanVoiceStoreFactory::~POA_TucanVoiceStoreFactory() {}

POA_TucanVoiceTransport::~POA_TucanVoiceTransport() {}

POA_TucanVoiceTransportFactory::~POA_TucanVoiceTransportFactory() {}

POA_TucanEmailFetcher::~POA_TucanEmailFetcher() {}

POA_TucanEmailFetcherFactory::~POA_TucanEmailFetcherFactory() {}

POA_TucanUserPrefs::~POA_TucanUserPrefs() {}

POA_TucanUserPrefsFactory::~POA_TucanUserPrefsFactory() {}

